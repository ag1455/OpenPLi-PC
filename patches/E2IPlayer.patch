diff -ruN o/IPTVPlayer/components/iconmenager.py pc/IPTVPlayer/components/iconmenager.py
--- o/IPTVPlayer/components/iconmenager.py	2022-07-03 14:10:10.737100894 +0300
+++ pc/IPTVPlayer/components/iconmenager.py	2023-05-03 17:16:32.654022232 +0300
@@ -29,7 +29,7 @@
 
 
 #config.plugins.iptvplayer.showcover (true|false)
-#config.plugins.iptvplayer.SciezkaCache = ConfigText(default = "/hdd/IPTVCache")
+#config.plugins.iptvplayer.SciezkaCache = ConfigText(default = "/media/media/hdd/IPTVCache")
 
 class IconMenager:
     HEADER = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate'}
@@ -280,7 +280,7 @@
             params_cfad = {'with_metadata': True, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True}
             domain = urlparser.getDomain(img_url, onlyDomain=True)
 
-            params_cfad['cookiefile'] = '/hdd/IPTVCache//cookies/{0}.cookie'.format(domain)
+            params_cfad['cookiefile'] = '/media/hdd/IPTVCache//cookies/{0}.cookie'.format(domain)
 
         else:
             params_cfad = {}
diff -ruN o/IPTVPlayer/components/iptvconfigmenu.py pc/IPTVPlayer/components/iptvconfigmenu.py
--- o/IPTVPlayer/components/iptvconfigmenu.py	2023-01-29 15:16:27.165092039 +0300
+++ pc/IPTVPlayer/components/iptvconfigmenu.py	2023-05-03 17:16:32.654022232 +0300
@@ -76,7 +76,7 @@
 config.plugins.iptvplayer.showinMainMenu = ConfigYesNo(default=False)
 config.plugins.iptvplayer.ListaGraficzna = ConfigYesNo(default=True)
 config.plugins.iptvplayer.group_hosts = ConfigYesNo(default=True)
-config.plugins.iptvplayer.NaszaSciezka = ConfigDirectory(default="/hdd/movie/") #, fixed_size = False)
+config.plugins.iptvplayer.NaszaSciezka = ConfigDirectory(default="/media/hdd/movie/") #, fixed_size = False)
 config.plugins.iptvplayer.bufferingPath = ConfigDirectory(default=config.plugins.iptvplayer.NaszaSciezka.value) #, fixed_size = False)
 config.plugins.iptvplayer.buforowanie = ConfigYesNo(default=False)
 config.plugins.iptvplayer.buforowanie_m3u8 = ConfigYesNo(default=True)
@@ -162,7 +162,7 @@
 
 # end with buffering mode players
 
-config.plugins.iptvplayer.SciezkaCache = ConfigDirectory(default="/hdd/IPTVCache/") #, fixed_size = False)
+config.plugins.iptvplayer.SciezkaCache = ConfigDirectory(default="/media/hdd/IPTVCache/") #, fixed_size = False)
 config.plugins.iptvplayer.NaszaTMP = ConfigDirectory(default="/tmp/") #, fixed_size = False)
 config.plugins.iptvplayer.ZablokujWMV = ConfigYesNo(default=True)
 
@@ -184,7 +184,7 @@
 config.plugins.iptvplayer.napisy24pl_password = ConfigText(default="", fixed_size=False)
 
 config.plugins.iptvplayer.debugprint = ConfigSelection(default="", choices=[("", _("no")), ("console", _("yes, to console")), 
-                                                                            ("debugfile", _("yes, to file /hdd/iptv.dbg")),
+                                                                            ("debugfile", _("yes, to file /media/hdd/iptv.dbg")),
                                                                             ("/tmp/iptv.dbg", _("yes, to file /tmp/iptv.dbg")),
                                                                             ("/home/root/logs/iptv.dbg", _("yes, to file /home/root/logs/iptv.dbg")),
                                                                             ])
diff -ruN o/IPTVPlayer/components/iptvplayerwidget.py pc/IPTVPlayer/components/iptvplayerwidget.py
--- o/IPTVPlayer/components/iptvplayerwidget.py	2023-05-03 17:15:44.540162632 +0300
+++ pc/IPTVPlayer/components/iptvplayerwidget.py	2023-05-03 17:16:32.654022232 +0300
@@ -59,7 +59,6 @@
 
 from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _, IPTVPlayerNeedInit, GetIPTVPlayerLastHostError, GetIPTVNotify, GetIPTVSleep
 
-from Plugins.Extensions.IPTVPlayer.setup.iptvsetupwidget import IPTVSetupMainWidget
 from Plugins.Extensions.IPTVPlayer.components.iptvplayer import IPTVStandardMoviePlayer, IPTVMiniMoviePlayer
 from Plugins.Extensions.IPTVPlayer.components.iptvextmovieplayer import IPTVExtMoviePlayer
 from Plugins.Extensions.IPTVPlayer.components.iptvpictureplayer import IPTVPicturePlayerWidget
@@ -1202,10 +1201,6 @@
         self.displayGroupsList.append((_('All'), 'all'))
         self.displayGroupsList.append((_("Configuration"), "config"))
 
-        if config.plugins.iptvplayer.AktualizacjaWmenu.value == True:
-            if config.plugins.iptvplayer.preferredupdateserver.value != '4': #4 = managed by opkg
-                self.displayGroupsList.append((_("Update"), "update"))
-
         self.newDisplayGroupsList = []
         self.session.openWithCallback(self.selectGroupCallback, PlayerSelectorWidget, inList=self.displayGroupsList, outList=self.newDisplayGroupsList, numOfLockedItems=self.getNumOfSpecialItems(self.displayGroupsList), groupName='selectgroup')
 
@@ -2047,8 +2042,6 @@
 
     def configCallback(self):
         if IPTVPlayerNeedInit():
-            self.session.openWithCallback(self.selectHost, IPTVSetupMainWidget, True)
-        else:
             self.askUpdateAvailable(self.selectHost)
 
     def randomizePlayableItems(self, randomize=True):
@@ -2311,7 +2304,7 @@
         if self.checkWrongImage:
             self.checkWrongImage = False
             try:
-                if os_path.isfile(GetExtensionsDir('/iPabUpdater/__init__.pyo')):
+                if os_path.isfile(GetExtensionsDir('/iPabUpdater/__init__.pyc')):
                     message = ["WARNING (phase 1/3)"]
                     message.append("Because of blocking part of functionality of the IPTVPlayer by http://ipab.tv/ developer your image was blacklisted.")
                     message.append("Please be also informed that users of http://ipab.tv/ will NOT get support, due to same reason.")
diff -ruN o/IPTVPlayer/hosts/hosturllist.py pc/IPTVPlayer/hosts/hosturllist.py
--- o/IPTVPlayer/hosts/hosturllist.py	2022-07-03 14:10:10.773101559 +0300
+++ pc/IPTVPlayer/hosts/hosturllist.py	2023-05-03 17:16:32.654022232 +0300
@@ -22,7 +22,7 @@
 ###################################################
 # Config options for HOST
 ###################################################
-config.plugins.iptvplayer.Sciezkaurllist = ConfigDirectory(default="/hdd/")
+config.plugins.iptvplayer.Sciezkaurllist = ConfigDirectory(default="/media/hdd/")
 config.plugins.iptvplayer.grupujurllist = ConfigYesNo(default=True)
 config.plugins.iptvplayer.sortuj = ConfigYesNo(default=True)
 
diff -ruN o/IPTVPlayer/hosts/hostXXX.py pc/IPTVPlayer/hosts/hostXXX.py
--- o/IPTVPlayer/hosts/hostXXX.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostXXX.py	2023-05-03 17:15:14.643199680 +0300
@@ -0,0 +1,11887 @@
+ï»¿# -*- coding: utf-8 -*-
+# Modified by Blindspot - 2023.03.12.
+# Fixed FreeOnes
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.ihost import IHost, CDisplayListItem, RetHost, CUrlItem, CHostBase, CBaseHostClass
+import Plugins.Extensions.IPTVPlayer.libs.pCommon as pCommon
+from Plugins.Extensions.IPTVPlayer.libs import ph
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, CSearchHistoryHelper, CSelOneLink, GetTmpDir, GetCookieDir, iptv_system, GetPluginDir, byteify, rm, GetLogoDir
+from Plugins.Extensions.IPTVPlayer.iptvdm.iptvdh import DMHelper
+from Plugins.Extensions.IPTVPlayer.libs.urlparser import urlparser 
+from Plugins.Extensions.IPTVPlayer.tools.iptvfilehost import IPTVFileHost
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _, SetIPTVPlayerLastHostError, GetIPTVSleep, GetIPTVNotify
+from Plugins.Extensions.IPTVPlayer.libs.youtube_dl.utils import clean_html 
+from Plugins.Extensions.IPTVPlayer.libs.urlparserhelper import decorateUrl, getDirectM3U8Playlist, unpackJSPlayerParams, TEAMCASTPL_decryptPlayerParams, getF4MLinksWithMeta, getMPDLinksWithMeta
+from Plugins.Extensions.IPTVPlayer.iptvdm.ffmpegdownloader import FFMPEGDownloader
+###################################################
+# FOREIGN import
+###################################################
+import re, urllib, urllib2, base64, math, hashlib, random
+try:
+    import simplejson
+except:
+    import json as simplejson   
+from Tools.Directories import resolveFilename, SCOPE_PLUGINS
+from Components.config import config, ConfigSelection, ConfigYesNo, ConfigText, ConfigInteger, getConfigListEntry, ConfigPIN, ConfigDirectory
+from time import sleep, time as time_time
+from datetime import datetime
+from os import remove as os_remove, path as os_path, system as os_system
+import urlparse
+###################################################
+# E2 GUI COMMPONENTS 
+###################################################
+from Plugins.Extensions.IPTVPlayer.tools.e2ijs import js_execute
+from Screens.MessageBox import MessageBox
+from Plugins.Extensions.IPTVPlayer.components.asynccall import MainSessionWrapper
+###################################################
+# Config options for HOST
+###################################################
+config.plugins.iptvplayer.xxxwymagajpin = ConfigYesNo(default = True)
+config.plugins.iptvplayer.xxxlist = ConfigDirectory(default = "/media/hdd/")
+config.plugins.iptvplayer.xxxsortuj = ConfigYesNo(default = True)
+config.plugins.iptvplayer.xxxsearch = ConfigYesNo(default = False)
+config.plugins.iptvplayer.xxxsortmfc = ConfigYesNo(default = False)
+config.plugins.iptvplayer.xxxsortall = ConfigYesNo(default = True)
+config.plugins.iptvplayer.xhamstertag = ConfigYesNo(default = False)
+config.plugins.iptvplayer.chaturbate = ConfigSelection(default="", choices = [("",_("all")), ("female/",_("female")), ("couple/",_("couple")), ("trans/",_("trans")), ("male/",_("male"))])
+config.plugins.iptvplayer.cam4 = ConfigSelection(default="0", choices = [("0",_("https")), ("1",_("rtmp"))])
+config.plugins.iptvplayer.fotka = ConfigSelection(default="0", choices = [("0",_("https")), ("1",_("rtmp"))])
+config.plugins.iptvplayer.xxxupdate = ConfigYesNo(default = True)
+config.plugins.iptvplayer.xxxzbiornik = ConfigYesNo(default = False)
+config.plugins.iptvplayer.xxx4k = ConfigYesNo(default = False)
+config.plugins.iptvplayer.yourporn = ConfigInteger(4, (1, 99))  
+
+def GetConfigList():
+    optionList = []
+    optionList.append( getConfigListEntry(_("Pin protection for plugin")+" :", config.plugins.iptvplayer.xxxwymagajpin ) )
+    optionList.append( getConfigListEntry(_("Path to xxxlist.txt :"), config.plugins.iptvplayer.xxxlist) )
+    optionList.append( getConfigListEntry(_("Sort xxxlist :"), config.plugins.iptvplayer.xxxsortuj) )
+    optionList.append( getConfigListEntry(_("Sort Myfreecams :"), config.plugins.iptvplayer.xxxsortmfc) )
+    optionList.append( getConfigListEntry(_("Global search :"), config.plugins.iptvplayer.xxxsearch) )
+    optionList.append( getConfigListEntry(_("Global sort :"), config.plugins.iptvplayer.xxxsortall) )
+    optionList.append( getConfigListEntry(_("CHATURBATE preferences :"), config.plugins.iptvplayer.chaturbate) )
+    #optionList.append( getConfigListEntry(_("Cam4 stream :"), config.plugins.iptvplayer.cam4) )
+    #optionList.append( getConfigListEntry(_("Fotka.pl stream :"), config.plugins.iptvplayer.fotka) )
+    optionList.append( getConfigListEntry(_("Add tags to XHAMSTER :"), config.plugins.iptvplayer.xhamstertag) )
+    optionList.append( getConfigListEntry(_("Show Profiles in ZBIORNIK MINI :"), config.plugins.iptvplayer.xxxzbiornik) )
+    optionList.append( getConfigListEntry(_("YOURPORN Server :"), config.plugins.iptvplayer.yourporn) )
+    optionList.append( getConfigListEntry(_("Show changelog :"), config.plugins.iptvplayer.xxxupdate) )
+    optionList.append( getConfigListEntry(_("Playback UHD :"), config.plugins.iptvplayer.xxx4k) )
+
+    return optionList
+###################################################
+
+###################################################
+# Title of HOST
+###################################################
+def gettytul():
+    return 'XXX'
+
+class IPTVHost(IHost):
+    LOGO_NAME = 'XXXlogo.png'
+    PATH_TO_LOGO = resolveFilename(SCOPE_PLUGINS, 'Extensions/IPTVPlayer/icons/logos/' + LOGO_NAME )
+
+    def __init__(self):
+        printDBG( "init begin" )
+        self.host = Host()
+        self.prevIndex = []
+        self.currList = []
+        self.prevList = []
+        printDBG( "init end" )
+        
+    def isProtectedByPinCode(self):
+        return config.plugins.iptvplayer.xxxwymagajpin.value
+    
+    def getLogoPath(self):  
+        return RetHost(RetHost.OK, value = [self.PATH_TO_LOGO])
+
+    def getInitList(self):
+        printDBG( "getInitList begin" )
+        self.prevIndex = []
+        self.currList = self.host.getInitList()
+        self.host.setCurrList(self.currList)
+        self.prevList = []
+        printDBG( "getInitList end" )
+        return RetHost(RetHost.OK, value = self.currList)
+
+    def getListForItem(self, Index = 0, refresh = 0, selItem = None):
+        printDBG( "getListForItem begin" )
+        self.prevIndex.append(Index)
+        self.prevList.append(self.currList)
+        self.currList = self.host.getListForItem(Index, refresh, selItem)
+        printDBG( "getListForItem end" )
+        return RetHost(RetHost.OK, value = self.currList)
+
+    def getPrevList(self, refresh = 0):
+        printDBG( "getPrevList begin" )
+        if(len(self.prevList) > 0):
+            self.prevIndex.pop()
+            self.currList = self.prevList.pop()
+            self.host.setCurrList(self.currList)
+            printDBG( "getPrevList end OK" )
+            return RetHost(RetHost.OK, value = self.currList)
+        else:
+            printDBG( "getPrevList end ERROR" )
+            return RetHost(RetHost.ERROR, value = [])
+
+    def getCurrentList(self, refresh = 0):
+        printDBG( "getCurrentList begin" )
+        printDBG( "getCurrentList end" )
+        return RetHost(RetHost.OK, value = self.currList)
+
+    def getLinksForVideo(self, Index = 0, item = None):
+        return RetHost(RetHost.NOT_IMPLEMENTED, value = [])
+        
+    def getResolvedURL(self, url):
+        printDBG( "getResolvedURL begin" )
+        if url != None and url != '':        
+            ret = self.host.getResolvedURL(url)
+            if ret != None and ret != '':        
+               printDBG( "getResolvedURL ret: "+str(ret))
+               list = []
+               list.append(ret)
+               printDBG( "getResolvedURL end OK" )
+               return RetHost(RetHost.OK, value = list)
+            else:
+               printDBG( "getResolvedURL end" )
+               return RetHost(RetHost.NOT_IMPLEMENTED, value = [])                
+        else:
+            printDBG( "getResolvedURL end" )
+            return RetHost(RetHost.NOT_IMPLEMENTED, value = [])
+
+    def getSearchResults(self, pattern, searchType = None):
+        printDBG( "getSearchResults begin" )
+        printDBG( "getSearchResults pattern: " +pattern)
+        self.prevIndex.append(0)
+        self.prevList.append(self.currList)
+        self.currList = self.host.getSearchResults(pattern, searchType)
+        printDBG( "getSearchResults end" )
+        return RetHost(RetHost.OK, value = self.currList)
+
+    ###################################################
+    # Additional functions on class IPTVHost
+    ###################################################
+
+class Host:
+    XXXversion = "2023.03.12.1"
+    XXXremote  = "0.0.0.0"
+    currList = []
+    MAIN_URL = ''
+    SEARCH_proc = ''
+    
+    def __init__(self):
+        printDBG( 'Host __init__ begin' )
+        self.cm = pCommon.common()
+        self.up = urlparser() 
+        self.history = CSearchHistoryHelper('xxx')
+        self.sessionEx = MainSessionWrapper() 
+        self.currList = []
+        printDBG( 'Host __init__ end' )
+
+    def setCurrList(self, list):
+        printDBG( 'Host setCurrList begin' )
+        self.currList = list
+        printDBG( 'Host setCurrList end' )
+        return 
+
+    def getInitList(self):
+        printDBG( 'Host getInitList begin' )
+        _url = 'http://www.blindspot.nhely.hu/hosts/hostXXX.py'
+        query_data = { 'url': _url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+        try:
+           data = self.cm.getURLRequestData(query_data)
+           #printDBG( 'Host init data: '+data )
+           r=self.cm.ph.getSearchGroups(data, '''XXXversion = ['"]([^"^']+?)['"]''', 1, True)[0]
+           if r:
+              printDBG( 'XXXremote = '+r )
+              self.XXXremote=r
+        except:
+           printDBG( 'Host init query error' )
+        self.currList = self.listsItems(-1, '', 'main-menu')
+        printDBG( 'Host getInitList end' )
+        return self.currList
+
+    def getListForItem(self, Index = 0, refresh = 0, selItem = None):
+        printDBG( 'Host getListForItem begin' )
+        valTab = []
+        if len(self.currList[Index].urlItems) == 0:
+           return valTab
+        valTab = self.listsItems(Index, self.currList[Index].urlItems[0], self.currList[Index].urlSeparateRequest)
+        self.currList = valTab
+        printDBG( 'Host getListForItem end' )
+        return self.currList
+
+    def getSearchResults(self, pattern, searchType = None):
+        printDBG( "Host getSearchResults begin" )
+        printDBG( "Host getSearchResults pattern: " +pattern)
+        valTab = []
+        valTab = self.listsItems(-1, pattern, 'SEARCH')
+        self.currList = valTab
+        printDBG( "Host getSearchResults end" )
+        return self.currList
+
+    def _cleanHtmlStr(self, str):
+        str = str.replace('<', ' <').replace('\n', ' ').replace('\r', ' ').replace('\t', ' ')
+        return clean_html(str).strip()
+
+    def FullUrl(self, url):
+        if url.startswith('//'):
+            url = 'http:' + url
+        return url
+
+    def getPage(self, baseUrl, cookie_domain, cloud_domain, params={}, post_data=None):
+        COOKIEFILE = os_path.join(GetCookieDir(), cookie_domain)
+        self.USER_AGENT = 'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/37.0.2062.120 Chrome/37.0.2062.120 Safari/537.36'
+        self.HEADER = {'User-Agent': self.USER_AGENT, 'Accept': 'text/html'}
+        params['cloudflare_params'] = {'domain':cloud_domain, 'cookie_file':COOKIEFILE, 'User-Agent':self.USER_AGENT}
+        return self.cm.getPageCFProtection(baseUrl, params, post_data)
+
+    def getPage4k(self, baseUrl, cookie_domain, cloud_domain, params={}, post_data=None):
+        COOKIEFILE = os_path.join(GetCookieDir(), cookie_domain)
+        self.USER_AGENT = 'Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:21.0) Gecko/20100101 Firefox/21.0'
+        def _getFullUrl(url):
+            if self.cm.isValidUrl(url):
+                return url
+            else:
+                return urlparse.urljoin(baseUrl, url) 
+        if params == {}: params = dict(self.defaultParams)
+        params['cookie_items'] = {'xxx':'ok'}
+        params['cloudflare_params'] = {'domain':cloud_domain, 'cookie_file':COOKIEFILE, 'User-Agent':self.USER_AGENT, 'full_url_handle':_getFullUrl}
+        return self.cm.getPageCFProtection(baseUrl, params, post_data)
+
+    def _getPage(self, url, addParams = {}, post_data = None):
+        
+        try:
+            import httplib
+            def patch_http_response_read(func):
+                def inner(*args):
+                    try:
+                        return func(*args)
+                    except httplib.IncompleteRead, e:
+                        return e.partial
+                return inner
+            prev_read = httplib.HTTPResponse.read
+            httplib.HTTPResponse.read = patch_http_response_read(httplib.HTTPResponse.read)
+        except Exception: printExc()
+        sts, data = self.cm.getPage(url, addParams, post_data)
+        try: httplib.HTTPResponse.read = prev_read
+        except Exception: printExc()
+        return sts, data
+
+    def get_Page(self, baseUrl, addParams={}, post_data=None):
+        if addParams == {}: addParams = dict(self.defaultParams)
+        return self.cm.getPage(baseUrl, addParams, post_data)
+
+
+    def listsItems(self, Index, url, name = ''):
+        printDBG( 'Host listsItems begin' )
+        printDBG( 'Host listsItems url: '+url )
+        valTab = []
+        self.format4k = config.plugins.iptvplayer.xxx4k.value
+
+        if name == 'main-menu':
+           printDBG( 'Host listsItems begin name='+name )
+           if self.XXXversion <> self.XXXremote and self.XXXremote <> "0.0.0.0":
+              valTab.append(CDisplayListItem('---UPDATE---','UPDATE MENU',        CDisplayListItem.TYPE_CATEGORY,           [''], 'UPDATE',  'https://cdn-icons-png.flaticon.com/512/5278/5278658.png', None)) 
+           valTab.append(CDisplayListItem('XHAMSTER',       'xhamster.com',       CDisplayListItem.TYPE_CATEGORY, ['https://xhamster.com/categories'],     'xhamster','https://1000logos.net/wp-content/uploads/2018/12/xHamster-Logo-768x432.png', None)) 
+           valTab.append(CDisplayListItem('BOUNDHUB',       'https://www.boundhub.com',       CDisplayListItem.TYPE_CATEGORY, ['https://www.boundhub.com/categories/'],     'BOUNDHUB','https://findbestporno.com/public/uploads/image/2021/9/BoundHub.jpg', None))
+           valTab.append(CDisplayListItem('SHAMELESS',       'https://www.shameless.com/',       CDisplayListItem.TYPE_CATEGORY, ['https://www.shameless.com/categories/'],     'SHAMELESS','https://onepornlist.com/img/screenshots/shameless.jpg', None))
+           valTab.append(CDisplayListItem('XXXBULE',       'https://www.xxxbule.com/',       CDisplayListItem.TYPE_CATEGORY, ['https://www.xxxbule.com/streams/'],     'XXXBULE','https://ph-static.com/xxxbule/css/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNDIG',       'https://www.porndig.com',       CDisplayListItem.TYPE_CATEGORY, ['https://www.porndig.com'],     'PORNDIG','https://assets.porndig.com/assets/porndig/img/logo_dark/logo_desktop_1.png', None)) 
+           valTab.append(CDisplayListItem('HOME MOVIES TUBE',     'http://www.homemoviestube.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.homemoviestube.com/channels/'],'HomeMoviesTube', 'http://www.homemoviestube.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('ZBIORNIK MINI',     'https://mini.zbiornik.com', CDisplayListItem.TYPE_CATEGORY, ['https://mini.zbiornik.com/filmy'],'ZBIORNIKMINI', 'https://niebezpiecznik.pl/wp-content/uploads/2016/04/Zbiornik.jpg', None)) 
+           valTab.append(CDisplayListItem('HCLIPS',     'http://www.hclips.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.hclips.com/categories/'],'hclips', 'https://i.pinimg.com/474x/d3/16/78/d31678f3c99564740ab5b097e7792927.jpg', None)) 
+           valTab.append(CDisplayListItem('4TUBE',          'www.4tube.com',      CDisplayListItem.TYPE_CATEGORY, ['https://www.4tube.com/tags'],          '4TUBE',   'https://www.4tube.com/assets/img/layout/4tube-logo-1f503fd81c.png', None)) 
+           valTab.append(CDisplayListItem('EPORNER',        'www.eporner.com',    CDisplayListItem.TYPE_CATEGORY, ['https://www.eporner.com/cats/'],   'eporner', 'http://static.eporner.com/new/logo.png', None)) 
+           valTab.append(CDisplayListItem('TUBE8',          'www.tube8.com',      CDisplayListItem.TYPE_CATEGORY, ['http://www.tube8.com/categories.html'], 'tube8',   'http://cdn1.static.tube8.phncdn.com/images/t8logo.png', None)) 
+           valTab.append(CDisplayListItem('YOUPORN',        'wwww.youporn.com',   CDisplayListItem.TYPE_CATEGORY, ['https://www.youporn.com/categories/'],'youporn', 'https://fs.ypncdn.com/cb/bundles/youpornwebfront/images/l_youporn_black.png?v=9b34af679da9f8f8279fb875c7bcea555a784ec3', None)) 
+           valTab.append(CDisplayListItem('PORNHUB',        'www.pornhub.com',    CDisplayListItem.TYPE_CATEGORY, ['https://www.pornhub.com/categories'],    'pornhub', 'https://mk0onemorecupofd9ppb.kinstacdn.com/wp-content/uploads/2018/11/Make-Money-Pornhub.jpg', None)) 
+           valTab.append(CDisplayListItem('HDPORN',         'www.hdporn.net',     CDisplayListItem.TYPE_CATEGORY, ['http://www.hdporn.net'],      'hdporn',  'http://www.hdporn.com/gfx/logo.jpg', None)) 
+           valTab.append(CDisplayListItem('REDTUBE',        'www.redtube.com',    CDisplayListItem.TYPE_CATEGORY, ['http://www.redtube.com/categories'],      'redtube', 'https://pornox.hu/contents/content_sources/15/s1_redtube.jpg', None)) 
+           valTab.append(CDisplayListItem('HENTAIGASM',     'hentaigasm.com',     CDisplayListItem.TYPE_CATEGORY, ['http://hentaigasm.com'],                'hentaigasm','http://hentaigasm.com/wp-content/themes/detube/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('XVIDEOS',        'www.xvideos.com',    CDisplayListItem.TYPE_CATEGORY, ['http://www.xvideos.com'],               'xvideos', 'http://emblemsbf.com/img/31442.jpg', None)) 
+           valTab.append(CDisplayListItem('XNXX',           'www.xnxx.com',       CDisplayListItem.TYPE_CATEGORY, ['http://www.xnxx.com'],                  'xnxx',    'http://www.naughtyalysha.com/tgp/xnxx/xnxx-porn-recip.jpg', None)) 
+           valTab.append(CDisplayListItem('PORNRABBIT',     'www.pornrabbit.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornrabbit.com/'],'pornrabbit','https://www.ismytube.com/media/channels/24.png', None)) 
+           valTab.append(CDisplayListItem('PORNWHITE',     'https://www.pornwhite.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornwhite.com/categories/'],'PORNWHITE','https://cdni.pornwhite.com/images_new/og-logo.png', None)) 
+           valTab.append(CDisplayListItem('AH-ME',     'www.ah-me.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.ah-me.com/channels.php'],'AH-ME','https://ahmestatic.fuckandcdn.com/ahmestatic/v30/common/ah-me/img/logo.jpg', None)) 
+           valTab.append(CDisplayListItem('AMATEURPORN',     'https://www.amateurporn.me', CDisplayListItem.TYPE_CATEGORY, ['https://www.amateurporn.me/categories/'],'AMATEURPORN', 'https://www.amateurporn.me/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('YOUJIZZ',     'http://www.youjizz.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.youjizz.com/categories'],'YOUJIZZ', 'https://cdne-static.cdn1122.com/app/1/images/youjizz-default-logo-4.png', None)) 
+           valTab.append(CDisplayListItem('PORNHAT',     'https://www.pornhat.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornhat.com/'],'PORNHAT', 'https://trademarks.justia.com/media/og_image.php?serial=90479360', None)) 
+           valTab.append(CDisplayListItem('DRTUBER',     'http://www.drtuber.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.drtuber.com/categories'],'DRTUBER', 'http://static.drtuber.com/templates/frontend/mobile/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('TNAFLIX',     'https://www.tnaflix.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.tnaflix.com/categories'],'TNAFLIX', 'https://pbs.twimg.com/profile_images/1109542593/logo_400x400.png', None)) 
+           valTab.append(CDisplayListItem('MEGATUBE',     'https://www.megatube.xxx', CDisplayListItem.TYPE_CATEGORY, ['https://www.megatube.xxx/categories'],'MEGATUBE', 'http://www.blindspot.nhely.hu/Thumbnails/megatube.png', None)) 
+           valTab.append(CDisplayListItem('RUS.PORN',     'https://rusvidos.tv', CDisplayListItem.TYPE_CATEGORY, ['http://rus.porn/'],'RUSPORN', 'http://mixporn24.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNTREX',     'http://www.porntrex.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.porntrex.com/categories/'],'PORNTREX', 'https://www.porntrex.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('GLAVMATURES',     'https://glavmatures.com', CDisplayListItem.TYPE_CATEGORY, ['https://glavmatures.com/tags/'],'GLAVMATURES', 'https://momporn.xxx/contents/content_sources/9/s2_908.jpg', None)) 
+           valTab.append(CDisplayListItem('WATCHMYGF',     'https://www.watchmygf.me', CDisplayListItem.TYPE_CATEGORY, ['https://www.watchmygf.me/categories/'],'WATCHMYGF', 'http://www.dinoreviews.com/img/watchmygf/watchmygf.jpg', None)) 
+           valTab.append(CDisplayListItem('FILMYPORNO',     'http://www.filmyporno.tv', CDisplayListItem.TYPE_CATEGORY, ['http://www.filmyporno.tv/channels/'],'FILMYPORNO', 'http://www.filmyporno.tv/templates/default_tube2016/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('WANKOZ',     'https://www.wankoz.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.wankoz.com/categories/'],'WANKOZ', 'https://www.wankoz.com/images_new/no_avatar_user_big.png', None)) 
+           valTab.append(CDisplayListItem('PORNMAKI',     'https://pornmaki.com', CDisplayListItem.TYPE_CATEGORY, ['https://pornmaki.com/channels/'],'PORNMAKI', 'https://images.pornmaki.com/resources/pornmaki.com/rwd_beta/default/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('THUMBZILLA',     'http://www.thumbzilla.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.thumbzilla.com/'],'THUMBZILLA', 'https://ei.phncdn.com/www-static/thumbzilla/images/pc/logo.png?cache=2022042804', None)) 
+           valTab.append(CDisplayListItem('YUVUTU',     'http://www.yuvutu.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.yuvutu.com/categories/'],'YUVUTU', 'http://www.yuvutu.com/themes/yuvutu_v2/images/yuvutu_logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNICOM',     'http://pornicom.com', CDisplayListItem.TYPE_CATEGORY, ['http://pornicom.com/categories/'],'PORNICOM', 'http://pornicom.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('SEXVID',     'https://www.sexvid.xxx', CDisplayListItem.TYPE_CATEGORY, ['https://www.sexvid.xxx/c/'],'SEXVID', 'http://www.blindspot.nhely.hu/Thumbnails/sexvid.png', None)) 
+           valTab.append(CDisplayListItem('PERFECTGIRLS',     'https://www.perfectgirls.xxx/', CDisplayListItem.TYPE_CATEGORY, ['https://www.perfectgirls.xxx/'],'PERFECTGIRLS', 'https://m.perfectgirls.net/images/no-sprite/logo.png', None)) 
+           valTab.append(CDisplayListItem('MILF300',     'https://www.milf300.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.milf300.com/categories'],'MILF300', 'https://boomba.club/uploads/posts/2022-01/1641679900_25-boomba-club-p-porn-silhouettes-erotika-27.jpg', None)) 
+           valTab.append(CDisplayListItem('TUBEPORNCLASSIC',     'http://tubepornclassic.com/', CDisplayListItem.TYPE_CATEGORY, ['http://tubepornclassic.com/categories/'],'TUBEPORNCLASSIC', 'https://tubepornclassic.com/static/images/favicons/android-icon-192x192.png', None)) 
+           valTab.append(CDisplayListItem('KOLOPORNO',     'https://www.koloporno.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.koloporno.com/kategoriach/'],'KOLOPORNO', 'https://pbs.twimg.com/profile_images/638608521072934912/sqy78GQm.png', None)) 
+           valTab.append(CDisplayListItem('MOTHERLESS',     'https://motherless.com/', CDisplayListItem.TYPE_CATEGORY, ['https://motherless.com/'],'MOTHERLESS', 'https://cdn5-images.motherlessmedia.com/images/EE3133B.jpg', None)) 
+           valTab.append(CDisplayListItem('PLAYVIDS',     'https://www.playvids.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.playvids.com/categories&jsclick=1'],'PLAYVIDS', 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS9PrWdcYR2t0pJjXg_Wi02ZyiP6E1PJ0mmilizp745_fazgzxu&s', None)) 
+           valTab.append(CDisplayListItem('FUX',     'http://www.fux.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.fux.com'],'fux', 'http://asian-porn-clips.com/files/screens/608c37e40bf59.jpg', None)) 
+           valTab.append(CDisplayListItem('PORNTUBE',     'http://www.porntube.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.porntube.com'],'PORNTUBE', 'https://backend.videosolo.org/uploads/images/16384328154740135-porntube.jpg', None)) 
+           valTab.append(CDisplayListItem('PORNERBROS',     'http://www.pornerbros.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornerbros.com'],'pornerbros', 'https://cdn-assets.pornerbros.com/PornerBros.png', None)) 
+           valTab.append(CDisplayListItem('MOVIEFAP',     'https://www.moviefap.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.moviefap.com/browse/'],'MOVIEFAP', 'https://www.moviefap.com/images/logo.gif', None)) 
+           valTab.append(CDisplayListItem('YOURPORN.SEXY',     'https://sxyprn.com', CDisplayListItem.TYPE_CATEGORY, ['https://sxyprn.com'],'yourporn', 'http://cdn.itsyourporn.com/assets/images/logo.jpg', None)) 
+           valTab.append(CDisplayListItem('FREEOMOVIE',     'https://www.freeomovie.to', CDisplayListItem.TYPE_CATEGORY, ['https://www.freeomovie.to'],'freeomovie', 'https://www.freeomovie.to/wp-content/uploads/2013/04/logo.png', None)) 
+           valTab.append(CDisplayListItem('KATESTUBE',     'http://www.katestube.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.katestube.com/categories/'],'KATESTUBE', 'https://www.katestube.com/images/logo.png', None)) 
+           #valTab.append(CDisplayListItem('PORNONE',     'https://pornone.com', CDisplayListItem.TYPE_CATEGORY, ['https://pornone.com/categories/'],'pornone', 'https://cdn.dribbble.com/users/1461209/screenshots/14183589/pornone_dribble.png?compress=1&resize=400x300', None)) 
+           valTab.append(CDisplayListItem('ZBPORN',     'https://zbporn.com', CDisplayListItem.TYPE_CATEGORY, ['https://zbporn.com/categories/'],'zbporn', 'http://www.blindspot.nhely.hu/Thumbnails/zbporn.png', None)) 
+           valTab.append(CDisplayListItem('PORNOXO',     'https://www.pornoxo.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornoxo.com'],'pornoxo', 'http://www.web-tv-sexe.fr/logo/pornoxo.jpg', None)) 
+           valTab.append(CDisplayListItem('PORNID',     'https://www.pornid.xxx', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornid.xxx/categories/'],'PORNID', 'https://cdn.pornid.xxx/img/logos/logo.png', None)) 
+           valTab.append(CDisplayListItem('XBABE',     'https://xbabe.com', CDisplayListItem.TYPE_CATEGORY, ['https://xbabe.com/categories/'],'xbabe', 'https://i.pinimg.com/280x280_RS/18/0f/69/180f69f035f1e949ec8cccd4ea9af29c.jpg', None)) 
+           valTab.append(CDisplayListItem('TXXX',     'http://www.txxx.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.txxx.com/categories/'],'txxx', 'https://txxx.asia/wr7fe/movie/32/159_cum-twice.jpg', None)) 
+           valTab.append(CDisplayListItem('SUNPORNO',     'https://www.sunporno.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.sunporno.com/channels/'],'sunporno', 'https://sunstatic.fuckandcdn.com/sunstatic/v31/common/sunporno/img/logo_top.png', None)) 
+           valTab.append(CDisplayListItem('SEXU',     'http://sexu.com', CDisplayListItem.TYPE_CATEGORY, ['http://sexu.com/'],'sexu', 'https://images-platform.99static.com/-xYD7Tguk14AOVySxG_bMkoJodU=/500x500/top/smart/99designs-contests-attachments/41/41945/attachment_41945457', None)) 
+           valTab.append(CDisplayListItem('TUBEWOLF',     'http://www.tubewolf.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.tubewolf.com'],'tubewolf', 'http://images.tubewolf.com/logo.png', None)) 
+           valTab.append(CDisplayListItem('ALPHAPORNO',     'https://www.alphaporno.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.alphaporno.com/categories/'],'ALPHAPORNO', 'http://images.alphaporno.com/logo.png', None)) 
+           valTab.append(CDisplayListItem('ZEDPORN',     'http://zedporn.com', CDisplayListItem.TYPE_CATEGORY, ['https://zedporn.com'],'tubewolf', 'http://images.zedporn.com/new-logo.png', None)) 
+           valTab.append(CDisplayListItem('CROCOTUBE',     'http://crocotube.com', CDisplayListItem.TYPE_CATEGORY, ['http://crocotube.com'],'tubewolf', 'http://crocotube.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('ASHEMALETUBE',     'https://www.ashemaletube.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.ashemaletube.com/'],'ASHEMALETUBE', 'https://adminex.ashemaletube.com/images/logo/ast.png', None)) 
+           valTab.append(CDisplayListItem('MOMPORNONLY',     'https://mompornonly.com', CDisplayListItem.TYPE_CATEGORY, ['https://mompornonly.com/categories/'],'MOMPORNONLY', 'https://mompornonly.com/wp-content/themes/mompornonly/assets/img/og-image.jpg', None)) 
+           valTab.append(CDisplayListItem('STREAMPORN',     'https://streamporn.pw', CDisplayListItem.TYPE_CATEGORY, ['https://streamporn.pw'],'streamporn', 'https://static-ca-cdn.eporner.com/gallery/5K/Oo/wxT1T22Oo5K/501600-beautiful-island-in-the-stream.jpg', None)) 
+           valTab.append(CDisplayListItem('PORNVIDEOS 4K',     'http://pornvideos4k.com/en/', CDisplayListItem.TYPE_CATEGORY, ['http://pornvideos4k.com/en/'],'pornvideos4k', 'https://www.pornvideos4k.net/img/logo_desktop_v4@2x.png', None)) 
+           valTab.append(CDisplayListItem('PORNBURST',     'https://www.pornburst.xxx/', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornburst.xxx/categories/'],'PORNBURST', 'https://cdn.fleshbot.com/data/images/straight/006/003/662/pornburst_web.png?1409241449', None)) 
+           valTab.append(CDisplayListItem('RULEPORN',     'https://ruleporn.com', CDisplayListItem.TYPE_CATEGORY, ['https://ruleporn.com/categories/'],'ruleporn', 'https://ruleporn.com/templates/ruleporn/images/logo.png?v=1', None)) 
+           valTab.append(CDisplayListItem('PANDAMOVIE',     'https://pandamovie.info', CDisplayListItem.TYPE_CATEGORY, ['https://pandamovie.info'],'123PANDAMOVIE', 'https://pandamovie.info/wp-content/uploads/2021/03/pandamovie-new-clolor.png', None)) 
+           valTab.append(CDisplayListItem('DANSMOVIES',     'http://dansmovies.com', CDisplayListItem.TYPE_CATEGORY, ['http://dansmovies.com/'],'DANSMOVIES', 'http://cdn1.photos.dansmovies.com/templates/dansmovies/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNREWIND',     'https://www.pornrewind.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornrewind.com/categories/'],'PORNREWIND', 'https://www.pornrewind.com/static/images/logo-light-pink.png', None)) 
+           valTab.append(CDisplayListItem('BALKANJIZZ',     'https://www.balkanjizz.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.balkanjizz.com/kategorije-pornica'],'BALKANJIZZ', 'https://www.balkanjizz.com/images/logo/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNORUSSIA',     'https://pornorussia.mobi', CDisplayListItem.TYPE_CATEGORY, ['https://pornorussia.mobi'],'PORNORUSSIA', 'https://pornorussia.mobi/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('LETMEJERK',     'https://www.letmejerk.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.letmejerk.com/category'],'LETMEJERK', 'https://letmejerksite.com/icons/android-chrome-512x512.png', None)) 
+           valTab.append(CDisplayListItem('SEXTUBEFUN',     'https://sextubefun.com/', CDisplayListItem.TYPE_CATEGORY, ['https://sextubefun.com/channels/'],'SEXTUBEFUN', 'https://sextubefun.com/templates/default_tube2019/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('3MOVS',     'https://www.3movs.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.3movs.com/categories/'],'3MOVS', 'https://1000logos.net/wp-content/uploads/2019/02/3Movs-Logo-500x281.png', None))
+           valTab.append(CDisplayListItem('ANALDIN',     'https://www.analdin.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.analdin.com/categories/'],'ANALDIN', 'https://www.analdin.com/images/logo-retina.png', None)) 
+           valTab.append(CDisplayListItem('NETFLIXPORNO',     'https://netflixporno.net/', CDisplayListItem.TYPE_CATEGORY, ['https://netflixporno.net/'],'NETFLIXPORNO', 'https://netflixporno.net/adult/wp-content/uploads/2021/04/netflixporno-1.png',   None)) 
+           valTab.append(CDisplayListItem('FAPSET',     'https://fapset.com', CDisplayListItem.TYPE_CATEGORY, ['https://fapset.com'],'fapset', 'https://fapset.com/templates/Default/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNDROIDS',     'https://www.porndroids.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.porndroids.com/categories/'],'PORNDROIDS', 'https://tse4.mm.bing.net/th?id=OIP.rb8yENwb5VouvKNGjlk9CwHaFx&pid=15.1', None)) 
+           valTab.append(CDisplayListItem('LOVE HOME PORN',     'https://lovehomeporn.com', CDisplayListItem.TYPE_CATEGORY, ['https://lovehomeporn.com/videos'],'lovehomeporn', 'https://cdn.static.lovehomeporn.com/templates/frontend/purple/new_images/logo-helloween.png', None)) 
+           valTab.append(CDisplayListItem('MOMVIDS',     'WARNING!  Works only in GSTPlayer WITHOUT BUFFERING  !!', CDisplayListItem.TYPE_CATEGORY, ['https://www.momvids.com/categories/'],'MOMVIDS', 'https://www.momvids.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('EROPROFILE',     'http://www.eroprofile.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.eroprofile.com'],'EROPROFILE', 'https://static.eroprofile.com/img/v1/header_logo.png', None)) 
+           valTab.append(CDisplayListItem('ABSOLUPORN',     'http://www.absoluporn.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.absoluporn.com/en/lettre-tag.html'],'absoluporn', 'http://www.absoluporn.com/image/deco/logo.gif', None)) 
+           valTab.append(CDisplayListItem('PORNGO',     'https://porngo.com', CDisplayListItem.TYPE_CATEGORY, ['https://porngo.com/categories/'],'porngo', 'https://cdn6.f-cdn.com/contestentries/1524870/34599086/5d1936269c415_thumb900.jpg', None)) 
+           valTab.append(CDisplayListItem('ANYBUNNY',     'http://anybunny.com', CDisplayListItem.TYPE_CATEGORY, ['http://anybunny.com'],'anybunny', 'http://anybunny.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('XCAFE',     'https://xcafe.com/', CDisplayListItem.TYPE_CATEGORY, ['https://xcafe.com/categories/'],'XCAFE', 'https://xcafe.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('HQPORNER',     'https://hqporner.com', CDisplayListItem.TYPE_CATEGORY, ['https://hqporner.com/porn-categories.php'],'hqporner', 'https://www.filmyporno.blog/wp-content/uploads/2018/12/channel-hqporner.jpg', None)) 
+           valTab.append(CDisplayListItem('SPANKBANG',     'https://spankbang.com', CDisplayListItem.TYPE_CATEGORY, ['https://spankbang.com/categories'],'spankbang', 'https://assets.sb-cd.com/static/desktop/Images/logo_v5@2x.png', None)) 
+           valTab.append(CDisplayListItem('CUMLOUDER',     'https://www.cumlouder.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.cumlouder.com/categories'],'cumlouder', 'https://1000logos.net/wp-content/uploads/2019/02/CumLouder-Logo.png', None)) 
+           valTab.append(CDisplayListItem('PORN00',     'http://www.porn00.org', CDisplayListItem.TYPE_CATEGORY, ['http://www.porn00.org/categories/'],'porn00', 'https://www.porn00.org/static/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('WATCHPORNX',     'https://watchpornx.com/', CDisplayListItem.TYPE_CATEGORY, ['https://watchpornx.com/'],'watchpornx', 'https://watchpornfree.info/adult/wp-content/uploads/2021/04/watchpornfreews-1-e1525276673535.png', None)) 
+           valTab.append(CDisplayListItem('PORN300',     'https://www.porn300.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.porn300.com/categories/'],'PORN300', 'https://www.topporntubesites.com/img/0/8/c/f/d/6/Porn300-Logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNHEED',     'https://www.pornheed.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornheed.com/categories/recently-added/1'],'PORNHEED', 
+           'https://i.pornheed.com/image/1.jpg', None))
+           #valTab.append(CDisplayListItem('PORNOPERSIK',     'https://pornopersik.com', CDisplayListItem.TYPE_CATEGORY, ['https://pornopersik.com/categories/'],'pornopersik', 'https://pornopersik.com/static/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('ANYPORN',     'https://anyporn.com', CDisplayListItem.TYPE_CATEGORY, ['https://anyporn.com/categories/'],'ANYPORN', 'https://anyporn.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('ANON-V',     'https://anon-v.com', CDisplayListItem.TYPE_CATEGORY, ['https://anon-v.com/categories/'],'ANON-V', 'https://anon-v.com/logo350.png', None)) 
+           valTab.append(CDisplayListItem('BRAVOPORN',     'https://www.bravoporn.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.bravoporn.com/c/'],'bravoporn', 'https://www.bravoporn.com/v/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('BRAVOTEENS',     'https://www.bravoteens.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.bravoteens.com//cats/'],'bravoteens', 'https://www.bravoteens.com/tb/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('SLEAZYNEASY',     'https://www.sleazyneasy.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.sleazyneasy.com/categories/'],'sleazyneasy', 'https://cdni.sleazyneasy.com/images/favicon-152.png', None)) 
+           valTab.append(CDisplayListItem('HOMEPORNKING',     'https://www.homepornking.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.homepornking.com/categories/'],'homepornking', 'http://www.blindspot.nhely.hu/Thumbnails/homepornking.png', None))
+           valTab.append(CDisplayListItem('FULLPORNER',     'https://fullporner.com', CDisplayListItem.TYPE_CATEGORY, ['https://fullporner.com/category'],'FULLPORNER', 'https://static.xiaoshenke.net/img/logo.png?v=2', None)) 
+           valTab.append(CDisplayListItem('FREEONES',     'https://www.freeones.com/', CDisplayListItem.TYPE_CATEGORY, [
+           'https://www.freeones.com/categories?l=96&f%5Bstatus%5D%5B0%5D=active&p=1'],'freeones', 'https://cdn.freeones.com/photo-953/tX/yX/Eo8h7yUXLwDjkPhVZU/Shyla-Stylez-Posing-in-Freeones-T-Shirt_001_big.jpg', None)) 
+           valTab.append(CDisplayListItem('MYMILFPORN',     'https://mymilfporn.net', CDisplayListItem.TYPE_CATEGORY, ['https://mymilfporn.net/categories/'],'mymilfporn', 'https://mymilfporn.net/wp-content/uploads/2022/06/My-Milf-Porn-Logo-PNG.png', None)) 
+           valTab.append(CDisplayListItem('FAMILYPORN',     'https://familyporn.tv', CDisplayListItem.TYPE_CATEGORY, ['https://familyporn.tv/categories/'],'familyporn', 'https://familyporn.tv/images/logo-alt.png', None)) 
+           valTab.append(CDisplayListItem('BITPORNO',     'https://www.bitporno.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.bitporno.com/'],'bitporno', 'https://www.bitporno.com/images/logobt.png', None)) 
+           valTab.append(CDisplayListItem('PERVCLIPS',     'https://www.pervclips.com/tube', CDisplayListItem.TYPE_CATEGORY, ['https://www.pervclips.com/tube/categories/'],'PERVCLIPS', 'https://cdn.pervclips.com/tube/static_new/images/og-logo.jpg', None)) 
+
+
+           if config.plugins.iptvplayer.xxxsortall.value:
+               valTab.sort(key=lambda poz: poz.name)
+
+           if config.plugins.iptvplayer.xxxsearch.value:
+               self.SEARCH_proc=name
+               valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+               valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),             CDisplayListItem.TYPE_SEARCH,             [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           valTab.append(CDisplayListItem('FOTKA-PL-KAMERKI',     'http://www.fotka.pl/kamerki', CDisplayListItem.TYPE_CATEGORY, ['http://api.fotka.pl/v2/cams/get?page=1&limit=100&gender=f'],'FOTKA-PL-KAMERKI', 'https://pbs.twimg.com/profile_images/3086758992/6fb5cc2ee2735c334d0363bcb01a52ca_400x400.png', None)) 
+           url = 'https://chaturbate.com/tags/%s' % config.plugins.iptvplayer.chaturbate.value
+           valTab.append(CDisplayListItem('CHATURBATE',     'chaturbate.com', CDisplayListItem.TYPE_CATEGORY, [url],'CHATURBATE','https://static-assets.highwebmedia.com/images/logo-square.png', None)) 
+           valTab.append(CDisplayListItem('XHAMSTERLIVE',       "Kamerki",       CDisplayListItem.TYPE_CATEGORY,['http://xhamsterlive.com'], 'xhamsterlive', 'https://cdn.stripst.com/assets/icons/favicon-196x196_xhamsterlive.com.png',None))
+           valTab.append(CDisplayListItem('BONGACAMS',     'https://bongacams.com/', CDisplayListItem.TYPE_CATEGORY, ['https://en.bongacams.com/'],'BONGACAMS', 'http://i.bongacams.com/images/bongacams_logo3_header.png', None)) 
+           valTab.append(CDisplayListItem('SHOWUP   - live cams',       'showup.tv',          CDisplayListItem.TYPE_CATEGORY, ['http://showup.tv'],                     'showup',  'https://i.pinimg.com/originals/cd/73/1d/cd731d0be3bb2cabcecd6d7bdfe50ae9.png', None)) 
+           valTab.append(CDisplayListItem(_('Our software is free and we want to keep it that way.'),  'If you use our application and want to show your appreciation, support us on Paypal: echosmart76@gmail.com           Thank You!',          CDisplayListItem.TYPE_ARTICLE,             [''], '',        '', None))
+           valTab.append(CDisplayListItem('+++ XXXLIST +++   XXXversion = '+str(self.XXXversion), '+++ XXXLIST +++   XXXversion = '+str(self.XXXversion), CDisplayListItem.TYPE_MARKER, [''],'XXXLIST', '', None)) 
+           if config.plugins.iptvplayer.xxxupdate.value:
+              valTab.append(CDisplayListItem('CHANGELOG',                    'CHANGELOG',   CDisplayListItem.TYPE_CATEGORY, ['http://www.blindspot.nhely.hu/hosts/changelog'], 'UPDATE-ZMIANY', 'https://cdn.imgbin.com/5/5/11/imgbin-computer-icons-wiki-inventory-history-drawing-nP3RsgFUsrSqYQBRUycesLNKp.jpg', None)) 
+           self.yourporn = config.plugins.iptvplayer.yourporn.value
+
+           return valTab
+
+        # ########## #
+        if 'HISTORY' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           for histItem in self.history.getHistoryList():
+               valTab.append(CDisplayListItem(histItem['pattern'], 'Search ', CDisplayListItem.TYPE_CATEGORY, [histItem['pattern'],histItem['type']], 'SEARCH', '', None))          
+            
+           return valTab           
+        # ########## #
+        if 'SEARCH' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           pattern = url 
+           if Index==-1: 
+              self.history.addHistoryItem( pattern, 'video')
+           if self.SEARCH_proc == '': return []               
+           if self.SEARCH_proc == 'main-menu':
+              valTab=[]
+              self.MAIN_URL = 'https://www.4tube.com'
+              valtemp = self.listsItems(-1, url, '4TUBE-search')
+              for item in valtemp: item.name='4TUBE - '+item.name
+              valTab = valTab + valtemp
+              
+              self.MAIN_URL = 'https://www.ah-me.com'
+              valtemp = self.listsItems(-1, url, 'ahme-search')
+              for item in valtemp: item.name='AH-ME - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'https://www.alphaporno.com'
+              valtemp = self.listsItems(-1, url, 'ALPHAPORNO-search')
+              for item in valtemp: item.name='ALPHAPORNO - '+item.name
+              valTab = valTab + valtemp
+              
+              self.MAIN_URL = 'https://www.wankoz.com' 
+              valtemp = self.listsItems(-1, url, 'WANKOZ-search')
+              for item in valtemp: item.name='WANKOZ - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'https://www.pornhat.com/'
+              valtemp = self.listsItems(-1, url, 'PORNHAT-search')
+              for item in valtemp: item.name='PORNHAT - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.drtuber.com' 
+              valtemp = self.listsItems(-1, url, 'DRTUBER-search')
+              for item in valtemp: item.name='DRTUBER - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.eporner.com' 
+              valtemp = self.listsItems(-1, url, 'eporner-search')
+              for item in valtemp: item.name='EPORNER - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'https://www.fux.com'
+              valtemp = self.listsItems(-1, url, '4TUBE-search')
+              for item in valtemp: item.name='FUX - '+item.name
+              valTab = valTab + valtemp
+
+              valtemp = self.listsItems(-1, url, 'alohatube-search')
+              for item in valtemp: item.name='ALOHATUBE - '+item.name              
+              valTab = valTab + valtemp
+
+              valtemp = self.listsItems(-1, url, 'SEXVID-search')
+              for item in valtemp: item.name='SEXVID - '+item.name              
+              valTab = valTab + valtemp
+              
+              self.MAIN_URL = 'http://www.homemoviestube.com'
+              valtemp = self.listsItems(-1, url, 'HomeMoviesTube-search')
+              for item in valtemp: item.name='HomeMoviesTube - '+item.name
+              valTab = valTab + valtemp
+
+              valtemp = self.listsItems(-1, url, 'KATESTUBE-search')
+              for item in valtemp: item.name='KATESTUBE - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'https://www.koloporno.com' 
+              valtemp = self.listsItems(-1, url, 'KOLOPORNO-search')
+              for item in valtemp: item.name='KOLOPORNO - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'https://www.moviefap.com'
+              valtemp = self.listsItems(-1, url, 'MOVIEFAP-search')
+              for item in valtemp: item.name='MOVIEFAP - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'https://www.momvids.com' 
+              valtemp = self.listsItems(-1, url, 'MOMVIDS-search')
+              for item in valtemp: item.name='MOMVIDS - '+item.name              
+              valTab = valTab + valtemp 
+              
+              self.MAIN_URL = 'https://sextubefun.com/' 
+              valtemp = self.listsItems(-1, url, 'SEXTUBEFUN-search')
+              for item in valtemp: item.name='SEXTUBEFUN - '+item.name              
+              valTab = valTab + valtemp 
+              
+              self.MAIN_URL = 'https://www.3movs.com' 
+              valtemp = self.listsItems(-1, url, '3MOVS-search')
+              for item in valtemp: item.name='3MOVS - '+item.name              
+              valTab = valTab + valtemp 
+              
+              self.MAIN_URL = 'https://www.pornid.xxx' 
+              valtemp = self.listsItems(-1, url, 'PORNID-search')
+              for item in valtemp: item.name='PORNID - '+item.name              
+              valTab = valTab + valtemp
+              
+              self.MAIN_URL = 'https://www.pervclips.com/tube' 
+              valtemp = self.listsItems(-1, url, 'PERVCLIPS-search')
+              for item in valtemp: item.name='PERVCLIPS - '+item.name              
+              valTab = valTab + valtemp 
+              
+              self.MAIN_URL = 'https://www.pornwhite.com' 
+              valtemp = self.listsItems(-1, url, 'PORNWHITE-search')
+              for item in valtemp: item.name='PORNWHITE - '+item.name              
+              valTab = valTab + valtemp 
+              
+              self.MAIN_URL = 'https://www.pornburst.xxx/' 
+              valtemp = self.listsItems(-1, url, 'PORNBURST-search')
+              for item in valtemp: item.name='PORNBURST - '+item.name              
+              valTab = valTab + valtemp
+              
+              self.MAIN_URL = 'https://www.xxxbule.com/' 
+              valtemp = self.listsItems(-1, url, 'XXXBULE-search')
+              for item in valtemp: item.name='XXXBULE - '+item.name              
+              valTab = valTab + valtemp
+              
+              self.MAIN_URL = 'https://www.porndig.com' 
+              valtemp = self.listsItems(-1, url, 'PORNDIG-search')
+              for item in valtemp: item.name='PORNDIG - '+item.name              
+              valTab = valTab + valtemp
+              
+              self.MAIN_URL = 'https://glavmatures.com' 
+              valtemp = self.listsItems(-1, url, 'glavmatures-search')
+              for item in valtemp: item.name='GLAVMATURES - '+item.name              
+              valTab = valTab + valtemp 
+              
+              self.MAIN_URL = 'https://xcafe.com' 
+              valtemp = self.listsItems(-1, url, 'XCAFE-search')
+              for item in valtemp: item.name='XCAFE - '+item.name              
+              valTab = valTab + valtemp 
+              
+              self.MAIN_URL = 'https://www.pornheed.com' 
+              valtemp = self.listsItems(-1, url, 'PORNHEED-search')
+              for item in valtemp: item.name='PORNHEED - '+item.name              
+              valTab = valTab + valtemp 
+              
+              self.MAIN_URL = 'https://mymilfporn.net' 
+              valtemp = self.listsItems(-1, url, 'mymilfporn-search')
+              for item in valtemp: item.name='MYMILFPORN - '+item.name              
+              valTab = valTab + valtemp
+              
+              self.MAIN_URL = 'https://fullporner.com' 
+              valtemp = self.listsItems(-1, url, 'FULLPORNER-search')
+              for item in valtemp: item.name='FULLPORNER - '+item.name              
+              valTab = valTab + valtemp 
+              
+              self.MAIN_URL = 'https://www.watchmygf.me' 
+              valtemp = self.listsItems(-1, url, 'WATCHMYGF-search')
+              for item in valtemp: item.name='WATCHMYGF - '+item.name              
+              valTab = valTab + valtemp
+              
+              self.MAIN_URL = 'https://www.homepornking.com' 
+              valtemp = self.listsItems(-1, url, 'homepornking-search')
+              for item in valtemp: item.name='HOMEPORNKING - '+item.name              
+              valTab = valTab + valtemp 
+              
+              self.MAIN_URL = 'https://www.freeones.com' 
+              valtemp = self.listsItems(-1, url, 'freeones-search')
+              for item in valtemp: item.name='FREEONES - '+item.name              
+              valTab = valTab + valtemp
+              
+              self.MAIN_URL = 'https://www.porndroids.com' 
+              valtemp = self.listsItems(-1, url, 'porndroid-search')
+              for item in valtemp: item.name='PORNDROIDS - '+item.name              
+              valTab = valTab + valtemp 
+
+              self.MAIN_URL = 'https://www.pornerbros.com'
+              valtemp = self.listsItems(-1, url, '4TUBE-search')
+              for item in valtemp: item.name='PORNERBROS - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.pornhub.com' 
+              valtemp = self.listsItems(-1, url, 'pornhub-search')
+              for item in valtemp: item.name='PORNHUB - '+item.name              
+              valTab = valTab + valtemp
+
+              valtemp = self.listsItems(-1, url, 'pornicom-search')
+              for item in valtemp: item.name='PORNICOM - '+item.name              
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'https://www.porntube.com'
+              valtemp = self.listsItems(-1, url, '4TUBE-search')
+              for item in valtemp: item.name='PORNTUBE - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'https://www.perfectgirls.xxx'
+              valtemp = self.listsItems(-1, url, 'PERFECTGIRLS-search')
+              for item in valtemp: item.name='PERFECTGIRLS - '+item.name
+              valTab = valTab + valtemp
+              
+              self.MAIN_URL = 'https://www.milf300.com/'
+              valtemp = self.listsItems(-1, url, 'MILF300-search')
+              for item in valtemp: item.name='MILF300 - '+item.name
+              valTab = valTab + valtemp
+              
+              self.MAIN_URL = 'http://www.redtube.com' 
+              valtemp = self.listsItems(-1, url, 'redtube-search')
+              for item in valtemp: item.name='REDTUBE - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.thumbzilla.com' 
+              valtemp = self.listsItems(-1, url, 'THUMBZILLA-search')
+              for item in valtemp: item.name='THUMBZILLA - '+item.name              
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.tube8.com' 
+              valtemp = self.listsItems(-1, url, 'tube8-search')
+              for item in valtemp: item.name='TUBE8 - '+item.name
+              valTab = valTab + valtemp
+              
+              self.MAIN_URL = 'https://sextubefun.com/' 
+              valtemp = self.listsItems(-1, url, 'SEXTUBEFUN-search')
+              for item in valtemp: item.name='SEXTUBEFUN - '+item.name
+              valTab = valTab + valtemp
+              
+              valtemp = self.listsItems(-1, url, 'xhamster-search')
+              for item in valtemp: item.name='XHAMSTER - '+item.name              
+              valTab = valTab + valtemp 
+ 
+              self.MAIN_URL = 'http://www.xnxx.com' 
+              valtemp = self.listsItems(-1, url, 'xnxx-search')
+              for item in valtemp: item.name='XNXX - '+item.name
+              valTab = valTab + valtemp
+              
+              self.MAIN_URL = 'http://www.boundhub.com' 
+              valtemp = self.listsItems(-1, url, 'BOUNDHUB-search')
+              for item in valtemp: item.name='BOUNDHUB - '+item.name
+              valTab = valTab + valtemp
+              
+              self.MAIN_URL = 'https://www.shameless.com/' 
+              valtemp = self.listsItems(-1, url, 'SHAMELESS-search')
+              for item in valtemp: item.name='SHAMELESS - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.xvideos.com' 
+              valtemp = self.listsItems(-1, url, 'xvideos-search')
+              for item in valtemp: item.name='XVIDEOS - '+item.name              
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.youjizz.com' 
+              valtemp = self.listsItems(-1, url, 'YOUJIZZ-search')
+              for item in valtemp: item.name='YOUJIZZ - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'https://www.youporn.com' 
+              valtemp = self.listsItems(-1, url, 'youporn-search')
+              for item in valtemp: item.name='YOUPORN - '+item.name
+              valTab = valTab + valtemp
+ 
+              self.MAIN_URL = 'https://yourporn.sexy'
+              valtemp = self.listsItems(-1, url, 'yourporn-search')
+              for item in valtemp: item.name='YOURPORN.SEXY - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = '' 
+              return valTab
+           valTab = self.listsItems(-1, url, self.SEARCH_proc)
+           return valTab
+
+        if 'UPDATE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab.append(CDisplayListItem(self.XXXversion+' - Local version',   'Local  XXXversion', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+           valTab.append(CDisplayListItem(self.XXXremote+ ' - Remote version',  'Remote XXXversion', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+           valTab.append(CDisplayListItem('Changelog',                    'Changelog',   CDisplayListItem.TYPE_CATEGORY, ['http://www.blindspot.nhely.hu/hosts/changelog'], 'UPDATE-ZMIANY', '', None)) 
+           valTab.append(CDisplayListItem('Update Now',                         'Update Now',        CDisplayListItem.TYPE_CATEGORY, [''], 'UPDATE-NOW',    '', None)) 
+           valTab.append(CDisplayListItem('Update Now & Restart Enigma2',                         'Update Now & Restart Enigma2',        CDisplayListItem.TYPE_CATEGORY, ['restart'], 'UPDATE-NOW',    '', None)) 
+           return valTab
+        if 'UPDATE-ZMIANY' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           try:
+              data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host listsItems query error' )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           phCats = re.findall("<entry>.*?<title>(.*?)</title>.*?<updated>(.*?)</updated>.*?<name>(.*?)</name>", data, re.S)
+           if phCats:
+              for (phTitle, phUpdated, phName ) in phCats:
+                  phUpdated = phUpdated.replace('T', '   ')
+                  phUpdated = phUpdated.replace('Z', '   ')
+                  phUpdated = phUpdated.replace('+01:00', '   ')
+                  phUpdated = phUpdated.replace('+02:00', '   ')
+                  printDBG( 'Host listsItems phTitle: '+phTitle )
+                  printDBG( 'Host listsItems phUpdated: '+phUpdated )
+                  printDBG( 'Host listsItems phName: '+phName )
+                  valTab.append(CDisplayListItem(phUpdated+' '+phName+'  >>  '+decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [''],'', '', None)) 
+           return valTab
+        if 'UPDATE-NOW' == name:
+           printDBG( 'HostXXX listsItems begin name='+name )
+           _url = 'http://www.blindspot.nhely.hu/hosts/changelog'
+           query_data = { 'url': _url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+              printDBG( 'Host init data: '+data )
+              crc=self.cm.ph.getSearchGroups(data, '''log/([^"^']+?)[<]''', 1, True)[0]
+              printDBG( 'crc = '+crc )
+              if not crc: error
+           except:
+              printDBG( 'Host init query error' )
+              valTab.append(CDisplayListItem('ERROR - BÅÄd init: '+_url,   'ERROR', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+              return valTab
+
+           tmpDir = GetTmpDir() 
+           source = os_path.join(tmpDir, 'iptv-host-xxx.tar.gz') 
+           dest = os_path.join(tmpDir , '') 
+           _url = 'http://www.blindspot.nhely.hu/hosts/iptv-host-xxx-master.tar.gz'              
+           output = open(source,'wb')
+           query_data = { 'url': _url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              output.write(self.cm.getURLRequestData(query_data))
+              output.close()
+              os_system ('sync')
+              printDBG( 'LetÃ¶ltÃ©s iptv-host-xxx.tar.gz' )
+           except:
+              if os_path.exists(source):
+                 os_remove(source)
+              printDBG( 'LetÃ¶ltÃ©si hiba iptv-host-xxx.tar.gz' )
+              valTab.append(CDisplayListItem('ERROR - Download Error: '+_url,   'ERROR', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+              return valTab
+           if os_path.exists(source):
+              printDBG( 'LÃ©tezÅ XXX fÃ¡jl '+source )
+           else:
+              printDBG( 'Nincs XXX fÃ¡jl '+source )
+
+           cmd = 'tar -xzf "%s" -C "%s" 2>&1' % ( source, dest )  
+           try: 
+              os_system (cmd)
+              os_system ('sync')
+              printDBG( 'HostXXX kicsomagolÃ¡sa  ' + cmd )
+           except:
+              printDBG( 'HostXXX KicsomagolÃ¡si Hiba iptv-host-xxx.tar.gz' )
+              os_system ('rm -f %s' % source)
+              os_system ('rm -rf %siptv-host-xxx-%s' % (dest, crc))
+              valTab.append(CDisplayListItem('ERROR - Unzipping Error %s' % source,   'ERROR', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+              return valTab
+
+
+           try:
+              od = '%siptv-host-xxx-master/'% (dest)
+              printDBG('Innen: '+ od)
+              do = resolveFilename(SCOPE_PLUGINS, 'Extensions/') 
+              printDBG('Ide: '+ do)
+              cmd = 'cp -rf "%s"/* "%s"/ 2>&1' % (os_path.join(od, 'IPTVPlayer'), os_path.join(do, 'IPTVPlayer'))
+              printDBG('HostXXX MÃ¡solÃ¡s[%s]' % cmd)
+              os_system (cmd)
+              #printDBG('HostXXX kopiowanie2 cmd[%s]' % cmd)
+              #iptv_system(cmd)
+              os_system ('sync')
+           except:
+              printDBG( 'MÃ¡solÃ¡si Hiba' )
+              os_system ('rm -f %s' % source)
+              os_system ('rm -rf %siptv-host-xxx-master-%s' % (dest, crc))
+              valTab.append(CDisplayListItem('ERROR - Error in Copy',   'ERROR', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+              return valTab
+
+
+           ikony = GetPluginDir('icons/PlayerSelector/')
+           if os_path.exists('%sXXX100' % ikony):
+              printDBG( 'HostXXX Jest '+ ikony + 'XXX100 ' )
+              os_system('mv %sXXX100 %sXXX100.png' % (ikony, ikony)) 
+           if os_path.exists('%sXXX120' % ikony):
+              printDBG( 'HostXXX Jest '+ ikony + 'XXX120 '  )
+              os_system('mv %sXXX120 %sXXX120.png' % (ikony, ikony))
+           if os_path.exists('%sXXX135' % ikony):
+              printDBG( 'HostXXX Jest '+ ikony + 'XXX135 '  )
+              os_system('mv %sXXX135 %sXXX135.png' % (ikony, ikony))
+
+           try:
+              cmd = GetPluginDir('hosts/hostXXX.py')
+              with open(cmd, 'r') as f:  
+                 data = f.read()
+                 f.close() 
+                 wersja = re.search('XXXversion = "(.*?)"', data, re.S)
+                 aktualna = wersja.group(1)
+                 printDBG( 'Actual Version: '+aktualna )
+           except:
+              printDBG( 'HostXXX error openfile ' )
+
+
+           printDBG( 'Ideiglenes fÃ¡jlok tÃ¶rlÃ©se' )
+           os_system ('rm -f %s' % source)
+           os_system ('rm -rf %siptv-host-xxx-master-%s' % (dest, crc))
+
+           if url:
+              try:
+                 msg = '\n\nActual Version: %s' % aktualna
+                 self.sessionEx.open(MessageBox, _("Update completed successfully. For the moment, the system will reboot.")+ msg, type = MessageBox.TYPE_INFO, timeout = 10)
+                 sleep (10)
+                 from enigma import quitMainloop
+                 quitMainloop(3)
+              except: pass
+           valTab.append(CDisplayListItem('Update End. Please manual restart enigma2',   'Restart', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+           printDBG( 'HostXXX listsItems end' )
+           return valTab
+
+##################################################################
+        if 'tube8' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.tube8.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tube8.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'categories-subnav', '</ul>', False)[1]
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self._cleanHtmlStr(item).strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-thumb=['"]([^"^']+?)['"]''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'tube8-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem('--- Most Viewed ---', 'Most Viewed',               CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/most-viewed/page/1/'],      'tube8-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- Top Rated ---', 'Top Rated',                 CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/top/page/1/'],       'tube8-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- Longest ---', 'Longest', CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/longest/page/1/'],      'tube8-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- New Videos ---',  'New Videos',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/newest/page/1/'],       'tube8-clips', '', None)) 
+           self.SEARCH_proc='tube8-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'tube8-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.tube8.com/searches.html?q='+url.replace(' ','+'), 'tube8-clips')
+           return valTab              
+        if 'tube8-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.tube8.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tube8.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           nextPage = self.cm.ph.getSearchGroups(data, '''rel="next"\shref=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'id="category_video_list', 'footer', False)[1]
+           if '' == data2: data2 = self.cm.ph.getDataBeetwenMarkers(data, 'Video Results For', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<figure', '</figure>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''data-video_url=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-thumb=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''video-duration">([^>]+?)<''', 1, True)[0] 
+              if phUrl and not 'title]' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if nextPage:
+              valTab.append(CDisplayListItem('Next', 'Page: '+nextPage, CDisplayListItem.TYPE_CATEGORY, [nextPage], name, '', None))                
+           return valTab
+        
+        if 'showup' == name:
+           self.MAIN_URL = 'http://showup.tv' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'showup.cookie')
+           #url = 'https://showup.tv/site/accept_rules?ref=https://showup.tv/'
+           url = 'https://showup.tv'
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           #accept_rules.showup.tv/
+           self.defaultParams['cookie_items'] = {'accept_rules':'true'}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li data-equalizer-watch class="stream"', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = phUrl[1:] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phDesc = self.cm.ph.getSearchGroups(item, '''<p>([^>]+?)</p>''', 1, True)[0]
+              transcoderaddr = self.cm.ph.getSearchGroups(item, '''transcoderaddr=['"]([^"^']+?)['"]''', 1, True)[0] 
+              streamid = self.cm.ph.getSearchGroups(item, '''streamid=['"]([^"^']+?)['"]''', 1, True)[0] 
+              uid = self.cm.ph.getSearchGroups(item, '''uid=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl =  'rtmp://'+transcoderaddr+':1935/webrtc/'+streamid+'_aac'
+              phImage = 'http://showup.tv/'+phImage
+              valTab.append(CDisplayListItem(phTitle,phTitle+'     '+decodeHtml(phDesc),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 0)], 0, phImage, None)) 
+           return valTab
+        
+        if 'xnxx' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.xnxx.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xnxx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           parse = re.search('"categories":(.*?),"more_links"', data, re.S)
+           if not parse: return valTab
+           #printDBG( 'Host listsItems parse.group(1): '+parse.group(1) )
+           result = simplejson.loads(parse.group(1))
+           if result:
+              for item in result:
+                 phUrl = str(item["url"].replace('\/','/'))  
+                 phTitle = str(item["label"]) 
+                 if not 'jpg' in phTitle:
+                    valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl],'xnxx-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem('--- Hits ---', 'Hits',               CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/hits/'],      'xnxx-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- Best Videos ---', 'Best Videos', CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/best/'],      'xnxx-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- New Videos ---',  'New Videos',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL],       'xnxx-clips', '', None)) 
+           self.SEARCH_proc='xnxx-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),_('Search'),                  CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'xnxx-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.xnxx.com/?k='+url.replace(' ','+'), 'xnxx-clips')
+           return valTab              
+        if 'xnxx-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.xnxx.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xnxx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           match = re.search("pagination(.*?)Next", data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'id="video', '</p></div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/video[^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''</span></span>([^>]+?)<''', 1, True)[0].strip()
+              if not phTime: phTime = self.cm.ph.getSearchGroups(item, '''<p class="metadata">([^>]+?)-''', 1, True)[0].strip()
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', self.MAIN_URL+phUrl, 1)], 0, phImage, None)) 
+           if match: match = re.findall('href="(.*?)"', match.group(1), re.S)
+           if match:
+              phUrl = match[-1]
+              #printDBG( 'Host listsItems page phUrl: '+phUrl )
+              valTab.append(CDisplayListItem('Next', 'Page: '+phUrl.split('/')[-2], CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl], name, '', None))                
+           return valTab
+
+        
+        if 'BOUNDHUB' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.boundhub.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'boundhub.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="list-categories">', '<div class="box tags-cloud">', False)[1]
+           data = data.split('<a class="item"')
+           if len(data): 
+              del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'BOUNDHUB-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem('--- Latest ---', 'Latest Updates',               CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/latest-updates'],      'BOUNDHUB-clips', 'https://cdni.pornpics.com/460/7/547/10818248/10818248_006_a940.jpg', None))
+           valTab.insert(0,CDisplayListItem('--- Home ---', 'Videos Being Watched', CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL],      'BOUNDHUB-clips', 'https://cdni.pornpics.com/460/1/273/26113210/26113210_002_2538.jpg', None)) 
+           valTab.insert(0,CDisplayListItem('--- Top Rated ---', 'Top Rated Videos', CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/top-rated'],      'BOUNDHUB-clips', 'https://cdni.pornpics.com/460/1/148/73758580/73758580_009_a612.jpg', None)) 
+           valTab.insert(0,CDisplayListItem('--- Most Viewed ---',  'Most Viewed Videos',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/most-popular'],       'BOUNDHUB-clips', 'https://cdni.pornpics.com/460/1/358/59650098/59650098_001_69df.jpg', None)) 
+           valTab.insert(0,CDisplayListItem('--- Channels ---',  'Channels Alphabetically',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/channels'],       'BOUNDHUB-channels', 'https://cdni.pornpics.com/460/7/75/99336297/99336297_043_b5c9.jpg', None))
+           valTab.insert(0,CDisplayListItem('--- Models ---',  'Top Rated Models',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/models'],       'BOUNDHUB-models', 'https://cdni.pornpics.com/1280/7/249/10054896/10054896_006_90a5.jpg', None))
+           valTab.insert(0,CDisplayListItem('--- Sites ---',  'Top Rated Sites',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/sites'],       'BOUNDHUB-models', 'https://cdni.pornpics.com/460/1/86/77475333/77475333_005_ee7f.jpg', None))
+           self.SEARCH_proc='BOUNDHUB-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),_('Search'),                  CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        if 'BOUNDHUB-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.boundhub.com/search/%s/'+url.replace(' ','-'), 'BOUNDHUB-clips')
+           return valTab              
+        if 'BOUNDHUB-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.boundhub.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'boundhub.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           currentSite = self.cm.ph.getSearchGroups(data, '''link.href=["]([^"^']+?)["].rel="canonical''', 1, True)[0]
+           if not currentSite:
+              currentSite = self.MAIN_URL + '/'
+           currentPage = self.cm.ph.getSearchGroups(data, '''page-current"><span[>]([^"^']+?)[<]''', 1, True)[0]
+           lastPage = self.cm.ph.getSearchGroups(data, '''class="last.+?[/]([^"^-]+?)[/]"''', 1, True)[0]
+           if lastPage == '':
+              lastPage = self.cm.ph.getSearchGroups(data, '''post_date;from[:]([^"^-]+?)["]>Last''', 1, True)[0]
+           if lastPage == '':
+              lastPage = currentPage
+           data = data.split('<div class="item  ">')
+           if len(data): 
+              del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"]+?)['"].>''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0]
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if currentPage:
+              page = int(currentPage) + 1
+              next = currentSite + str(page)
+              if int(page) <= int(lastPage):
+                 valTab.append(CDisplayListItem('Next', 'Page: '+ next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None)) 
+           return valTab
+        
+        if 'BOUNDHUB-channels' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'boundhub.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = data.split('<div class="item">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"]+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phVideos = self.cm.ph.getSearchGroups(item, '''videos">([^>]+?)<''', 1, True)[0]
+              valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle)+ '\n'+phVideos+' ',CDisplayListItem.TYPE_CATEGORY, [phUrl],'BOUNDHUB-clips', phImage, phImage)) 
+           return valTab   
+        
+        if 'BOUNDHUB-models' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'boundhub.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           currentSite = self.cm.ph.getSearchGroups(data, '''link.href=["]([^"^']+?)["].rel="canonical''', 1, True)[0]
+           if not currentSite:
+              currentSite = self.MAIN_URL + '/'
+           currentPage = self.cm.ph.getSearchGroups(data, '''page-current"><span[>]([^"^']+?)[<]''', 1, True)[0]
+           lastPage = self.cm.ph.getSearchGroups(data, '''class="last.+?[/]([^"^/]+?)[/]"''', 1, True)[0]
+           if lastPage == '':
+              lastPage = currentPage
+           data = data.split('<a class="item"')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"]+?)['"]''', 1, True)[0] 
+              if not phTitle:
+                 phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"]+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phImage:
+                 phImage = 'https://findbestporno.com/public/uploads/image/2021/9/BoundHub.jpg'
+              phVideos = self.cm.ph.getSearchGroups(item, '''videos">([^>]+?)<''', 1, True)[0]
+              valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle)+ '\n'+phVideos+' ',CDisplayListItem.TYPE_CATEGORY, [phUrl],'BOUNDHUB-clips', phImage, phImage)) 
+           if currentPage:
+              page = int(currentPage) + 1
+              next = currentSite + str(page)
+              if int(page) <= int(lastPage):
+                 valTab.append(CDisplayListItem('Next', 'Page: '+ next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None)) 
+           return valTab  
+        
+        if 'SHAMELESS' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.shameless.com/' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'shameless.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = data.split('position" content=')
+           if len(data): 
+              del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'SHAMELESS-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem('--- Latest ---', 'Latest Updates',               CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL],      'SHAMELESS-clips', 'https://cdni.pornpics.com/460/7/547/10818248/10818248_006_a940.jpg', None))
+           valTab.insert(0,CDisplayListItem('--- Models ---',  'Top Rated Models',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'models/'],       'SHAMELESS-models', 'https://cdni.pornpics.com/1280/7/249/10054896/10054896_006_90a5.jpg', None))
+           self.SEARCH_proc='SHAMELESS-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),_('Search'),                  CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        if 'SHAMELESS-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.shameless.com/search/?q=%s' % url.replace(' ','+'), 'SHAMELESS-clips')
+           return valTab                 
+        if 'SHAMELESS-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'shameless.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''link.href=["]([^"^']+?)["].rel="next''', 1, True)[0]
+           data = data.split('position" content=')
+           if len(data): 
+              del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"]+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              phTime = self.cm.ph.getSearchGroups(item, '''datetime="PT([^>]+?)"><''', 1, True)[0]
+              phTime = phTime.replace('M',' minutes ').replace('S',' seconds').replace('H', 'hour(s) ')
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next', 'Page: '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None)) 
+           return valTab
+        
+        if 'SHAMELESS-models' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'shameless.cookie')
+           self.defaultParams = {'use_cookie': False, 'load_cookie': False, 'save_cookie': False, 'cookiefile': COOKIEFILE}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           data = data.split('position" content=')
+           if len(data): 
+              del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''name"[>]([^"]+?)[<]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = 'https://onepornlist.com/img/screenshots/shameless.jpg'
+              phVideos = self.cm.ph.getSearchGroups(item, '''sup>[(]([^"]+?)[)]''', 1, True)[0]
+              valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle)+ '\nVideos:'+phVideos+' ',CDisplayListItem.TYPE_CATEGORY, [phUrl],'SHAMELESS-clips', phImage, phImage))
+           return valTab
+        
+        if 'xvideos' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.xvideos.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xvideos.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="dyn', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''href=.*?>([^>]+?)</a>''', 1, True)[0].strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'xvideos-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name) 
+           valTab.insert(0,CDisplayListItem('--- Pornstars ---',   'Pornstars',   CDisplayListItem.TYPE_CATEGORY, ['https://www.xvideos.com/pornstars-index/list'], 'xvideos-pornstars', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- Best Videos ---', 'Best Videos', CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/best/'],     'xvideos-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- New Videos ---',  'New Videos',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL],              'xvideos-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- 100% Verified ---',  '100% Verified',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/verified/videos'],              'xvideos-clips', '', None)) 
+           #valTab.insert(0,CDisplayListItem('--- Channels ---',  'Channels',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/channels'],              'xvideos-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- Porno po polsku ---',  'Porno po polsku',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/porn/polski'],              'xvideos-clips', '', None)) 
+           self.SEARCH_proc='xvideos-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'xvideos-pornstars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.xvideos.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xvideos.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'class="tags-list">', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item).strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'xvideos-clips', '', None)) 
+           return valTab
+        if 'xvideos-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.xvideos.com/?k='+url.replace(' ','+'), 'xvideos-clips')
+           return valTab              
+        if 'xvideos-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.xvideos.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xvideos.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, '"active" href=', '</ul></div>', False)[1]
+           next = self.cm.ph.getSearchGroups(next, '''href=['"](/[^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').replace(' ','+')
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'id="video', '</p></div>')
+           for item in data:
+              phTitle = re.compile('''title=['"]([^'^"]+?)['"]''').findall(item) 
+              for titel in phTitle:
+                 if not 'Verified' in titel: 
+                    phTitle = titel
+                    break
+              if not phTitle: phTitle = 'VIDEO'
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/video[^"^']+?)['"]''', 1, True)[0] 
+              if not phUrl:
+                 phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/search-video[^"^']+?)['"]''', 1, True)[0] 
+              #printDBG( 'Video oldala: '+phUrl )
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0] 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime.strip()+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', self.MAIN_URL+phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next', 'Page: '+self.MAIN_URL+next, CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+next], name, '', None))                
+           return valTab
+
+        if 'hentaigasm' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://hentaigasm.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hentaigasm.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           parse = re.search('Genres(.*?)</div></div>', data, re.S|re.I)
+           if not parse: return valTab
+           phCats = re.findall("<a href='(.*?)'.*?>(.*?)<", parse.group(1), re.S)
+           if phCats:
+              for (phUrl, phTitle) in phCats:
+                  valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'hentaigasm-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- New ---", "New",        CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL], 'hentaigasm-clips', '',None))
+           return valTab
+        if 'hentaigasm-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+           phMovies = re.findall('<div class="thumb">.*?title="(.*?)" href="(.*?)".*?<img src="(.*?)"', data, re.S)
+           if phMovies:
+              for (phTitle, phUrl, phImage) in phMovies:
+                  phImage = phImage.replace(' ','%20')
+                  valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           match = re.search("<div class='wp-pagenavi'>(.*?)</div>", data, re.S)
+           if match: match = re.findall("href='(.*?)'", match.group(1), re.S)
+           if match:
+                  phUrl = match[-1]
+                  valTab.append(CDisplayListItem('Next', 'Page: '+phUrl, CDisplayListItem.TYPE_CATEGORY, [phUrl], name, '', None))                
+           return valTab
+
+        if 'youporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.youporn.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host getResolvedURL data: '+data )
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a data-espnode=', '</a>')
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'categories_list porn-categories action', 'footer', False)[1]
+           if not data2: data2 = data
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<a href="/category/', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              #phTitle = self.cm.ph.getSearchGroups(item, '''ListElement">([^>]+?)<''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/category/[^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl + 'time/?'
+              if phTitle and phUrl: 
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'youporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Discussed ---",     "Most Discussed",     CDisplayListItem.TYPE_CATEGORY,["https://www.youporn.com/most_discussed/"],                   'youporn-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Favorited ---",     "Most Favorited",     CDisplayListItem.TYPE_CATEGORY,["https://www.youporn.com/most_favorited/"],                   'youporn-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---",        "Most Viewed",        CDisplayListItem.TYPE_CATEGORY,["https://www.youporn.com/most_viewed/"],                      'youporn-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",          "Top Rated",          CDisplayListItem.TYPE_CATEGORY,["https://www.youporn.com/top_rated/"],                        'youporn-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---",                "New",                CDisplayListItem.TYPE_CATEGORY,["https://www.youporn.com/"],                                  'youporn-clips', '',None))
+           self.SEARCH_proc='youporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'youporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.youporn.com/search/?query=%s' % url.replace(' ','+'), 'youporn-clips')
+           return valTab              
+        if 'youporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.youporn.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host getResolvedURL data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''rel=['"]next['"]\s*href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'data-video-id', '<i class="icon-thin-x">')
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'data-espnode="videolist', 'footer', False)[1]
+           if len(data2): data = data2
+           data = data.split('data-video-id=')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?jpg)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0].replace("&amp;","&")
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace("&amp;","&") 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = 'https://www.youporn.com' + phUrl
+              if len(phUrl)>5 and phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime.strip()+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = next.replace("&amp;","&")
+              if next.startswith('/'): next = 'https://www.youporn.com' + next
+              valTab.append(CDisplayListItem('Next', 'Next: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           self.MAIN_URL = '' 
+           return valTab
+
+        if 'redtube' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.redtube.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'redtube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li id="categor', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-thumb_url=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'redtube-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Favored ---", "Most Favored", CDisplayListItem.TYPE_CATEGORY,["http://www.redtube.com/mostfavored?period=alltime"], 'redtube-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---",  "Most Viewed",  CDisplayListItem.TYPE_CATEGORY,["http://www.redtube.com/mostviewed?period=alltime"],  'redtube-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",    "Top Rated",    CDisplayListItem.TYPE_CATEGORY,["http://www.redtube.com/top?period=alltime"],         'redtube-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---",       "Newest",       CDisplayListItem.TYPE_CATEGORY,["http://www.redtube.com/"],                           'redtube-clips', '',None))
+           self.SEARCH_proc='redtube-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'redtube-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.redtube.com/?search=%s' % url.replace(' ', '+'), 'redtube-clips')
+           return valTab      
+        if 'redtube-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.redtube.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'redtube.cookie')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '<ul id="block_browse"', 'footer', False)[1]
+           if not data2: data2 = self.cm.ph.getDataBeetwenMarkers(data, '<ul id="search_results_block"', '</ul>', False)[1]
+           if not data2: data2 = data
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<li id=', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-mediumthumb=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-thumb_url=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phRuntime = self.cm.ph.getDataBeetwenMarkers(item, '<span class="duration">', '</a>', False)[1]
+              phRuntime = self._cleanHtmlStr(phRuntime).strip() 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phRuntime and not '/premium/' in phUrl:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'xhamster' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://xhamster.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamster.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'letter-block', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item).strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https://xhamster.com/categories/[^"^']+?)['"]''', 1, True)[0]
+              if config.plugins.iptvplayer.xhamstertag.value and not phUrl:
+                 phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https://xhamster.com/tags/[^"^']+?)['"]''', 1, True)[0] 
+                 if phUrl and phTitle: phTitle = phTitle+'   (tags)'
+              if phUrl and phTitle:
+                 valTab.append(CDisplayListItem(phTitle.strip(),phTitle.strip(),CDisplayListItem.TYPE_CATEGORY, [phUrl],'xhamster-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem("--- HD ---",       "HD",       CDisplayListItem.TYPE_CATEGORY,["http://xhamster.com/categories/hd-videos"], 'xhamster-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Best monthly ---",       "Best monthly",       CDisplayListItem.TYPE_CATEGORY,["http://xhamster.com/best/monthly"], 'xhamster-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---",       "Pornstars",       CDisplayListItem.TYPE_CATEGORY,["http://xhamster.com/pornstars"], 'xhamster-pornostars', '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---",       "New",       CDisplayListItem.TYPE_CATEGORY,["http://xhamster.com/"], 'xhamster-clips', '',None))
+           self.SEARCH_proc='xhamster-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'xhamster-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.xhamster.com/search.php?from=suggestion&q=%s&qcat=video' % url.replace(' ','+'), 'xhamster-clips')
+           return valTab              
+        if 'xhamster-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamster.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='firefox')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''data-page="next"\shref=['"]([^"^']+?)['"]''', 1, True)[0] 
+           if not next: next = self.cm.ph.getSearchGroups(data, '''rel="next"\shref=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = data.split('video-id=')
+           if len(data): del data[0]
+           #printDBG('Adatok: '+str(data)) 
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace('webp', 'jpg')
+              #phImage = strwithmeta(phImage, {'Referer':self.MAIN_URL})
+              phRuntime = self.cm.ph.getSearchGroups(item, '''duration"[>]([^"^']+?)[<]/span></div></a>''', 1, True)[0]
+              views =self.cm.ph.getSearchGroups(item, '''text">([^>^%]+?)</span''', 1, True)[0]
+              printDBG('NÃ©zettsÃ©g: '+str(views)) 
+              like = self.cm.ph.getSearchGroups(item, '''text">([^>^K^.]+?)<''', 1, True)[0].strip()
+              printDBG('KedvelÃ©s: '+str(like)) 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle)+'\nViews: '+views+'\nLike(s): '+like,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = next.replace('&amp;','&')
+              if next.startswith('/'): next = 'https://xhamster.com' + next
+              next = decodeUrl(next)
+              valTab.append(CDisplayListItem('Next', 'Page: '+next.split('/')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))
+           return valTab
+        if 'xhamster-pornostars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamster.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='iphone_3_0')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'letter-block', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item).strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https://xhamster.com/pornstars/[^"^']+?)['"]''', 1, True)[0]
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle.strip(),phTitle.strip(),CDisplayListItem.TYPE_CATEGORY, [phUrl],'xhamster-clips', '', None)) 
+           return valTab
+
+        if 'xhamsterlive' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://xhamsterlive.com' 
+           #url='http://xhamsterlive.com/api/front/models'
+           url='https://go.hpyrdr.com/api/models?limit=9999'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamsterlive.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='iphone_3_0')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           country = ''
+           Url = ''
+           result = simplejson.loads(data)
+           try:
+              for item in result["models"]:
+                 ID = str(item["id"]) 
+                 Name = str(item["username"])
+                 try:
+                    Url = str(item["stream"]['url'])
+                    #printDBG( 'Host Url: '+Url )
+                 except Exception:
+                    printExc()
+                 Image = str(item["snapshotUrl"].replace('\/','/'))  
+                 status = str(item["status"])
+                 try:
+                    country = ' [Country: '+str(item["modelsCountry"]).upper()+']'
+                 except Exception:
+                    printExc()
+                 if status == "public":
+                    valTab.append(CDisplayListItem(Name,Name+country,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 0)], 0, Image, None)) 
+           except Exception:
+              printExc()
+           return valTab
+
+        if 'eporner' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.eporner.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'eporner.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'div class="categoriesbox', '</div> </div>')
+           data = data.split('class="categoriesbox')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = phTitle.replace(' movies', '').replace('Porn Videos', '')
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'eporner-clips', phImage, phUrl)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- 4k ---",        "4k",        CDisplayListItem.TYPE_CATEGORY,["https://www.eporner.com/category/4k-porn/"], 'eporner-clips', '','/4k/'))
+           valTab.insert(0,CDisplayListItem("--- HD ---",        "HD",        CDisplayListItem.TYPE_CATEGORY,["http://www.eporner.com/hd/"], 'eporner-clips', '','/hd/'))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---", "Top Rated", CDisplayListItem.TYPE_CATEGORY,["http://www.eporner.com/top_rated/"], 'eporner-clips', '','/top_rated/'))
+           valTab.insert(0,CDisplayListItem("--- Popular ---",   "Popular",   CDisplayListItem.TYPE_CATEGORY,["http://www.eporner.com/weekly_top/"], 'eporner-clips', '','/weekly_top/'))
+           valTab.insert(0,CDisplayListItem("--- On Air ---",    "On Air",    CDisplayListItem.TYPE_CATEGORY,["http://www.eporner.com/currently/"], 'eporner-clips', '','/currently/'))
+           valTab.insert(0,CDisplayListItem("--- New ---",       "New",       CDisplayListItem.TYPE_CATEGORY,["http://www.eporner.com/"], 'eporner-clips', '',''))
+           self.SEARCH_proc='eporner-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'eporner-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.eporner.com/search/%s/' % url.replace(' ','+'), 'eporner-clips')
+           return valTab    
+        if 'eporner-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           self.MAIN_URL = 'http://www.eporner.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'eporner.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = data.split('data-vp')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''mbtim".+?>([^>]+?)<''', 1, True)[0]
+              mbrate = self.cm.ph.getSearchGroups(item, '''mbrate".+?>([^>]+?)<''', 1, True)[0]
+              mbvie = self.cm.ph.getSearchGroups(item, '''mbvie".+?>([^>]+?)<''', 1, True)[0]
+              if mbrate: mbrate = '['+mbrate+'] '
+              if mbvie: mbvie = '[Views: '+mbvie+'] '
+              size = self.cm.ph.getSearchGroups(item, '''<span>([^>]+?)</span>''', 1, True)[0]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle)+'    '+size,'['+phRuntime+'] '+decodeHtml(phTitle)+'    '+size+'\n'+mbrate+mbvie,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next', 'Next: '+ next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', catUrl))                
+           return valTab
+
+        if 'pornhub' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.pornhub.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhub.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="cat', '</li>')
+           #printDBG( 'Host2 getResolvedURL data: '+str(data) )
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-thumb_url=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl],'pornhub-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- HD ---",         "HD",          CDisplayListItem.TYPE_CATEGORY,["https://www.pornhub.com/video?c=38"], 'pornhub-clips', 'https://di.phncdn.com/pics/albums/040/070/521/497659841/(m=e-yaaGqaa)(mh=5IMX8j5tduU5-So0)original_497659841.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Longest ---",    "Longest",     CDisplayListItem.TYPE_CATEGORY,["https://www.pornhub.com/video?o=lg"], 'pornhub-clips', 'https://di.phncdn.com/pics/albums/070/945/071/806198811/(m=e-yaaGqaa)(mh=aWFuxA3FxMpSLXHW)original_806198811.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",  "Top Rated",   CDisplayListItem.TYPE_CATEGORY,["https://www.pornhub.com/video?o=tr"], 'pornhub-clips', 'https://ei.phncdn.com/pics/albums/023/349/722/289142082/(m=e-yaaGqaa)(mh=LOA3AVkcokHVrtW2)original_289142082.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed", CDisplayListItem.TYPE_CATEGORY,["https://www.pornhub.com/video?o=mv"], 'pornhub-clips', 'https://di.phncdn.com/pics/albums/053/871/972/646564462/(m=e-yaaGqaa)(mh=bCSnVeW9eZaU593L)original_646564462.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent", CDisplayListItem.TYPE_CATEGORY,["https://www.pornhub.com/video?o=mr"], 'pornhub-clips', 'https://di.phncdn.com/pics/albums/048/524/471/592194521/(m=e-yaaGqaa)(mh=O90ldi3949PJDXQE)original_592194521.jpg',None))
+           self.SEARCH_proc='pornhub-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        if 'pornhub-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornhub.com/video/search?search=%s' % url.replace(' ','+'), 'pornhub-clips')
+           return valTab    
+        if 'pornhub-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.pornhub.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhub.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host2 getResolvedURL data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''"next" href=['"]([^"^']+?)['"]./>''')[0].replace('&amp;','&') 
+           if not next:
+              next = self.cm.ph.getSearchGroups(data, '''"<a href=['"]([^"^']+?)['"].class''')[0].replace('&amp;','&') 
+           if next.startswith('/'): next = self.MAIN_URL + next
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'videoblock', '</li>')
+           #printDBG( 'Host2 getResolvedURL data: '+str(data) )
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&') 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-mediumthumb=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''"duration">([^"^']+?)<''', 1, True)[0] 
+              phAdded = self.cm.ph.getSearchGroups(item, '''class="added">([^"^']+?)<''', 1, True)[0] 
+              OldImage = self.cm.ph.getSearchGroups(item, '''data-image=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.MAIN_URL+phUrl
+              if not OldImage:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle)+ '\n[Added: '+phAdded+'] ',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next', 'Next '+re.sub('.+page=', '', next), CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))        
+           return valTab
+
+        if 'hdporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.hdporn.net'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'HD Porn adatok: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'ul id="channel_box">', '</ul>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</a>')
+           phImage = 'https://cdni.pornpics.com/460/1/256/72714917/72714917_004_404a.jpg'
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&') 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.getFullUrl(phUrl, self.MAIN_URL)
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'hdporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",           CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/top-rated/"]  , 'hdporn-clips','https://cdni.pornpics.com/1280/7/487/89451786/89451786_015_f08f.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- Home ---","Home",           CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL]  , 'hdporn-clips','https://cdni.pornpics.com/1280/7/514/55629529/55629529_044_dae9.jpg', None))
+           return valTab
+        if 'hdporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           next = re.findall('<div id="pagination">.*?</div>', data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="content', '</div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt="([^"]+?)"''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&') 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''TIME:([^"^']+?)<''', 1, True)[0].strip()
+              phUrl = self.cm.getFullUrl(phUrl, self.MAIN_URL)
+              valTab.append(CDisplayListItem(phTitle,'['+phRuntime+'] '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = re.findall("</a><a href='(.*?)'>", next[0], re.S)
+              if len(next)>0:
+                 #next = self.cm.getFullUrl(next[0], self.MAIN_URL)
+                 valTab.append(CDisplayListItem('Next', next[0].replace('.html',''), CDisplayListItem.TYPE_CATEGORY, [self.cm.getFullUrl(next[0], url)], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))                
+              return valTab
+
+        if 'pornrabbit' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.pornrabbit.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornrabbit.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornrabbit.cookie', 'pornrabbit.com', self.defaultParams)
+           if not sts: return valTab
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<ul class=mCustomScrollbar>', '<div class=block-btn>', False)[1]
+           phTitle = self.cm.ph.getAllItemsBeetwenMarkers(data, 'title=', '>', False)
+           phUrl = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href="', '" title', False)
+           #printDBG( 'Linkek: '+phUrl )
+           for i in phTitle:
+               valTab.insert(0,CDisplayListItem(i,i,CDisplayListItem.TYPE_CATEGORY, [phUrl[phTitle.index(i)]],'pornrabbit-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)   
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornrabbit.com/most-viewed/'],             'pornrabbit-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornrabbit.com/top-rated/'],             'pornrabbit-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornrabbit.com/videos/'],             'pornrabbit-clips',    '', None))
+           self.SEARCH_proc='pornrabbit-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornrabbit-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornrabbit.com/%s/' % url.replace(' ','-'), 'pornrabbit-clips')
+           return valTab
+        if 'pornrabbit-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornrabbit.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornrabbit.cookie', 'pornrabbit.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', 'Next', False)[1]
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<!-- item -->', '<!-- item END -->')
+           data = data.split('data-video=')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace(' Porn Videos','')
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Runtime = self.cm.ph.getSearchGroups(item, '''<span>([^>]+?)<''', 1, True)[0] 
+              if Runtime:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Runtime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = re.compile('''href=['"]([^'^"]+?)['"]''').findall(next) 
+              if next:
+                 next = next[-1]
+                 if next.startswith('/'): next = 'https://www.pornrabbit.com' + next
+                 if next.startswith('page'): next = re.sub('page.+', '', url) + next
+                 valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None)) 
+           return valTab
+
+        if 'PORNWHITE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pornwhite.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornwhite.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornwhite.cookie', 'pornwhite.com', self.defaultParams)
+           if not sts: return valTab
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="thumbs-list">', '<div class="bottom-items">', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb">', '</a>', False)
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].strip()
+              if not phTitle:
+                 phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if 'gif' in phImage:
+                 phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNWHITE-clips',  phImage, phUrl)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Newest Videos ---",       "Newest Videos",       CDisplayListItem.TYPE_CATEGORY,["https://www.pornwhite.com/latest-updates/"], 'PORNWHITE-clips', 'https://cdni.pornpics.com/1280/7/263/69569468/69569468_112_2a10.jpg',None))
+           valTab.insert(0,CDisplayListItem("---    Top Rated Videos ---",       "Top Rated Videos",       CDisplayListItem.TYPE_CATEGORY,["https://www.pornwhite.com/top-rated/"], 'PORNWHITE-clips', 'https://cdni.pornpics.com/1280/7/465/98051221/98051221_018_558d.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Popular Videos ---",       "Popular Videos",       CDisplayListItem.TYPE_CATEGORY,["https://www.pornwhite.com/most-popular/"], 'PORNWHITE-clips', 'https://cdni.pornpics.com/1280/7/583/71891242/71891242_034_0b65.jpg',None))
+           self.SEARCH_proc='PORNWHITE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        if 'PORNWHITE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornwhite.com/search/?q=%s' % url.replace(' ','+'), 'PORNWHITE-clips')
+           return valTab
+        if 'PORNWHITE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornwhite.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='iphone_3_0')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornwhite.cookie', 'pornwhite.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           next = self.cm.ph.getSearchGroups(data, '''link.href=['"]([^"^']+?)['"].rel="next"''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb"', '<span class="thumb-info">', False)
+           for item in data:
+              Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              Title = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              Image = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0]
+              Runtime = self.cm.ph.getSearchGroups(item, '''length">([^"^']+?)<''', 1, True)[0] 
+              valTab.append(CDisplayListItem(decodeHtml(Title),'['+Runtime+'] '+decodeHtml(Title),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 1)], 0, Image, None)) 
+           if next:
+              printDBG( 'KÃ¶vetkezÅ oldal: '+next )
+              valTab.append(CDisplayListItem('Next', 'Page : '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))             
+           return valTab
+
+        if 'AH-ME' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.ah-me.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="moviec', '</div>')
+           #printDBG( 'Host2 data: '+str(data) )
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phTitle,phUrl,CDisplayListItem.TYPE_CATEGORY, [phUrl],'AH-ME-clips', phImage, phUrl)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Long movies ---",       "Long movies",       CDisplayListItem.TYPE_CATEGORY,["https://www.ah-me.com/long-movies/page1.html"], 'AH-ME-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top rated ---",       "Top rated",       CDisplayListItem.TYPE_CATEGORY,["https://www.ah-me.com/top-rated/page1.html"], 'AH-ME-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- High definition ---",       "High definition",       CDisplayListItem.TYPE_CATEGORY,["https://www.ah-me.com/high-definition/page1.html"], 'AH-ME-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most favorited ---",       "Most favorited",       CDisplayListItem.TYPE_CATEGORY,["https://www.ah-me.com/mostfavorites/page1.html"], 'AH-ME-clips', '',None))
+           self.SEARCH_proc='ahme-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'ahme-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.ah-me.com/search/%s/' % url.replace(' ','+'), 'AH-ME-clips')
+           return valTab
+        if 'AH-ME-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           self.MAIN_URL = 'http://www.ah-me.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'next"><a class="color" href="', '">Next', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="moviec', '/span></p>')
+           #printDBG( 'Host2 data: '+str(data) )
+           for item in data:
+              Title = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Image = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Runtime = self.cm.ph.getSearchGroups(item, '''class="time">([^"^']+?)<''', 1, True)[0] 
+              valTab.append(CDisplayListItem(decodeHtml(Title),'['+Runtime+'] '+decodeHtml(Title),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 1)], 0, Image, None)) 
+           if next:
+              printDBG( 'Host next: '+next )
+              valTab.append(CDisplayListItem('Next', 'Next', CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'CHATURBATE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://chaturbate.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'chaturbate.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="paging">', '</ul>', False)[1]
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           if catUrl<>'next':
+              valTab.append(CDisplayListItem('Female', 'Female',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/female-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('Featured', 'Featured',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('Couple', 'Couple',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/couple-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('Transsexual', 'Transsexual',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/transsexual-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('HD', 'HD',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/hd-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('Teen (18+)', 'Teen',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/teen-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('18 to 21', '18 to 21',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/18to21-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('20 to 30', '20 to 30',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/20to30-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('30 to 50', '30 to 50',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/30to50-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('Euro Russian', 'Euro Russian',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/euro-russian-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('Exhibitionist', 'Exhibitionist',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/exhibitionist-cams/'],'CHATURBATE-clips', '', None)) 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href="/tag/', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'CHATURBATE-clips', '', None)) 
+           if next_page:
+              next_page = self.cm.ph.getAllItemsBeetwenMarkers(next_page, '<li', '</li>')
+              for item in next_page:
+                 next = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              if next.startswith('/'): next = self.MAIN_URL + next 
+              if next == '#': return valTab
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))  
+           return valTab
+        if 'CHATURBATE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'chaturbate.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+           cookieHeader = self.cm.getCookieHeader(COOKIEFILE)
+           match = re.search('class="endless_separator".*?<li><a href="(.*?)"', data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="room_list_room', 'viewers</span>')
+           #printDBG( 'Host2 data: '+str(data) )
+           for item in data:
+              Title = self.cm.ph.getSearchGroups(item, '''room=['"]([^"^']+?)["] class''', 1, True)[0].capitalize()
+              Image = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Gender=''
+              Age=self.cm.ph.getSearchGroups(item, '''<span class="age">([^>]+?)<''', 1, True)[0]
+              Description=''
+              Location=self.cm.ph.getSearchGroups(item, '''location">([^>]+?)<''', 1, True)[0]
+              Viewers=self.cm.ph.getSearchGroups(item, '''viewers">([^>]+?)v''', 1, True)[0]
+              phTime = self.cm.ph.getSearchGroups(item, '''time">([^>]+?)<''', 1, True)[0]
+              if Url.startswith('/'): Url = self.MAIN_URL + Url 
+              Image = strwithmeta(Image, {'Referer':url, 'Cookie':cookieHeader})
+              valTab.append(CDisplayListItem(decodeHtml(Title),decodeHtml(Title)+' *  [Age: '+decodeHtml(Age)+'] *  [Location: '+decodeHtml(Location)+'] *  [Time: '+phTime+'] *  [Viewers: '+Viewers+']'  ,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 1)], 0, Image, None)) 
+           if match:
+              printDBG( 'Host listsItems Next: '  +match.group(1) )
+              if match.group(1).startswith('/'): Url = self.MAIN_URL + match.group(1) 
+              valTab.append(CDisplayListItem('Next', self.MAIN_URL +match.group(1), CDisplayListItem.TYPE_CATEGORY, [Url], name, '', None))                
+           return valTab
+
+        if 'AMATEURPORN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.amateurporn.net' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'amateurporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           cookieHeader = self.cm.getCookieHeader(COOKIEFILE)
+           match = re.search('class="endless_separator".*?<li><a href="(.*?)"', data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="item"', '</a>')
+           #printDBG( 'Host2 data: '+str(data) )
+           for item in data:
+              Title = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Image = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Gender=''
+              Age=self.cm.ph.getSearchGroups(item, '''<span class="age gender.">([^>]+?)<''', 1, True)[0]
+              Description=''
+              Location=self.cm.ph.getSearchGroups(item, '''location" style="display: none;">([^>]+?)<''', 1, True)[0]
+              Viewers=''
+              bitrate = self.cm.ph.getSearchGroups(item, '''thumbnail_label.*?>([^>]+?)<''', 1, True)[0]
+              if Url.startswith('/'): Url = self.MAIN_URL + Url 
+              valTab.append(CDisplayListItem(Title,Url,CDisplayListItem.TYPE_CATEGORY, [Url],'AMATEURPORN-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='AMATEURPORN-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'AMATEURPORN-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.amateurporn.me/search/%s/' % url.replace(' ','+'), 'AMATEURPORN-clips')
+           return valTab
+        if 'AMATEURPORN-clips' == name:
+            printDBG( 'Host listsItems begin name='+name )
+            COOKIEFILE = os_path.join(GetCookieDir(), 'amateurporn.cookie')
+            self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+            self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.get_Page(url)
+            if not sts: return valTab
+            printDBG( 'Host listsItems data: '+data )
+            next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="next">', '</li>', False)[1]
+            data = data.split('<div class="item  ">')
+            if len(data): del data[0]
+            for item in data:
+                phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('Model ','')
+                phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+                Runtime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0] 
+                Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0] 
+                if Added: Added = 'Added: '+ Added
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                if phImage.startswith('//'): phImage = 'http:' + phImage
+                valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Runtime+'] '+phTitle+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+            if next:
+                page = self.cm.ph.getSearchGroups(str(next), '''from:([^"^']+?)['"]''')[0]
+                next = url + '?mode=async&function=get_block&block_id=list_videos_common_videos_list&sort_by=post_date&from='+page
+                valTab.append(CDisplayListItem('Next', 'Page : '+page, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))                
+            return valTab
+
+        if 'FOTKA-PL-KAMERKI' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = url 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           printDBG( 'Host listsItems data: '+data )
+           parse = re.search('"rooms":(.*?),"status":"OK"', data, re.S)
+           if not parse: return valTab
+           #printDBG( 'Host listsItems parse.group(1): '+parse.group(1) )
+           result = simplejson.loads(parse.group(1))
+           if result:
+              for item in result:
+                 try:
+                    Name = str(item["name"])
+                    Age = str(item["age"])
+                    Url = str(item["streamUrl"].replace('\/','/'))+' live=1'
+                    Title = str(item["title"])
+                    Viewers = str(item["viewers"])
+                    Image = str(item["av_126"].replace('\/','/'))
+                    hls = str(item["streamMPEGHLSUrl"].replace('\/','/'))
+                    try:
+                       Image = str(item["av_640"].replace('\/','/'))
+                    except Exception: printExc()
+                    if config.plugins.iptvplayer.fotka.value == '0': Url = hls.replace('https','http').replace('manifest.hls','index.m3u8')
+                    valTab.append(CDisplayListItem(Name,'[Age : '+Age+']'+'   [Views:  '+Viewers+']      '+Title, CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 0)], 0, Image, None)) 
+                 except Exception: printExc()
+           return valTab
+
+        if 'FULLPORNER' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://fullporner.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fullporner.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'fullporner.cookie', 'fullporner.com', self.defaultParams)
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="channels-card">', '<div class="channels-title">')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = self.cm.ph.getSearchGroups(item, '''src=["']([^"^']+?)["'] alt''', 1, True)[0]
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if not phImage:
+                 phImage = 'https://cdni.pornpics.com/1280/1/99/62508200/62508200_008_b228.jpg'
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=["']([^"^']+?)["']></a''', 1, True)[0].capitalize()
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'FULLPORNER-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+
+           valTab.insert(0,CDisplayListItem("--- LATEST ---","LATEST",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/home/1'],            'FULLPORNER-clips',    'https://s9v7j7a4.ssl.hwcdn.net/galleries/full/d7/50/92/d75092b21def27114ed591e75d526fc6/7.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- CHANNELS ---","CHANNELS",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/channels/'],             'FULLPORNER-channels',    'https://gotblop.com/templates/public/main/chaturbate.png',None))
+           self.SEARCH_proc='FULLPORNER-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        
+        if 'FULLPORNER-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://fullporner.com/search?q=%s/' % url.replace(' ','%20'), 'FULLPORNER-clips')
+           return valTab
+        
+        if 'FULLPORNER-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fullporner.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'fullporner.cookie', 'fullporner.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Ujabb adat: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''page-link" href=["']([^"^']+?)["']>Next''', 1, True)[0]
+           printDBG( 'Lekert info: ' +data)
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="main-title">', '<nav aria-label="Page navigation">', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="video-card-image">', '<div class="video-title">')
+           printDBG( 'Lekert info: ' +str(data))
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=["']([^"^']+?)["]><img''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = self.cm.ph.getSearchGroups(item, '''src=["']([^"^']+?)["'] alt''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)[#]''', 1, True)[0].capitalize()
+              if not phTitle:
+                phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].capitalize()
+              phTime = self.cm.ph.getSearchGroups(item, '''time"[>]([^"^']+?)[<]''', 1, True)[0]  
+              printDBG( 'Videolista: '+ phUrl )
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None))
+           if next:
+              next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))    
+           return valTab
+           
+        if 'FULLPORNER-channels' == name:
+            printDBG( 'Host listsItems begin name='+name )
+            COOKIEFILE = os_path.join(GetCookieDir(), 'fullporner.cookie')
+            self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.getPage(url, 'fullporner.cookie', 'fullporner.com', self.defaultParams)
+            if not sts: return ''
+            printDBG( 'Channels Adatok: '+data )
+            self.cm.ph.getDataBeetwenMarkers(data, '<div class="main-title">', '<div class="spacing"></div>', False)[1]
+            data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="channels-card">', 'card-body">')
+            for item in data:
+                phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]><''', 1, True)[0] 
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+                if phImage.startswith('//'): phImage = 'https:' + phImage
+                valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'FULLPORNER-clips', phImage, None))
+            return valTab
+        
+        if 'STREAMATE' == name:
+            printDBG( 'Host listsItems begin name='+name ) 
+            self.MAIN_URL = 'https://streamate.com' 
+            COOKIEFILE = os_path.join(GetCookieDir(), 'streamate.cookie')
+            query_data = { 'url': url,  'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+            try:
+                data = self.cm.getURLRequestData(query_data)
+            except Exception as e:
+                printExc()
+                return valTab 
+            printDBG( 'Host listsItems data: '+data )
+            data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="cats__content">', 'class="recents__list">', False)[1]
+            data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+            for item in data:
+                Title = self._cleanHtmlStr(item).split(' ')[1]
+                Title = self.cm.ph.getDataBeetwenMarkers(item, '</span>', '</a>', False)[1]
+                Title = str(Title).strip()
+                Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                if Url.startswith('/'): Url = 'https://streamate.com' + Url 
+                valTab.append(CDisplayListItem(decodeHtml(Title),decodeHtml(Title),CDisplayListItem.TYPE_CATEGORY, [Url],'STREAMATE-clips', '', None)) 
+            return valTab 
+        if 'STREAMATE-clips' == name:
+            printDBG( 'Host listsItems begin name='+name ) 
+            self.MAIN_URL = 'https://streamate.com' 
+            COOKIEFILE = os_path.join(GetCookieDir(), 'streamate.cookie')
+            query_data = { 'url': url,  'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+            try:
+                data = self.cm.getURLRequestData(query_data)
+            except Exception as e:
+                printExc()
+                return valTab 
+            printDBG( 'Host listsItems data: '+data )
+            next = self.cm.ph.getDataBeetwenMarkers(data, 'class="pagination">', 'Next', False)[1]
+            data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="js-dynamicsearch" data-status="online"', '</figure>')
+            for item in data:
+                phTitle = self.cm.ph.getSearchGroups(item, '''data-name=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''data-thumbid=['"]([^"^']+?)['"]''', 1, True)[0] 
+                age = self.cm.ph.getSearchGroups(item, '''"year">([^>]+?)<''', 1, True)[0].strip()
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                if phImage.startswith('//'): phImage = 'http:' + phImage
+                phImage = 'http://m2.nsimg.net/biopic/original4x3/' + phImage
+                valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle)+'  [Age:'+age+']', CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phTitle, 1)], 0, phImage, None)) 
+            if next:
+                next = re.compile('''href=['"]([^'^"]+?)['"]''').findall(next) 
+                if next:
+                    next = next[-1]
+                    if next.startswith('/'): next = 'https://streamate.com' + next
+                    valTab.append(CDisplayListItem('Next', 'Page : '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None)) 
+            return valTab 
+
+        if 'NAKED' == name:
+            printDBG( 'Host listsItems begin name='+name ) 
+            self.MAIN_URL = 'https://www.naked.com' 
+            COOKIEFILE = os_path.join(GetCookieDir(), 'naked.cookie')
+            host = 'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Mobile Safari/537.36'
+            header = {'User-Agent': host, 'Accept':'application/json','Accept-Language':'en,en-US;q=0.7,en;q=0.3','X-Requested-With':'XMLHttpRequest','Content-Type':'application/x-www-form-urlencoded'} 
+            query_data = {'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+            sts, data = self.cm.getPage(url)
+            printDBG( 'Adatok: '+data )
+            data = self.cm.ph.getDataBeetwenMarkers(data, 'Categories <i class="arrow-right"', '"invisible-diagonal', False)[1]
+            data = data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<ul class', '</ul>')
+            printDBG( 'Info: '+str(data))
+            #if len(data): del data[0]
+            for item in data:
+                phTitle = self.cm.ph.getSearchGroups(item, '''">([^"^(]+?)[<]''', 1, True)[0].replace('Model ','')
+                phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = 'https://cdn3.vscdns.com/images/models/samples-640x480/4090407.jpg' 
+                desc = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+                age = self.cm.ph.getSearchGroups(item, '''model-age">([^>]+?)<''', 1, True)[0] 
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                if not 'http' in phUrl: phUrl = 'https://www.naked.com/?model=' + phUrl
+                if phImage.startswith('//'): phImage = 'http:' + phImage
+                valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle)+'\n'+desc, CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+            return valTab 
+
+        if 'YOUJIZZ' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.youjizz.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youjizz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'class="footer-category category-link', 'footer-links', False)[1]
+           if len(data2): data = data2
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li><a href="/categories/', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''">([^"^']+?)<''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'YOUJIZZ-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- HD ---",       "HD",       CDisplayListItem.TYPE_CATEGORY,["http://www.youjizz.com/search/HighDefinition-1.html#"], 'YOUJIZZ-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",       "Top Rated",       CDisplayListItem.TYPE_CATEGORY,["http://www.youjizz.com/top-rated/1.html"], 'YOUJIZZ-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---",       "Newest",       CDisplayListItem.TYPE_CATEGORY,["http://www.youjizz.com/newest-clips/1.html"], 'YOUJIZZ-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular ---",       "Popular",       CDisplayListItem.TYPE_CATEGORY,["http://www.youjizz.com/most-popular/1.html"], 'YOUJIZZ-clips', '',None))
+           self.SEARCH_proc='YOUJIZZ-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'YOUJIZZ-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.youjizz.com/search/%s-1.html' % url.replace(' ','+'), 'YOUJIZZ-clips')
+           return valTab
+        if 'YOUJIZZ-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           self.MAIN_URL = 'http://www.youjizz.com' 
+           url = url.replace(' ','%20')
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youjizz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           next=''
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', '</div>', False)[1]
+           next_page = self.cm.ph.getAllItemsBeetwenMarkers(next_page, '<li', '</li>')
+           for item in next_page:
+              next = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+           if next.startswith('/'): next = self.MAIN_URL + next
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="video-thumb', 'format-views')
+           
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''class="">([^"^']+?)</a>''', 1, True)[0]
+              printDBG( 'Cim:  '+phTitle )
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage=='': phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''nbsp;([^"^']+?)<''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle).strip(),'['+phRuntime+'] '+decodeHtml(phTitle).strip(),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', self.MAIN_URL+phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))
+           return valTab
+
+        if 'PORNHAT' == name:
+           self.MAIN_URL = 'https://www.pornhat.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhat.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           url = 'https://www.pornhat.com/channels/'
+           sts, data = self.getPage(url, 'pornhat.cookie', 'pornhat.com', self.defaultParams)
+           if not sts: return ''
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb thumb-ctr">', '</div>')
+           printDBG( 'Pornhat data: '+ str(data) )
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=["']([^"^']+?)["']''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=["']([^"^']+?)["']''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNHAT-clips', phImage, None))
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- New ---",       "New",       CDisplayListItem.TYPE_CATEGORY,["https://www.pornhat.com"], 'PORNHAT-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular ---",       "Popular",       CDisplayListItem.TYPE_CATEGORY,["https://www.pornhat.com/popular/"], 'PORNHAT-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Trending ---",       "Trending",       CDisplayListItem.TYPE_CATEGORY,["https://www.pornhat.com/trending/"], 'PORNHAT-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Models ---",       "Models",       CDisplayListItem.TYPE_CATEGORY,["https://www.pornhat.com/models/"], 'PORNHAT-models', '',None))
+           self.SEARCH_proc='PORNHAT-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        
+        if 'PORNHAT-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornhat.com/search/%s/' % url.replace(' ','+'), 'PORNHAT-clips')
+           return valTab
+        
+        if 'PORNHAT-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pornhat.com' 
+           sts, data = self.getPage(url, 'pornhat.cookie', 'pornhat.com', self.defaultParams)
+           printDBG( 'Pornhat adatok: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<li class="pagination-next"><a href="', '">Next</a></li>', False)[1]
+           if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb thumb-video ">', '<div class="preview">')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''original=["']([^"^']+?)["']''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phTitle and phUrl:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page: 
+              number = next_page.split('/')[-1]
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+        
+        if 'PORNHAT-models' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhat.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornhat.cookie', 'pornhat.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'pagination-next"><a href="', '">Next</a>', False)[1]
+           if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb-bl">', 'videos</div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNHAT-clips', phImage, None))
+           if next_page: 
+              number = next_page.split('/')[-1]
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+        
+        if 'DRTUBER' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.drtuber.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'drtuber.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'contain_cols', '</div> </div> </div> </div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              if '/gay/' in phUrl: phTitle = phTitle + ' gay'
+              if '/shemale/' in phUrl: phTitle = phTitle + ' shemale'
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(phTitle,phUrl,CDisplayListItem.TYPE_CATEGORY, [phUrl],'DRTUBER-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='DRTUBER-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'DRTUBER-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.drtuber.com/search/videos/%s' % url.replace(' ','+'), 'DRTUBER-clips')
+           return valTab
+        if 'DRTUBER-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'drtuber.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''class="next"><a href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href="/video/', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''([\d]?\d\d:\d\d)''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = 'http://www.drtuber.com' + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if next.startswith('/'): next = self.MAIN_URL + next 
+              valTab.append(CDisplayListItem('Next', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))
+           return valTab
+
+        if 'PORNHEED' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pornheed.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornheed.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornheed.cookie', 'pornheed.com', self.defaultParams)
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''current'>.?</a><a href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<h2>Categories</h2>', '<div class="pagelist">', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li id=', '</span>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^/^/]+)['"] alt''', 1, True)[0] 
+              phTitle = phTitle.title()
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNHEED-clips', phImage, None)) 
+           self.SEARCH_proc='PORNHEED-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           if next:
+              next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))
+           return valTab
+        
+        if 'PORNHEED-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornheed.com/s/%s' % url.replace(' ','-'), 'PORNHEED-clips')
+           return valTab
+        
+        if 'PORNHEED-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornheed.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornheed.cookie', 'pornheed.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Ujabb adat: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''current'>.?</a><a href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           printDBG( 'Lekert info: ' +data)
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<a href="/categories">Categories</a>', 'div class="pagelist', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li id=', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=["']([^"^']+?)["]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"]+?)["] alt''', 1, True)[0]  
+              phTime = self.cm.ph.getSearchGroups(item, '''runtime"[>]([^"^']+?)[<]''', 1, True)[0]  
+              printDBG( 'Videolista: '+ phUrl )
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None))
+           if next:
+              next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))    
+           return valTab
+        
+        if 'TNAFLIX' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.tnaflix.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'Categories</h', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'TNAFLIX-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Featured ---",       "Featured",       CDisplayListItem.TYPE_CATEGORY,["https://www.tnaflix.com/featured/?d=all&period=all"], 'TNAFLIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---",       "Most Popular",       CDisplayListItem.TYPE_CATEGORY,["https://www.tnaflix.com/popular/?d=all&period=all"], 'TNAFLIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",       "Top Rated",       CDisplayListItem.TYPE_CATEGORY,["https://www.tnaflix.com/toprated/?d=all&period=all"], 'TNAFLIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---",       "New",       CDisplayListItem.TYPE_CATEGORY,["https://www.tnaflix.com/new/?d=all&period=all"], 'TNAFLIX-clips', '',None))
+           self.SEARCH_proc='TNAFLIX-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'TNAFLIX-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.tnaflix.com/search.php?what=%s&tab=' % url.replace(' ','+'), 'TNAFLIX-clips')
+           return valTab
+        if 'TNAFLIX-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'data-vid=', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''videoDuration'>([^>]+?)<''', 1, True)[0] 
+              Added = self.cm.ph.getSearchGroups(item, '''floatLeft\'>([^>]+?)<''', 1, True)[0]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle)+'\nAdded: '+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if next.startswith('/'): next = 'https://www.tnaflix.com' + next
+              valTab.append(CDisplayListItem('Next', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))
+           return valTab
+        
+        if 'MOMVIDS' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.momvids.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'momvids.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'momvids.cookie', 'momvids.com', self.defaultParams)
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb grid item">', '</div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^/^/]+)['"].?class''', 1, True)[0]
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'MOMVIDS-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- TODAY'S TRENDING ---", "TODAY'S TRENDING", CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL], 'MOMVIDS-clips', 'https://jk1tthawth.ent-cdn.com/contents/albums/sources/0/1/1.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- MOM'S DAILY PORN ---", "MOM'S DAILY PORN", CDisplayListItem.TYPE_CATEGORY, ['https://www.momvids.com/latest-updates/'], 'MOMVIDS-clips', 'https://jk1tthawth.ent-cdn.com/contents/albums/sources/36000/36165/646748.jpg', None))
+           valTab.insert(0,CDisplayListItem('--- TOP RATED ---', 'THIS MONTHS TOP RATED MOTHER PORNO VIDEOS', CDisplayListItem.TYPE_CATEGORY, ['https://www.momvids.com/top-rated/'], 'MOMVIDS-clips', 'https://jk1tthawth.ent-cdn.com/contents/albums/sources/55000/55990/1007884.jpg', None))
+           valTab.insert(0,CDisplayListItem('--- MOST VIEWED ---', 'THIS MONTHS MOST VIEWED MOTHER PORNO VIDEOS', CDisplayListItem.TYPE_CATEGORY, ['https://www.momvids.com/most-popular/'], 'MOMVIDS-clips', 'https://jk1tthawth.ent-cdn.com/contents/albums/sources/35000/35002/624987.jpg', None))
+           valTab.insert(0,CDisplayListItem('--- LONGEST VIDEOS ---', 'LONGEST VIDEOS', CDisplayListItem.TYPE_CATEGORY, ['https://www.momvids.com/longest/'], 'MOMVIDS-clips', 'https://jk1tthawth.ent-cdn.com/contents/albums/sources/9000/9953/175722.jpg', None))
+           self.SEARCH_proc='MOMVIDS-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab 
+        if 'MOMVIDS-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.momvids.com/search/%s/' % url.replace(' ','-'), 'MOMVIDS-clips')
+           return valTab
+        if 'MOMVIDS-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'momvids.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'momvids.cookie', 'momvids.com', self.defaultParams)
+           if not sts: return valTab
+           next = self.cm.ph.getSearchGroups(data, '''pager"><a href=["']([^"^']+?)["].+Next''', 1, True)[0] 
+           next = self.MAIN_URL + next
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="item thumb">', '<div class="columns">')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=["']([^"^']+?)["].title''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"].alt''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^/^/]+)['"].data''', 1, True)[0].replace('?','')
+              phTitle = phTitle.replace('(','').replace(')','').replace('/','').replace('\\','')
+              phTime = self.cm.ph.getSearchGroups(item, '''time"[>]([^"^'^a-z]+?)[<]''', 1, True)[0]  
+              printDBG( 'Video Links: '+ phUrl )
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None))
+           if next:
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))    
+           return valTab
+        
+        if 'DATALINKEK' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           url = 'https://datalinkek.com/forum.php' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'datalinkek.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.cm.getPage(url)
+           if not sts: 
+               return valTab
+           def tryTologin():
+                self.login = config.plugins.iptvplayer.datalinkek_login.value
+                self.password = config.plugins.iptvplayer.datalinkek_password.value
+                encoded = hashlib.md5(self.password.encode())
+                encoded = encoded.hexdigest()
+                post_data = {'do': 'login', 'vb_login_password':self.password, 'vb_login_md5password': encoded, 'vb_login_md5password_utf': encoded, 's': '', 'securitytoken': 'guest', 'url': url, 'vb_login_username': self.login}
+                httpParams = dict(self.defaultParams)
+                httpParams['header'] = dict(httpParams['header'])
+                httpParams['header']['Referer'] = url
+                sts, data = self.cm.getPage("https://datalinkek.com/login.php?do=login", httpParams, post_data)
+                return data
+           data = tryTologin()
+           securitytoken = self.cm.ph.getDataBeetwenMarkers(data, 'var SECURITYTOKEN = "', '";', False)[1]
+           httpParams = dict(self.defaultParams)
+           httpParams['header'] = dict(httpParams['header'])
+           httpParams['header']['Referer'] = "https://datalinkek.com/login.php?do=login"
+           printDBG("Securitytoken: " + securitytoken)
+           post_data = {'securitytoken': securitytoken}
+           sts, data = self.cm.getPage(url, httpParams, post_data)
+           if sts:
+               printDBG(data)
+        
+        if 'MEGATUBE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.megatube.xxx' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'megatube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="dropdown-menu">', 'class="last selected">', False)[1]
+           #data2 = self.cm.ph.getDataBeetwenMarkers(data, '<div class="list-categories">', '<div class="category-content">', False)[1]
+           #data = data1 + data2
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'href=', '</div>', True)
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle =  self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phTitle: 
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'MEGATUBE-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='MEGATUBE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        if 'MEGATUBE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.megatube.xxx/search=%s' % url.replace(' ','+'), 'MEGATUBE-clips')
+           return valTab
+        if 'MEGATUBE-clips' == name:
+            printDBG( 'Host listsItems begin name='+name )
+            COOKIEFILE = os_path.join(GetCookieDir(), 'megatube.cookie')
+            self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+            self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.get_Page(url)
+            if not sts: return valTab
+            printDBG( 'Host listsItems data: '+data )
+            next = self.cm.ph.getSearchGroups(data, '''post_date;from:([^"^']+?)['"]''', 1, True)[0]
+            data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="list-videos">', '<div class="pagination', False)[1]
+            data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="item  ">', 'ago</div>', True)
+            for item in data:
+                phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0]
+                Runtime = self.cm.ph.getSearchGroups(item, '''duration"[>]([^"^']+?)[<]/span''', 1, True)[0] 
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                if phImage.startswith('//'): phImage = 'http:' + phImage
+                valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Runtime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+            if next:
+                if next.startswith('/'): next = self.MAIN_URL + '/' + next
+                valTab.append(CDisplayListItem('Next', 'Next: '+ next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+            return valTab
+
+
+        if 'XXXLIST' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'xxxlist.txt' 
+           URLLIST_FILE    = 'xxxlist.txt'
+           self.filespath = config.plugins.iptvplayer.xxxlist.value
+           self.sortList = config.plugins.iptvplayer.xxxsortuj.value
+           self.currFileHost = IPTVFileHost() 
+           self.currFileHost.addFile(self.filespath + URLLIST_FILE, encoding='utf-8')
+           tmpList = self.currFileHost.getGroups(self.sortList)
+           for item in tmpList:
+               if '' == item: title = (_("Other"))
+               else:          title = item
+               valTab.append(CDisplayListItem(title,title,CDisplayListItem.TYPE_CATEGORY, [title],'XXXLIST-clips', '', None)) 
+           return valTab
+        if 'XXXLIST-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           desc = ''
+           icon = ''
+           tmpList = self.currFileHost.getAllItems(self.sortList)
+           for item in tmpList:
+               if item['group'] == url:
+                   Title = item['title_in_group']
+                   Url = item['url']
+                   if item.get('icon', '') != '':
+                      icon = item.get('icon', '')
+                   if item.get('desc', '') != '':
+                      desc = item['desc']
+                   if Url.endswith('.mjpg') or Url.endswith('.cgi'):
+                      valTab.append(CDisplayListItem(Title, Url,CDisplayListItem.TYPE_PICTURE, [CUrlItem('', Url, 1)], 0, '', None)) 
+                   else:
+                      valTab.append(CDisplayListItem(Title, Url+'\n'+desc,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 1)], 0, icon, None)) 
+               elif url == (_("Other")) and item['group'] == '':
+                   Title = item['full_title']
+                   Url = item['url']
+                   if item.get('icon', '') != '':
+                      icon = item.get('icon', '')
+                   if item.get('desc', '') != '':
+                      desc = item['desc']
+                   if Url.endswith('.mjpg') or Url.endswith('.cgi'):
+                      valTab.append(CDisplayListItem(Title, Url,CDisplayListItem.TYPE_PICTURE, [CUrlItem('', Url, 1)], 0, '', None)) 
+                   else:
+                      valTab.append(CDisplayListItem(Title, Url+'\n'+desc,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 1)], 0, icon, None)) 
+           return valTab
+
+        if 'BONGACAMS' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://pl.bongacams.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bongacams.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data ) 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="ht_item"', '</a>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item).strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].split('/')[-1]
+              valTab.append(CDisplayListItem(phTitle,phUrl,CDisplayListItem.TYPE_CATEGORY, [phUrl],'BONGACAMS-clips', '', phTitle)) 
+           valTab.insert(0,CDisplayListItem("--- Couples ---", "Pary",       CDisplayListItem.TYPE_CATEGORY,["couples"], 'BONGACAMS-clips', '',"---couples"))
+           valTab.insert(0,CDisplayListItem("--- Male ---",       "MÄÅ¼czyÅºni",       CDisplayListItem.TYPE_CATEGORY,["male"], 'BONGACAMS-clips', '',"---male"))
+           valTab.insert(0,CDisplayListItem("--- Transsexual ---",       "TransseksualiÅci",       CDisplayListItem.TYPE_CATEGORY,["transsexual"], 'BONGACAMS-clips', '',"---transsexual"))
+           valTab.insert(0,CDisplayListItem("--- New ---",       "Nowe",       CDisplayListItem.TYPE_CATEGORY,["new"], 'BONGACAMS-clips', '',"---new"))
+           valTab.insert(0,CDisplayListItem("--- Female ---",       "Kobiety",       CDisplayListItem.TYPE_CATEGORY,["females"], 'BONGACAMS-clips', '',"---females"))
+           return valTab 
+        if 'BONGACAMS-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = url
+           if catUrl != 'Next': 
+              self.page = 1
+           else:
+              self.page += 1
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bongacams.cookie')
+           if catUrl.startswith('---'): 
+              url1 = url
+           else:
+              url1 = 'females'
+           url = 'https://en.bongacams.com/tools/listing_v3.php?livetab=%s&online_only=true&offset=%s&tag=%s' % (url1, str((self.page*24)-24), url)
+           host = 'Mozilla/5.0 (iPad; CPU OS 8_1_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B466 Safari/600.1.4'
+           header = {'User-Agent': host, 'Accept':'application/json','Accept-Language':'en,en-US;q=0.7,en;q=0.3','X-Requested-With':'XMLHttpRequest','Content-Type':'application/x-www-form-urlencoded', 'Referer':'https://en.bongacams.com/', 'Origin':'https://en.bongacams.com'}
+           self.defaultParams = { 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'second bonga-clips data: '+data )  
+
+           x = 0
+
+           result = byteify(simplejson.loads(data))
+           if result:
+              try:
+                 for item in result["models"]:
+                    age = ''
+                    phImage = ''
+                    #printDBG( 'Host item: '+str(item) )
+                    try:
+                       #online = str(item["online"])  
+                       room = str(item["room"])
+                       phTitle = str(item["username"]) 
+                       phTitle2 = str(item["display_name"])
+                    except Exception:
+                       printExc()
+                       continue
+                    try:
+                       phImage = str(item["thumb_image"]) 
+                       if phImage.startswith('//'): phImage = 'http:' + phImage
+                       phImage = phImage.replace ('.{ext}','.jpg')
+                    except Exception:
+                       printExc()
+                    bitrate = '' 
+                    try:
+                       bitrate = str(item["vq"]) 
+                    except Exception:
+                       printExc()
+                    try: 
+                       age = ' [Age: '+str(item["display_age"])+']  ' 
+                    except Exception:
+                       printExc()
+                    printDBG( 'Host phTitle: '+phTitle )
+                    #printDBG( 'Host online: '+online )
+                    printDBG( 'Host room: '+room )
+                    phUrl = phTitle
+                    if room != 'vip':
+                       x += 1
+                       valTab.append(CDisplayListItem(phTitle2+'   ['+bitrate.upper()+']',phTitle2+'  ('+phTitle+')   '+age+' ['+bitrate.upper()+']',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+                 printDBG( 'Host ile: '+str(x) )
+              except Exception:
+                 printExc() 
+           valTab.append(CDisplayListItem('Next', 'Page: '+str(self.page+1), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))                
+
+           return valTab 
+
+        if 'RUSPORN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://rusporn.tv' 
+           url = 'https://mixporn.ooo/'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'rusporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'toggle">ÐÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð¸', 'ÐÑÐµ ÐÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð¸</a>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, ' <li><a class=', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)[<"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              printDBG( 'Host listsItems phUrl: '  +phUrl )
+              printDBG( 'Host listsItems phTitle: '+phTitle )
+              valTab.append(CDisplayListItem(phTitle,phUrl,CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'RUSPORN-clips', '', phUrl)) 
+           self.SEARCH_proc='RUSPORN-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'RUSPORN-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://rusvidos.tv/poisk/?q=%s' % url.replace(' ','+'), 'RUSPORN-clips')
+           return valTab
+        if 'RUSPORN-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<a class="page current"', '<span class="svg-img">', False)[1]
+           next_page = self.cm.ph.getDataBeetwenMarkers(next, '<a class="arrows" href="', '" >', False)[1]
+           if next_page.startswith('/'): 
+              next_page = 'https://mixporn.ooo' + next_page
+           data = data.split('<li class="item  ">')           
+           if len(data): del data[0]           
+           printDBG('Videok : ' + str(data))
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]              
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if 'svg' in phImage:  phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if 'base64' in phImage:  phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              Time = self.cm.ph.getSearchGroups(item, '''<span>([^>]+?)<''', 1, True)[0] 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time.strip()+']    '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page: 
+              printDBG('Kovi : ' + next_page)
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if 'PORN720' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://porn720.net' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'id="menu-menu', 'class="sub-header', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item)
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phUrl.split('/')[-1],phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORN720-clips', '', phUrl)) 
+           return valTab
+        if 'PORN720-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = re.search('rel="next".*?href="(.*?)"', data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<figure', '</figure>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''clock-o"></i>([^>]+?)<''', 1, True)[0].strip()
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']    '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              phUrl = next.group(1)
+              valTab.append(CDisplayListItem('Next ', 'Page: '+phUrl, CDisplayListItem.TYPE_CATEGORY, [phUrl], name, '', catUrl))                
+           return valTab
+
+        if 'PORNTREX' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.porntrex.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porntrex.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           self.page = 0
+           #printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, 'class="list-categories', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="item"', '</a>')
+           for item in data:
+              #printDBG( 'Host item data: '+str(item) )
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNTREX-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='PORNTREX-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'PORNTREX-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.porntrex.com/search/%s/' % url.replace(' ','+'), 'PORNTREX-clips')
+           return valTab
+        if 'PORNTREX-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           if not '/search/' in url:
+              url = url + '?mode=async&function=get_block&block_id=list_videos_common_videos_list&sort_by=post_date&from=%s' % self.page
+           else:
+              if self.page>1:
+                 url = url + '?mode=async&function=get_block&block_id=list_videos_videos&q=dildo&category_ids=&sort_by=post_date&from_videos=%s&from_albums=%s' % (self.page, self.page)
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porntrex.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<li class="next"><a href="#videos".*?data-parameters="sort_by:post_date;from:([^"^']+?)['"]''', 1, True)[0]
+           if not next:  next = self.cm.ph.getSearchGroups(data, '''<li class="next"><a href="#.*?from_albums:([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="video-', '</li></ul></div>')
+           #printDBG( 'Host2 getResolvedURL data: '+str(data) )
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''fa-clock-o"></i>([^"^']+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': phUrl})
+              except: pass
+              if not '>Private<' in item:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']    '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [url], name, '', 'next'))
+           return valTab
+
+        if 'GLAVMATURES' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://glavmatures.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'glavmatures.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'glavmatures.cookie', 'glavmatures.com', self.defaultParams)
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="tags">', '<div class="footer">', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="tag">', '</div>')
+           phImage = 'https://img.freepik.com/free-photo/studio-shot-natural-mature-woman-with-blonde-hair-white-underwear-looking-aside-while-posing_386185-2047.jpg?w=2000'
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^/^/]+)['"]''', 1, True)[0] 
+              phTitle = phTitle.title()
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'GLAVMATURES-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- POPULAR ---","POPULAR",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'GLAVMATURES-clips',    'https://s9v7j7a4.ssl.hwcdn.net/galleries/full/76/36/d3/7636d3602bec8920c34f976b0aebb7df/11.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- LATEST ---","LATEST",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/?sort_by=post_date'],             'GLAVMATURES-clips',    'https://s9v7j7a4.ssl.hwcdn.net/galleries/full/d7/50/92/d75092b21def27114ed591e75d526fc6/7.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- TOP RATED ---","TOP RATED",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/?sort_by=rating'],              'GLAVMATURES-clips',    'https://s9v7j7a4.ssl.hwcdn.net/galleries/full/12/73/85/127385d7a32618724dbdd34382931f16/8.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- LONGEST ---","LONGEST",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/?sort_by=duration'],             'GLAVMATURES-clips',    'https://s9v7j7a4.ssl.hwcdn.net/galleries/full/46/0e/23/460e23315c02d3970dcaa53643ea92ae/0.jpg', None))
+           self.SEARCH_proc='glavmatures-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        
+        if 'glavmatures-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://glavmatures.com/search/%s/' % url.replace(' ','-'), 'GLAVMATURES-clips')
+           return valTab
+        
+        if 'GLAVMATURES-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'glavmatures.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'glavmatures.cookie', 'glavmatures.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Ujabb adat: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination-next"><a href="', '"><span class="icon-next">', False)[1]
+           printDBG( 'Lekert info: ' +data)
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'id="list_videos', '<div class="pagination">', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb', 'rating')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=["']([^"^']+?)["] class''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]  
+              phTime = self.cm.ph.getSearchGroups(item, '''duration"[>]([^"^']+?)[<]''', 1, True)[0]  
+              printDBG( 'Videolista: '+ phUrl )
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None))
+           if next:
+              next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))    
+           return valTab
+
+        if 'WATCHMYGF' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.watchmygf.me' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'watchmygf.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'watchmygf.cookie', 'watchmygf.me', self.defaultParams)
+           #printDBG( 'Host listsItems data: '+str(data) )
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="next"><a href="', '" data-action', False)[1]
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'categories item">', '<div class="pagination', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'video-box-card', 'box-description')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=["']([^"^']+?)["']>''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=["']([^"^']+?)["'] alt''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'WATCHMYGF-clips', phImage, None)) 
+           valTab.insert(0,CDisplayListItem("--- NEW VIDEOS ---","NEW VIDEOS",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/new/'],             'WATCHMYGF-clips',    'https://cdni.pornpics.com/460/1/203/69330065/69330065_007_ad28.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- LONGEST VIDEOS ---","LONGEST VIDEOS",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/longest/'],              'WATCHMYGF-clips',    'https://cdni.pornpics.com/460/1/205/68271587/68271587_002_1603.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- TOP RATED VIDEOS ---","TOP RATED VIDEOS",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/rated/'],             'WATCHMYGF-clips',    'https://cdni.pornpics.com/460/1/97/20121335/20121335_001_a7e9.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- POPULAR VIDEOS ---","POPULAR VIDEOS",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/popular/'],             'WATCHMYGF-clips',    'https://cdni.pornpics.com/460/1/203/55570985/55570985_013_e332.jpg', None))
+           self.SEARCH_proc='WATCHMYGF-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           if next:
+              if next.startswith('/'): 
+                 next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))
+           return valTab
+        
+        if 'WATCHMYGF-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.watchmygf.me/search/%s/' % url.replace(' ','+'), 'WATCHMYGF-clips')
+           return valTab              
+        
+        if 'WATCHMYGF-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'watchmygf.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'watchmygf.cookie', 'watchmygf.me', self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Ujabb adat: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="next"><a href="', '" data-action', False)[1]
+           if next.startswith('#search'): next = ''
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'video-box-body', '<div class="pagination', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'video-box-card', '</span>', True)
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]  class''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"] class''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^']+?)['"] width''', 1, True)[0]
+              phTime = self.cm.ph.getSearchGroups(item, '''time"[>]([^"^']+?)[<]/div''', 1, True)[0]  
+              #printDBG( 'Videolista: '+ phUrl )
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None))
+           if next:
+              if next.startswith('/'): 
+                 next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))    
+           return valTab
+
+        if 'FILMYPORNO' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.filmyporno.tv' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'filmyporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, '<h2>Kategorie', 'footer-top-col', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'item--channel col', '</div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img\ssrc=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'FILMYPORNO-clips', phImage, phUrl)) 
+           valTab.insert(0,CDisplayListItem("--- NAJDÅUÅ»SZE ---",       "NAJDÅUÅ»SZE",                    CDisplayListItem.TYPE_CATEGORY,["http://www.filmyporno.tv/longest/"], 'FILMYPORNO-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- NAJCZÄÅCIEJ DYSKUTOWANE ---","NAJCZÄÅCIEJ DYSKUTOWANE", CDisplayListItem.TYPE_CATEGORY,["http://www.filmyporno.tv/most-discussed/"], 'FILMYPORNO-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- NAJLEPIEJ OCENIONE ---",     "NAJLEPIEJ OCENIONE",      CDisplayListItem.TYPE_CATEGORY,["http://www.filmyporno.tv/top-rated/"], 'FILMYPORNO-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- NAJPOPULARNIEJSZE ---",      "NAJPOPULARNIEJSZE",       CDisplayListItem.TYPE_CATEGORY,["http://www.filmyporno.tv/most-viewed/"], 'FILMYPORNO-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- NOWE FILMY ---",             "NOWE FILMY",              CDisplayListItem.TYPE_CATEGORY,["http://www.filmyporno.tv/videos/"], 'FILMYPORNO-clips', '',None))
+           self.SEARCH_proc='FILMYPORNO-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'FILMYPORNO-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.filmyporno.tv/search/%s/' % url.replace(' ','+'), 'FILMYPORNO-clips')
+           return valTab  
+        if 'FILMYPORNO-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'filmyporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'rel="next"', '/>', False)[1]
+           next_page = self.cm.ph.getSearchGroups(next_page, '''href=['"]([^"^']+?)['"]''')[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'item-col col', '</div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''time">([^"^']+?)<''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              Time = Time.strip()
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']    '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              url = re.sub('page.+', '', url)
+              valTab.append(CDisplayListItem('Next ', 'Page: '+url+next_page, CDisplayListItem.TYPE_CATEGORY, [url+next_page], name, '', None))                
+           return valTab
+
+        if 'WANKOZ' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.wankoz.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'wankoz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="thumbs-list">', '<div class="heading">', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb">', '</div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^'^"]+)['"].alt''', 1, True)[0]
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^/^/]+)['"]''', 1, True)[0] 
+              phTitle = phTitle.title()
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'WANKOZ-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- MOST POPULAR ---","MOST POPULAR VIDEOS",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular'],             'WANKOZ-clips',    'https://s9v7j7a4.ssl.hwcdn.net/galleries/full/76/36/d3/7636d3602bec8920c34f976b0aebb7df/11.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- LATEST UPDATES ---","RECENTLY ADDED VIDEOS",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/latest-updates'],             'WANKOZ-clips',    'https://s9v7j7a4.ssl.hwcdn.net/galleries/full/d7/50/92/d75092b21def27114ed591e75d526fc6/7.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- TOP RATED ---","TOP RATED VIDEOS",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top-rated'],              'WANKOZ-clips',    'https://s9v7j7a4.ssl.hwcdn.net/galleries/full/12/73/85/127385d7a32618724dbdd34382931f16/8.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- LONGEST ---","LONGEST VIDEOS",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/longest'],             'WANKOZ-clips',    'https://s9v7j7a4.ssl.hwcdn.net/galleries/full/46/0e/23/460e23315c02d3970dcaa53643ea92ae/0.jpg', None))
+           self.SEARCH_proc='WANKOZ-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        
+        if 'WANKOZ-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.wankoz.com/search/?q=%s' % url.replace(' ','+'), 'WANKOZ-clips')
+           return valTab
+        
+        if 'WANKOZ-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'wankoz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='iphone_3_0')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''next".href=['"]([^"^']+)['"].title="Next"''', 1, True)[0].strip() 
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="thumbs-list">', '<div class="heading">', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb"', '<span class="block-fav">')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"].itemprop''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0]
+              printDBG( 'IkonkÃ©p: '+phImage )
+              Time = self.cm.ph.getSearchGroups(item, '''length">([^>]+?)<''', 1, True)[0]
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']    '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, decodeHtml(phImage))) 
+           if next:
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'PORNMAKI' == name:
+           self.MAIN_URL = 'https://pornmaki.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornmaki.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return 
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<h1>Free Porn Categories</h1>', '<div class="ads-block-bottom', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href=', '</a>', True)
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phTitle: 
+                    valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNMAKI-clips', phImage, None)) 
+           valTab.insert(0,CDisplayListItem("--- Newest ---",       "Newest",       CDisplayListItem.TYPE_CATEGORY,["https://pornmaki.com/most-recent/"], 'PORNMAKI-clips', 'https://images.pornmaki.com/actress_img/model113031.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Home ---",       "Home",       CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL], 'PORNMAKI-clips', 'https://images.pornmaki.com/actress_img/model97217.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Random ---",       "Random",       CDisplayListItem.TYPE_CATEGORY,["https://pornmaki.com/random/"], 'PORNMAKI-clips', 'https://images.pornmaki.com/actress_img/model138661.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",       "Top Rated",       CDisplayListItem.TYPE_CATEGORY,["https://pornmaki.com/top-rated/"], 'PORNMAKI-clips', 'https://images.pornmaki.com/actress_img/model43891.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed (Weekly) ---",       "Most Viewed (Weekly)",       CDisplayListItem.TYPE_CATEGORY,["https://pornmaki.com/most-viewed-week/"], 'PORNMAKI-clips', 'https://images.pornmaki.com/actress_img/model128741.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Longest ---",       "Longest",       CDisplayListItem.TYPE_CATEGORY,["https://pornmaki.com/longest/"], 'PORNMAKI-clips', 'https://images.pornmaki.com/actress_img/model19191.jpg',None))
+           self.SEARCH_proc='PORNMAKI-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        
+        if 'PORNMAKI-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://pornmaki.com/search/videos/%s/' % url.replace(' ','-'), 'PORNMAKI-clips')
+           return valTab
+        
+        if 'PORNMAKI-clips' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornmaki.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valtab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'page-next" href="', '">', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="video-box statisticBox ', '</i></span>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''length">([^>]+?)<''', 1, True)[0]
+              Views = self.cm.ph.getSearchGroups(item, '''views">([^>]+?)<''', 1, True)[0]
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,'['+phRuntime+'] '+phTitle+'\n'+ Views,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if url.endswith('html'): 
+                 url = self.cm.ph.getDataBeetwenMarkers(url, 'https', 'page', False)[1]
+                 url = 'https' + url
+              next = url + next
+              printDBG( 'Kovi: '+next )
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))   
+           return valTab
+
+        if 'THUMBZILLA' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.thumbzilla.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           Cats = re.findall('href="(/categories/.*?)".*?click\',\s\'(.*?)\'', data, re.S) 
+           if Cats:
+              for (phUrl, phTitle) in Cats:
+                 phTitle = decodeHtml(phTitle)
+                 if not phTitle == "All": 
+                    valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl],'THUMBZILLA-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem("--- Homemade ---",     "Homemade",      CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/homemade"], 'THUMBZILLA-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- HD Videos ---","HD Videos", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/hd"], 'THUMBZILLA-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular Videos ---",     "Popular Videos",      CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/popular"], 'THUMBZILLA-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Videos ---",     "Top Videos",      CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/top"], 'THUMBZILLA-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Trending ---",     "Trending",      CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/trending"], 'THUMBZILLA-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---",     "Newest",      CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/newest"], 'THUMBZILLA-clips', '',None))
+           self.SEARCH_proc='THUMBZILLA-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'THUMBZILLA-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.thumbzilla.com/tags/%s' % url.replace(' ','+'), 'THUMBZILLA-clips')
+           return valTab          
+        if 'THUMBZILLA-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.thumbzilla.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           phMovies = re.findall('href="(/video/.*?)".*?src="(.*?)".*?"title">(.*?)<.*?"duration">(.*?)<', data, re.S)  
+           if phMovies:
+              for ( phUrl, phImage, phTitle, phRuntime) in phMovies:
+                  if phUrl[:2] == "//":
+                     phUrl = "http:" + phUrl
+                  else:
+                     phUrl = self.MAIN_URL + phUrl
+                  if phImage[:2] == "//":
+                     phImage = "http:" + phImage
+                  valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           match = re.findall('"next" href="(.*?)"', data, re.S)
+           if match:
+              phUrl = match[0]
+              valTab.append(CDisplayListItem('Next', 'Page: '+phUrl, CDisplayListItem.TYPE_CATEGORY, [phUrl], name, '', None))
+           self.MAIN_URL = '' 
+           return valTab
+
+        if 'ADULTTV' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.adulttvlive.net' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'adulttv.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'adulttv.cookie', 'adulttv.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data1: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''<link\s*rel=['"]next['"]\s*href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phImage.startswith('/'): phImage = 'http://www.adulttvlive.net' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = 'http://www.adulttvlive.net' + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           #if catUrl == None:
+           #   valTab.insert(0,CDisplayListItem('BSX24','BSX24',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', 'http://publish.thewebstream.co:1935/bsx24/livestream/playlist.m3u8', 0)], 0, 'http://ero-tv.org/wp-content/uploads/2014/08/babestation24.gif', None)) 
+           #   valTab.insert(0,CDisplayListItem('PassionXXX','PassionXXX',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', 'http://publish.thewebstream.co:1935/ppv/_definst_/rampanttv_passionxxx/playlist.m3u8', 0)], 0, 'https://pbs.twimg.com/profile_images/1001362356264464384/fQVOhNLk_400x400.jpg', None)) 
+
+           if next_page:
+              valTab.append(CDisplayListItem('Next', 'Page: '+next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', 'next'))
+           return valTab
+
+        if 'YUVUTU' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.yuvutu.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           self.page = 1
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="yv-element', 'videos</span>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phTitle = re.sub(' - .+', '', phTitle)
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'YUVUTU-clips', phImage, None)) 
+           return valTab
+        if 'YUVUTU-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           self.page += 1
+           phMovies = re.findall('class="thumb-image">.*?href="(.*?)".*?src="(.*?)".*?title="(.*?)"', data, re.S)  
+           if phMovies:
+              for ( phUrl, phImage, phTitle ) in phMovies:
+                  phTitle = phTitle.replace(' - ','')
+                  valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', self.MAIN_URL+phUrl, 1)], 0, phImage, None)) 
+           url = re.sub('page.+', '', url)
+           valTab.append(CDisplayListItem('Next', 'Page: '+str(self.page), CDisplayListItem.TYPE_CATEGORY, [url+'page/'+str(self.page)+'/'], name, '', None))
+           return valTab
+
+        if 'PORNICOM' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://pornicom.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornicom.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valtab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="items-list">', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="item">', 'quantity')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNICOM-clips', phImage, None))
+           valTab.insert(0,CDisplayListItem("--- Most popular ---", "Most popular", CDisplayListItem.TYPE_CATEGORY,['http://www.pornicom.com/most-popular/'], 'PORNICOM-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest updates ---", "Latest updates", CDisplayListItem.TYPE_CATEGORY,['http://www.pornicom.com/latest-updates/'], 'PORNICOM-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top rated ---", "Top rated", CDisplayListItem.TYPE_CATEGORY,['http://www.pornicom.com/top-rated/'], 'PORNICOM-clips', '',None))
+           self.SEARCH_proc='pornicom-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornicom-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.pornicom.com/search/?q=%s' % url.replace(' ','+'), 'PORNICOM-clips')
+           return valTab
+        if 'PORNICOM-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://pornicom.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornicom.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valtab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', '</div>', False)[1]
+           next_page = self.cm.ph.getDataBeetwenMarkers(next_page, '</span>', 'Page', False)[1]
+           next_page = self.cm.ph.getSearchGroups(next_page, '''href=['"]([^"^']+?)['"]''')[0] 
+           if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="link"', 'views-info')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''<img\sclass="thumb"\ssrc=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''"duration">([^"^']+?)<''', 1, True)[0].strip()
+              if not Time: Time = self.cm.ph.getSearchGroups(item, '''"duration" content=['"]([^"^']+?)['"]''', 1, True)[0].strip()
+              phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              valTab.append(CDisplayListItem(phTitle,'['+Time+']   '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page: 
+              numer = next_page.split('/')[-2]
+              valTab.append(CDisplayListItem('Next', 'Next '+numer, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if 'SEXVID' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.sexvid.xxx' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sexvid.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host getResolvedURL data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'title="Video Categories">', '<div class="intro">', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a title', '</a>', True)
+           printDBG( 'Ãsszes elem: '+str(data ))
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''cat"[>]([^"^']+?)[<]/span''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=["']([^"^']+?)['"] alt''', 1, True)[0]
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'SEXVID-clips', phImage, None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---", "Most Viewed", CDisplayListItem.TYPE_CATEGORY,['https://www.sexvid.xxx/p/'], 'SEXVID-clips', 'https://cdn1.sexvid.xxx/contents/photos/sources/30000/30505/478965.jpg' ,None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---", "Newest", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/p/date/'], 'SEXVID-clips', 'https://cdn1.sexvid.xxx/contents/photos/sources/5000/5837/93692.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Longest ---", "Longest", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/p/duration/'], 'SEXVID-clips', 'https://cdn1.sexvid.xxx/contents/photos/sources/31000/31000/487283.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---", "Top Rated", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/p/rating/'], 'SEXVID-clips', 'https://cdn1.sexvid.xxx/contents/photos/sources/0/465/8980.jpg',None))
+           self.SEARCH_proc='SEXVID-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        if 'SEXVID-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.sexvid.xxx/s/%s/' % url.replace(' ','+'), 'SEXVID-clips')
+           return valTab
+        if 'SEXVID-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sexvid.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<link rel="next" href="', '">', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href=', '</a>', True)
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=["']([^"]+?)["] class="thumb''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=["']([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=["']([^"^']+?)['"] alt''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''time"></i><span>([^"^']+?)</span''', 1, True)[0] 
+              if phImage:
+                 valTab.append(CDisplayListItem(phTitle,'['+Time+']   '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page: 
+              number = next_page.split('/')[-2]
+              valTab.append(CDisplayListItem('Next', 'Next '+number, CDisplayListItem.TYPE_CATEGORY, [next_page], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))
+           return valTab
+
+        if 'PERFECTGIRLS' == name:
+           self.past_number = '1'
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.perfectgirls.xxx' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornomenge.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'perfectgirls.cookie', 'perfectgirls.xxx', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="additional_list categories">', '</ul>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="additional_list__item">', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''"[>]([^"^']+?)[(]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = phUrl + '/1'
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PERFECTGIRLS-clips', '', None))
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---", "Pornstars", CDisplayListItem.TYPE_CATEGORY,['https://www.perfectgirls.xxx/pornstars/'], 'PERFECTGIRLS-Pornstars', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Videos ---", "Top Videos", CDisplayListItem.TYPE_CATEGORY,['https://www.perfectgirls.xxx/'], 'PERFECTGIRLS-clips', '',None))
+           self.SEARCH_proc='PERFECTGIRLS-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        
+        if 'PERFECTGIRLS-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.perfectgirls.xxx/search/%s' % url.replace(' ','+'), 'PERFECTGIRLS-clips')
+           return valTab
+
+        if 'PERFECTGIRLS-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'perfectgirls.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'perfectgirls.cookie', 'perfectgirls.xxx', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           printDBG('Site:' + url)
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_number = self.cm.ph.getDataBeetwenMarkers(data, 'pagination__next">', '</ul>', False)[1]
+           next_number = self.cm.ph.getDataBeetwenMarkers(next_number, '<a class="btn_wrapper__btn" href="', '">Next</a></li>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="list__item_link"', '</a></div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''time>([^"^']+?)</t''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']   '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_number:
+              if len(next_number)==0: next_page= url + '/' + next_number
+              if len(next_number)==1:
+                 url = url[:-1]
+                 url = url[:-1]
+              if len(next_number)==2:
+                 url = url[:-1]
+                 url = url[:-1]
+                 url = url[:-1]
+              if len(next_number)==3:
+                 url = url[:-1]
+                 url = url[:-1]
+                 url = url[:-1]
+                 url = url[:-1]
+              next_page = url + '/' + next_number
+              valTab.append(CDisplayListItem('Next Page', 'Next Page: '+next_number, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+        
+        if 'PERFECTGIRLS-Pornstars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'perfectgirls.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'perfectgirls.cookie', 'perfectgirls.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Pornstars data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<h2 id="pornstars-a', '</div> <!-- / ', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>', False)
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''/"[>]([^"^']+?)[<]/''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = 'http://pbs.twimg.com/profile_images/1471499336068435975/aRYtlVh2.jpg' 
+              if not phTitle: phTitle = '*** Next Letter***'
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PERFECTGIRLS-clips', '', None))
+           return valTab
+
+        if 'TUBEPORNCLASSIC' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://tubepornclassic.com' 
+           url = 'https://tubepornclassic.com/api/json/categories/14400/str.all.json'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tubepornclassic.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'tubepornclassic.cookie', 'tubepornclassic.com', self.defaultParams)
+           if not sts: return valTab
+           self.page=1
+           printDBG( 'Host data:%s' % data )
+           try:
+              result = byteify(simplejson.loads(data))
+              for item in result["categories"]:
+                 phUrl = 'https://tubepornclassic.com/api/json/videos/86400/str/latest-updates/60/categories.%s.%s.all..day.json'  % (str(item["dir"]), str(self.page))
+                 phTitle = str(item["title"])
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'TUBEPORNCLASSIC-clips', '', None)) 
+           except Exception:
+              printExc()
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='TUBEPORNCLASSIC-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'TUBEPORNCLASSIC-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://tubepornclassic.com/api/videos.php?params=86400/str/relevance/60/search..1.all..day&s=%s' % url.replace(' ','+'), 'TUBEPORNCLASSIC-clips')
+           return valTab
+        if 'TUBEPORNCLASSIC-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://tubepornclassic.com' 
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           printDBG( 'Host listsItems cat-url: '+str(catUrl) )
+           next = url
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tubepornclassic.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'tubepornclassic.cookie', 'tubepornclassic.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              for item in result["videos"]:
+                 phTitle = str(item["title"])
+                 video_id = str(item["video_id"])
+                 scr = str(item["scr"])
+                 phUrl = "https://tubepornclassic.com/api/videofile.php?video_id=%s&lifetime=8640000" % video_id
+                 phTime = str(item["duration"])
+                 added = str(item["post_date"])
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle)+'\nAdded: '+added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, scr, None)) 
+           except Exception:
+              printExc()
+           next_page = url.replace('.'+str(self.page)+'.','.'+str(self.page+1)+'.')
+           valTab.append(CDisplayListItem('Next', 'Page: '+str(self.page+1), CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', 'next'))                
+           return valTab
+
+        if 'KOLOPORNO' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.koloporno.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'koloporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'koloporno.cookie', 'koloporno.com', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="wrap-box-escena">', '</h4>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''">([^"^']+?)</a>''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'KOLOPORNO-clips', '', None))
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---", "Pornstars", CDisplayListItem.TYPE_CATEGORY,['https://www.koloporno.com/pornstars/'], 'KOLOPORNO-Pornostars', '',None))
+           valTab.insert(0,CDisplayListItem("--- Najlepsze Filmy ---", "Najlepsze Filmy", CDisplayListItem.TYPE_CATEGORY,['https://www.koloporno.com/najlepiej-oceniane/m/'], 'KOLOPORNO-clips', '',None))
+           self.SEARCH_proc='KOLOPORNO-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'KOLOPORNO-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.koloporno.com/search/?q=%s' % url.replace(' ','+'), 'KOLOPORNO-clips')
+           return valTab
+        if 'KOLOPORNO-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.koloporno.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'koloporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'koloporno.cookie', 'koloporno.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''data-ajax-url=['"]([^"^']+?)['"]''')[0] 
+           if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="wrap-box-escena">', 'class="votar-escena')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duracion">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']   '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('aHR'): next_page = urllib.unquote(base64.b64decode(next_page))
+              if '/?page=0' in next_page: next_page = next_page.replace ('page=0','page=2')
+              numer = next_page.split('=')[-1]
+              valTab.append(CDisplayListItem('Next', 'Next '+numer, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+        
+        if 'KOLOPORNO-Pornostars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'koloporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'koloporno.cookie', 'koloporno.com', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'rel="next"', '/>', False)[1]
+           next_page = self.cm.ph.getSearchGroups(next_page, '''href=['"]([^"^']+?)['"]''')[0] 
+           if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="wrap-box-chica">', 'class="clear"></div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duracion">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'KOLOPORNO-clips', '', None))
+           if next_page: 
+              numer = next_page.split('/')[-1]
+              valTab.append(CDisplayListItem('Next', 'Next '+numer, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if 'MOTHERLESS' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://motherless.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'motherless.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'motherless.cookie', 'motherless.com', self.defaultParams)
+           if not sts: return ''
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'gories-tabs-container">', '<div class="clear-both"></div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li data', ' </li>')
+           printDBG( 'Motherless data: '+ str(data) )
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''porn[/]([^"^']+?)[/]''', 1, True)[0]
+              phTitle = phTitle.capitalize()              
+              phImage = 'https://cdn5-images.motherlessmedia.com/images/000168A.jpg'
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'MOTHERLESS-clips', phImage, None))
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Being Watched ---", "Being Watched", CDisplayListItem.TYPE_CATEGORY,['https://motherless.com/live/videos'], 'MOTHERLESS-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---", "Most Viewed", CDisplayListItem.TYPE_CATEGORY,['https://motherless.com/videos/viewed'], 'MOTHERLESS-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---", "Top Rated", CDisplayListItem.TYPE_CATEGORY,['https://motherless.com/videos/favorited'], 'MOTHERLESS-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular ---", "Popular", CDisplayListItem.TYPE_CATEGORY,['https://motherless.com/videos/popular'], 'MOTHERLESS-clips', '',None))
+           self.SEARCH_proc='MOTHERLESS-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'MOTHERLESS-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://motherless.com/search?term=%s&type=videos&range=0&size=0&sort=relevance' % url.replace(' ','+'), 'MOTHERLESS-clips')
+           return valTab
+        if 'MOTHERLESS-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://motherless.com' 
+           sts, data = self.getPage(url, 'motherless.cookie', 'motherless.com', self.defaultParams)
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '</span><a href="', '" class="pop"', False)[1]
+           if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'thumb-container video', '"uploader">')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=["]([^;]+?)["]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"] title''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''" src=['"]([^"^']+?)['"]''', 1, True)[0]
+              Time = self.cm.ph.getSearchGroups(item, '''size">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phTitle and phUrl:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']   '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page: 
+              number = next_page.split('/')[-1]
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if 'PLAYVIDS' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.playvids.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'playvids.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'playvids.cookie', 'playvids.com', self.defaultParams)
+           if not sts: return ''
+           if 'Rate Limit Exceeded' in data:
+              msg = _("Last error:\n%s" % 'Rate Limit Exceeded')
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="category-list', 'card-promotion', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = phUrl.split('/')[-1].replace('-',' ').replace('%20',' ').replace('%26','-')
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace(' ','%20') 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PLAYVIDS-clips', phImage, None))
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Pornstar ---", "Pornstar", CDisplayListItem.TYPE_CATEGORY,['https://www.playvids.com/pornstars&jsclick=1'], 'PLAYVIDS-pornstar', '',None))
+           valTab.insert(0,CDisplayListItem("--- Channels ---", "Channels", CDisplayListItem.TYPE_CATEGORY,['https://www.playvids.com/channels&jsclick=1'], 'PLAYVIDS-channels', '',None))
+           valTab.insert(0,CDisplayListItem("--- Trending ---", "Trending", CDisplayListItem.TYPE_CATEGORY,['https://www.playvids.com/Trending-Porn'], 'PLAYVIDS-clips', '',None))
+           self.SEARCH_proc='PLAYVIDS-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'PLAYVIDS-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.playvids.com/sq?q=%s&jsclick=1&content=straight' % url.replace(' ','+'), 'PLAYVIDS-clips')
+           return valTab
+        if 'PLAYVIDS-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.playvids.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'playvids.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'playvids.cookie', 'playvids.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'class="pagination"', '</ul>', False)[1]
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           if catUrl == 'channels':
+              data = data.split('<div id=')
+           else:
+              data = data.split('<div class="card thumbs_rotate')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace(' ','%20') 
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^"^']+?)<''', 1, True)[0] 
+              added = self.cm.ph.getSearchGroups(item, '''addition">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phTitle and Time:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']  '+decodeHtml(phTitle)+'\n'+added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page: 
+              match = re.compile('href="(.*?)"').findall(next_page)
+              if match:
+                 next_page = self.MAIN_URL+match[-1]
+                 printDBG( 'Host listsItems next_page: '  +next_page )
+                 valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+        if 'PLAYVIDS-channels' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.playvids.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'playvids.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'playvids.cookie', 'playvids.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'class="pagination"', '</ul>', False)[1]
+           #data = self.cm.ph.getDataBeetwenMarkers(data, 'Popular channels', 'pagination', False)[1]
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="card">', '</div>')
+           data = data.split('<div class="card">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('%20',' ').replace('%26','-') 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace(' ','%20') 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PLAYVIDS-clips', phImage, 'channels'))
+           if next_page: 
+              match = re.compile('href="(.*?)"').findall(next_page)
+              if match:
+                 next_page = self.MAIN_URL+match[-1]
+                 printDBG( 'Host listsItems next_page: '  +next_page )
+                 valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+        if 'PLAYVIDS-pornstar' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.playvids.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'playvids.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'playvids.cookie', 'playvids.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'class="pagination"', '</ul>', False)[1]
+           #data = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="stars_list">', '</ul>', False)[1]
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           data = data.split('<div class="card">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = phUrl.split('/')[-1].replace('-',' ')
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace(' ','%20') 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PLAYVIDS-clips', phImage, None))
+           if next_page: 
+              match = re.compile('href="(.*?)"').findall(next_page)
+              if match:
+                 next_page = self.MAIN_URL+match[-1]
+                 printDBG( 'Host listsItems next_page: '  +next_page )
+                 valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if '4TUBE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.4tube.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), '4tube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '>Categories<', '>Channels<', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].lower().replace('sex movies','')
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'4TUBE-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Channels ---","Channels",   CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/channels"]  ,         '4TUBE-channels', '',None))
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---","Pornstars", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/pornstars"],          '4TUBE-channels','',None))
+           valTab.insert(0,CDisplayListItem("--- Most viewed ---","Most viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/videos?sort=views&time=month"],             '4TUBE-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Highest Rated ---","Highest Rated", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/videos?sort=rating&time=month"],             '4TUBE-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Lastest ---","Lastest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/videos"],             '4TUBE-clips',    '',None))
+           self.SEARCH_proc='4TUBE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if '4TUBE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search?q=%s' % url.replace(' ','+'), '4TUBE-clips')
+           return valTab              
+        if '4TUBE-channels' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), '4tube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''<link\srel="next"\shref=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="thumb-link"', '</div></a></div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phVid = self.cm.ph.getSearchGroups(item, '''icon-video"></i>([^"^']+?)<''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img\sdata-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,'[Video: '+phVid+']   '+phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl], '4TUBE-clips', phImage, None)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if '4TUBE-clips' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), '4tube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.MAIN_URL = url.split('com/')[0]+'com'
+           next_page = self.cm.ph.getSearchGroups(data, '''<link\srel="next"\shref=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="col thumb_video"', '</div></div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''img data-master=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''"duration-top">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'HomeMoviesTube' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.homemoviestube.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'homemoviestube.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = data.split('class="category-item ')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'HomeMoviesTube-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/longest/"],          'HomeMoviesTube-clips','',None))
+           valTab.insert(0,CDisplayListItem("--- Most viewed ---","Most viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/most-viewed/"],             'HomeMoviesTube-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/top-rated/"],             'HomeMoviesTube-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/most-recent/"],             'HomeMoviesTube-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest Videos ---","Latest Videos",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'HomeMoviesTube-clips',    '',None))
+           self.SEARCH_proc='HomeMoviesTube-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'HomeMoviesTube-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search/%s/page1.html' % url.replace(' ','+'), 'HomeMoviesTube-clips')
+           return valTab              
+        if 'HomeMoviesTube-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.homemoviestube.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'homemoviestube.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''<li\sclass='next'><a href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = data.split('class="film-item ')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0].replace(' ','%20')
+              phRuntime = self.cm.ph.getSearchGroups(item, '''film-time">([^"^']+?)<''', 1, True)[0]
+              added = self.cm.ph.getSearchGroups(item, '''"stat-added">([^"^']+?)<''', 1, True)[0] 
+              views = self.cm.ph.getSearchGroups(item, '''views">([^>]+?)<''', 1, True)[0].strip()
+              rated = self.cm.ph.getSearchGroups(item, '''rated">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phTitle:   
+                 valTab.append(CDisplayListItem(phTitle,'['+phRuntime+']  '+phTitle+'\n'+views+'\n'+'Rated: '+rated,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('page'): next_page = '/' + next_page
+              next_page = re.sub('page.+', '', url)+next_page
+              valTab.append(CDisplayListItem(_("Next page"), next_page.split('/')[-1].replace('.html',''), CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'MOVIEFAP' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.moviefap.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'moviefap.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           url = 'https://www.moviefap.com/categories/'
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'Categories</h1>', '</ul>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:   
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'MOVIEFAP-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,["https://www.moviefap.com/browse/?category=mr&page="],             'MOVIEFAP-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated", CDisplayListItem.TYPE_CATEGORY,["https://www.moviefap.com/browse/?category=tr&page="],             'MOVIEFAP-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Being Watched ---","Being Watched",     CDisplayListItem.TYPE_CATEGORY,["https://www.moviefap.com/browse/?category=bw&page="],             'MOVIEFAP-clips',    '',None))
+           self.SEARCH_proc='MOVIEFAP-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'MOVIEFAP-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search/%s' % url.replace(' ','+'), 'MOVIEFAP-clips')
+           return valTab              
+        if 'MOVIEFAP-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.moviefap.com'
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'class="current"', 'next', False)[1]
+           next_page = self.cm.ph.getSearchGroups(next, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="video', '</div></div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img\ssrc=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phRuntime = self.cm.ph.getSearchGroups(item, '''"videoleft">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,'['+phRuntime+']  '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'yourporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://sxyprn.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'yourporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, "<a class='tdn'", '</a>')
+           for item in data:
+              #printDBG( 'Host listsItems item: '+str(item) )
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''>#([^#]+?)<''', 1, True)[0]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = 'https://sxyprn.com' + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'yourporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Viewed ---","Top Viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/popular/top-viewed.html"],             'yourporn-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/popular/top-rated.html"],             'yourporn-clips',    '',None))
+           self.SEARCH_proc='yourporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'yourporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://sxyprn.com/%s.html' % url.replace(' ','+'), 'yourporn-clips')
+           return valTab              
+        if 'yourporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://sxyprn.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'yourporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           next_page = self.cm.ph.getSearchGroups(data, '''<link rel='next' href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           if not next_page:
+              next_page = self.cm.ph.getSearchGroups(data, '''sel'>.</div></a><a href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = data.split('data-postid=')
+           for item in data:
+              #printDBG( 'Host listsItems item: '+str(item) )
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/post/[^"^']+?)['"]''', 1, True)[0] 
+              if not phUrl: phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](http[^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"](//[^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''html\'\stitle=['"]([^"^']+?)['"]''', 1, True)[0]
+              printDBG( 'Host phTitle1: '+phTitle )
+              if len(phTitle)<4: phTitle = self.cm.ph.getSearchGroups(item, '''data-title=['"]([^"^'^{]+?)['"}]''', 1, True)[0]
+              if len(phTitle)<4: phTitle = self.cm.ph.getSearchGroups(item, '''class=\'tdn\'\stitle=['"]([^"^'^{]+?)['"}]''', 1, True)[0]
+              printDBG( 'Host phTitle2: '+phTitle )
+              if ' porn blog' in phTitle or len(phTitle)<4: phTitle = self.cm.ph.getSearchGroups(item, '''blog">([^"^']+?)<''', 1, True)[0] 
+              printDBG( 'Host phTitle3: '+phTitle )
+              if len(phTitle)<4: phTitle = self.cm.ph.getSearchGroups(item, '''title\'>([^>]+?)<''', 1, True)[0]
+              printDBG( 'Host phTitle4: '+phTitle )
+              if len(phTitle)<4: phTitle = self.cm.ph.getSearchGroups(item, '''text_el">([^>]+?)<''', 1, True)[0]
+              printDBG( 'Host phTitle5: '+phTitle )
+              #if len(phTitle)<4: phTitle = 'No Title'
+              phRuntime = self.cm.ph.getSearchGroups(item, '''>(\d\d:\d\d)<''', 1, True)[0] 
+              if not phRuntime: phRuntime = self.cm.ph.getSearchGroups(item, '''>(\d\d:\d\d:\d\d)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = 'https://sxyprn.com' + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              phTitle = phTitle.replace('\n','')
+              Title = phTitle[:95].split('#')[0]
+              if 'External Link' in item:
+                 phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https?://streamtape[^"^']+?)['"]''', 1, True)[0]
+                 if not phUrl:
+                    phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https?://[^"^']+?)['"]''', 1, True)[0]
+                 if (phUrl.startswith("https://doodstream") and len(phUrl) > 37) or phUrl.startswith("https://rapidgator") or phUrl.startswith("https://streamhub.to"):
+                    phUrl = ''
+                 phRuntime = 'External Link'
+                 Title = re.sub(r'http(.*?)mp4', '', Title)
+                 Title = re.sub(r'http(.*?) ', '', Title)
+              if 'ddownload' in phUrl:
+                 continue
+              if phRuntime=='': continue 
+              printDBG( 'Host phTitle6: '+phTitle )
+              printDBG( 'Host phUrl: '+phUrl )
+              printDBG( 'Host phImage: '+phImage )
+              if phUrl:
+                 valTab.append(CDisplayListItem(decodeHtml(Title),'['+phRuntime+']  '+decodeHtml(phTitle[:95]),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))               
+           return valTab
+
+        if 'freeomovie' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.freeomovie.to/'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'freeomovie.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage4k(url, 'freeomovie.cookie', 'freeomovie.to', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'Categories<', '</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'freeomovie-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['https://www.freeomovie.to'],             'freeomovie-clips',    '',None))
+           self.SEARCH_proc='freeomovie-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'freeomovie-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.freeomovie.to/?s=%s' % url.replace(' ','+'), 'freeomovie-clips')
+           return valTab              
+        if 'freeomovie-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.freeomovie.to/'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'freeomovie.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage4k(url, 'freeomovie.cookie', 'freeomovie.to', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           next_page = self.cm.ph.getSearchGroups(data, '''<link\s*rel=['"]next['"]\s*href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="boxtitle">', 'class="metargt">')
+           for item in data:
+              #printDBG( 'Host listsItems item: '+str(item) )
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [ phUrl], 'freeomovie-serwer', phImage, phImage)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if 'freeomovie-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'freeomovie.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage4k(url, 'freeomovie.cookie', 'freeomovie.to', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           Title = self.cm.ph.getSearchGroups(data, '''"headline":['"]([^"^']+?)['"&]''', 1, True)[0] 
+           if not Title: Title = self.cm.ph.getSearchGroups(data, '''<title>([^>]+?)<''', 1, True)[0]
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div id="videocont"', '</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           printDBG( 'Elemek: '+str(data) )
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''(http[^"^']+?)['"&]''', 1, True)[0] 
+              printDBG( 'Elso trukk: '+ phUrl )
+              phTitle = phUrl.split('/')[2]
+              printDBG( 'harmadik trukk: '+ phTitle )
+              if phTitle=='': phTitle=phUrl
+              printDBG( 'Ez a vege:: '+ phUrl )
+              phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+              printDBG( 'Parser utan: '+ phUrl )
+              if not 'filecrypt' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(Title)+' > '+phTitle,decodeHtml(Title)+' > '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, catUrl, None)) 
+
+        if 'KATESTUBE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.katestube.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'katestube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, 'class="thumbs-list">', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb">', '</div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'KATESTUBE-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,['https://www.katestube.com/most-popular/'],             'KATESTUBE-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['https://www.katestube.com/top-rated/'],             'KATESTUBE-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest ---","Latest",     CDisplayListItem.TYPE_CATEGORY,['https://www.katestube.com/latest-updates/'],             'KATESTUBE-clips',    '',None))
+           self.SEARCH_proc='KATESTUBE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'KATESTUBE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.katestube.com/search/?q=%s' % url.replace(' ','+'), 'KATESTUBE-clips')
+           return valTab              
+        if 'KATESTUBE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'katestube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = ph.findall(data, '<a data=', 'Next') 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="thumb"', '</div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''<img\ssrc=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''duration" class="length">([^"^']+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(phTitle,'['+phTime+']  '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              next = self.cm.ph.getSearchGroups(next_page[-1], '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if next.startswith('/'): next = 'https://www.katestube.com' + next
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'ZBIORNIKMINI' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://mini.zbiornik.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornikmini.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '<div class="collapse navbar-collapse" id="photos-menu">', '</div>', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<a href=', '</a>')
+           for item in data2:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              if phUrl.startswith('/'): phUrl = 'https://mini.zbiornik.com' + phUrl
+              printDBG( 'Host phTitle: '+phTitle )
+              printDBG( 'Host phUrl: '+phUrl )
+              if len(phUrl)>3:
+                 if phTitle<>'2004' and phTitle<>'2005' and phTitle<>'2006':
+                    valTab.append(CDisplayListItem(phTitle,phUrl.split('/')[-1],     CDisplayListItem.TYPE_CATEGORY,[phUrl],'ZBIORNIKMINI-filmy','https://static.zbiornik.com/upimg/0160d9c44a354d20e81f0e6df5fe832e.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Ranking ---","Ranking",     CDisplayListItem.TYPE_CATEGORY,['https://mini.zbiornik.com/ludzie/ranking'],             'ZBIORNIKMINI-ranking',    '',None))
+           valTab.insert(0,CDisplayListItem("--- WyÅwietl profile ---","WyÅwietl profile",     CDisplayListItem.TYPE_CATEGORY,['https://mini.zbiornik.com/ludzie/szukaj/0,1,1,1,0,1:0:0:0:18:50:2:0:0:1:0'],             'ZBIORNIKMINI-szukaj',    '',None))
+           data2 = None
+           return valTab    
+        if 'ZBIORNIKMINI-szukaj' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornikmini.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="pager">', '</ul>', False)[1]
+           if next_page:
+              next_page = re.compile('href="(.*?)"').findall(next_page)
+              if next_page[-1].startswith('/'): next_page = 'https://mini.zbiornik.com' + next_page[-1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="search-profile-box">', '</h5>')
+           for item in data:
+              phImage = self.cm.ph.getSearchGroups(item, '''url\(['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?filmy)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              if phUrl.startswith('/'): phUrl = 'https://mini.zbiornik.com' + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl], 'ZBIORNIKMINI-filmy', phImage, None)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))  
+           return valTab
+        if 'ZBIORNIKMINI-ranking' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornikmini.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="pager">', '</ul>', False)[1]
+           if next_page:
+              next_page = re.compile('href="(.*?)"').findall(next_page)
+              if next_page[-1].startswith('/'): next_page = 'https://mini.zbiornik.com' + next_page[-1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="panel-body">', '</h3>')
+           for item in data:
+              phImage = self.cm.ph.getSearchGroups(item, '''url\(['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              if phUrl.startswith('/'): phUrl = 'https://mini.zbiornik.com' + phUrl +'/filmy'
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl], 'ZBIORNIKMINI-filmy', phImage, None)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))  
+           return valTab
+        if 'ZBIORNIKMINI-filmy' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornikmini.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="pager">', '</ul>', False)[1]
+           if next_page:
+              next_page = re.compile('href="(.*?)"').findall(next_page)
+              if next_page[-1].startswith('/'): next_page = 'https://mini.zbiornik.com' + next_page[-1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href="/film/', '</a></div>    </div>')
+           if not data2: data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href="/film/', '</a>')
+           for item in data2:
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)\n''', 1, True)[0]  
+              exTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)Widoczne''', 1, True)[0]  
+              Name = re.compile('cropped-info"><a href="/(.*?)"').findall(item)
+              if Name: 
+                 Name = Name[-1]
+              else:
+                 Name = ''
+              if phUrl.startswith('/'): phUrl = 'https://mini.zbiornik.com' + phUrl
+              if phTitle<>'#01':
+                 valTab.append(CDisplayListItem(Name+' - '+decodeHtml(phTitle),Name+' - '+decodeHtml(exTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+                 if Name != '' and config.plugins.iptvplayer.xxxzbiornik.value:
+                    valTab.append(CDisplayListItem(Name, Name, CDisplayListItem.TYPE_CATEGORY, ['https://mini.zbiornik.com/' +Name+'/filmy'], name, '', None))  
+                    valTab.append(CDisplayListItem(Name+' fotki', Name, CDisplayListItem.TYPE_CATEGORY, ['https://mini.zbiornik.com/' +Name+'/zdjecia'], 'ZBIORNIKMINI-fotki', '', None))  
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))  
+           data2 = None
+           return valTab
+        if 'ZBIORNIKMINI-fotki' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornikmini.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="pager">', '</ul>', False)[1]
+           if next_page:
+              next_page = re.compile('href="(.*?)"').findall(next_page)
+              if next_page[-1].startswith('/'): next_page = 'https://mini.zbiornik.com' + next_page[-1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="cropped-wrap">', '</div>')
+           if not data2: data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href="/film/', '</a>')
+           for item in data2:
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)\n''', 1, True)[0]  
+              exTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)Widoczne''', 1, True)[0]  
+              Name = re.compile('cropped-info"><a href="/(.*?)"').findall(item)
+              if Name: 
+                 Name = Name[-1]
+              else:
+                 Name = ''
+              if phUrl.startswith('/'): phUrl = 'https://mini.zbiornik.com' + phUrl
+              if phTitle<>'#01':
+                 valTab.append(CDisplayListItem(phTitle, phTitle,CDisplayListItem.TYPE_PICTURE, [CUrlItem('', phImage, 0)], 0, phImage, None)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))  
+           data2 = None
+           return valTab
+
+        if 'pornone' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://pornone.com/'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornone.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'pagebase="categories/', 'var distance', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<a href', '</a>', True)
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''category.([^>]+?)" data''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phUrl and phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'pornone-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,['http://www.pornone.com/longest/'],             'pornone-clips',    'https://cdni.pornpics.com/1280/1/292/15828683/15828683_014_9a3b.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Most Votes ---","Most Votes",     CDisplayListItem.TYPE_CATEGORY,['http://www.pornone.com/votes/'],             'pornone-clips',    'https://cdni.pornpics.com/1280/7/154/33717710/33717710_008_ec04.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Most Comments ---","Most Comments",     CDisplayListItem.TYPE_CATEGORY,['http://www.pornone.com/comments/'],             'pornone-clips',    'https://cdni.pornpics.com/1280/7/589/47394188/47394188_007_daf3.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Most Favorited ---","Most Favorited",     CDisplayListItem.TYPE_CATEGORY,['http://www.pornone.com/favorites/'],             'pornone-clips',    'https://cdni.pornpics.com/1280/7/26/50917530/50917530_015_3a92.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,['http://www.pornone.com/views/'],             'pornone-clips',    'https://cdni.pornpics.com/1280/1/135/47343437/47343437_003_b60d.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['http://www.pornone.com/rating/'],             'pornone-clips',    'https://cdni.pornpics.com/1280/1/147/17976797/17976797_006_571d.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['http://www.pornone.com/newest/'],             'pornone-clips',    'https://cdni.pornpics.com/1280/7/541/62271429/62271429_019_bc26.jpg',None))
+           self.SEARCH_proc='pornone-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        if 'pornone-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://pornone.com/search?q=%s' % url.replace(' ','+'), 'pornone-clips')
+           return valTab              
+        if 'pornone-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornone.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''</ul><a href=['"]([^"^']+?)['"].title="Next Page"''', 1, True)[0] 
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'data-id="All"', '<nav class="hidden md', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href', '</a>', True)
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''<img src=['"](h[^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''normal "[>]([^"^']+?)[<]/div''', 1, True)[0].replace("&apos;","'")
+              if not phTitle:
+                 phTitle = self.cm.ph.getSearchGroups(item, '''.jpg.+?alt=["']([^"^']+?)["']''', 1, True)[0].replace("&apos;","'")
+              phTime = self.cm.ph.getSearchGroups(item, '''svg">([^"^']+?)<''', 1, True)[0].strip()
+              if not phTime:
+                 phTime = self.cm.ph.getSearchGroups(item, '''opacity-50">([^"^']+?)</span> </span>''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://pornone.com' + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next: 
+              if next.startswith('/'): next = 'https://pornone.com' + next
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))                
+           return valTab
+
+        if 'zbporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://zbporn.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Nyers adatok: '+data )
+           data1 = self.cm.ph.getDataBeetwenMarkers(data, '<h1>Categories Alphabetically</h1>', '<div class="desktop-title-centered">', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data1, '<a class="th-image', '<div class="th-items">', True)
+           printDBG('KategÃ³rialista: ' + str(data2))
+           for item in data2:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"] alt''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'zbporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,['https://zbporn.com/longest/'],             'zbporn-clips',    'https://albums193.zbporn.com/main/9998x9998/366000/366343/8696353.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,['https://zbporn.com/most-popular/'],             'zbporn-clips',    'https://albums193.zbporn.com/main/9998x9998/189000/189088/4495496.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['https://zbporn.com/top-rated/'],             'zbporn-clips',    'https://albums193.zbporn.com/main/9998x9998/333000/333848/7926332.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['https://zbporn.com/latest-updates/'],             'zbporn-clips',    'https://albums193.zbporn.com/main/9998x9998/397000/397827/9464448.jpg',None))
+           self.SEARCH_proc='zbporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        
+        if 'zbporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://zbporn.com/search/%s' % url.replace(' ','+'), 'zbporn-results')
+           return valTab              
+        
+        if 'zbporn-results' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           sts, data = self.get_Page(url)
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'next"><a class="item" href="', '" title="Next"', False)[1]
+           data1 = self.cm.ph.getDataBeetwenMarkers(data, 'list_search_result"', '<div class="pagination">', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data1, '<a class="th', 'class="th-row-title"', True)
+           for item in data2:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"] alt''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^"^']+?)</span''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://zbporn.com' + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              valTab.append(CDisplayListItem(phTitle,'['+phTime+']  '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))                
+           return valTab
+        
+        if 'zbporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           sts, data = self.get_Page(url)
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="next"><a class="item" href="', '" title="Next"', False)[1]
+           data1 = self.cm.ph.getDataBeetwenMarkers(data, '<div class="content-block">', '<div class="pagination">', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data1, '<a class="th', 'class="th-row-title"', True)
+           for item in data2:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"] alt''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^"^']+?)</span''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://zbporn.com' + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              valTab.append(CDisplayListItem(phTitle,'['+phTime+']  '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))                
+           return valTab
+
+        if 'pornoxo' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pornoxo.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornoxo.cookie')
+           host = "Mozilla/5.0 (Linux; U; Android 4.1.1; en-us; androVM for VirtualBox ('Tablet' version with phone caps) Build/JRO03S) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30"
+           header = {'User-Agent': host, 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}   
+           try: data = self.cm.getURLRequestData({ 'url': url, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host getResolvedURL query error url: '+url )
+              return ''
+           printDBG( 'Host getResolvedURL data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'title="Main Page"', 'Top Users</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace('Tube','') 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phTitle.startswith('+'): phTitle = ''
+              if phTitle<>'':
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'pornoxo-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornoxo.com/videos/longest/'],             'pornoxo-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornoxo.com/videos/most-popular/today/'],             'pornoxo-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornoxo.com/videos/top-rated/'],             'pornoxo-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornoxo.com/videos/newest/'],             'pornoxo-clips',    '',None))
+           self.SEARCH_proc='pornoxo-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornoxo-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornoxo.com/search/%s/?sort=mw&so=y' % url.replace(' ','+'), 'pornoxo-clips')
+           return valTab              
+        if 'pornoxo-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornoxo.cookie')
+           host = "Mozilla/5.0 (Linux; U; Android 4.1.1; en-us; androVM for VirtualBox ('Tablet' version with phone caps) Build/JRO03S) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30"
+           header = {'Referer':url, 'User-Agent': host, 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}   
+           try: data = self.cm.getURLRequestData({ 'url': url, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host getResolvedURL query error url: '+url )
+              return ''
+           printDBG( 'Host getResolvedURL data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'vidItem', 'class="clear"')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''([\d]?\d\d:\d\d)''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = 'https://www.pornoxo.com' + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(phTitle,'['+phTime+']  '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if next.startswith('/'): next = 'https://www.pornoxo.com' + next
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'PORNID' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pornid.xxx/'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornid.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornid.cookie', 'pornid.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<div class="thumb-content">')           
+           if len(data): del data[0]  
+           printDBG( 'Adatok: '+ str(data) )
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''preview.+href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=.+?[>]([^"^']+?)[<]/a''', 1, True)[0]
+              phDesc = self.cm.ph.getSearchGroups(item, '''title=["]([^"^']+?)["]>[^A-Z]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phDesc,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNID-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Channels ---","CHANNELS", CDisplayListItem.TYPE_CATEGORY,['https://www.pornid.xxx/channels/'], 'PORNID-channels', 'https://cdni.pornpics.com/1280/7/100/43946812/43946812_001_79be.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Longest ---","LONGEST VIDEOS", CDisplayListItem.TYPE_CATEGORY,['https://www.pornid.xxx/longest/'], 'PORNID-clips', 'https://cdni.pornpics.com/1280/7/379/86065022/86065022_015_57c6.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","TOP RATED VIDEOS", CDisplayListItem.TYPE_CATEGORY,['https://www.pornid.xxx/top-rated/'], 'PORNID-clips', 'https://cdni.pornpics.com/1280/1/355/86449368/86449368_001_3586.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","MOST VIEWED VIDEOS", CDisplayListItem.TYPE_CATEGORY,['https://www.pornid.xxx/most-viewed/'], 'PORNID-clips', 'https://cdni.pornpics.com/1280/7/422/90245504/90245504_024_756c.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Today Best Porn Clips ---","TODAY BEST PORN CLIPS", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL], 'PORNID-clips', 'https://cdni.pornpics.com/1280/7/381/58508699/58508699_010_70d2.jpg',None))
+           self.SEARCH_proc='PORNID-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        if 'PORNID-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornid.xxx/search/%s/' % url.replace(' ','+'), 'PORNID-clips')
+           return valTab              
+        if 'PORNID-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornid.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''link.href=['"]([^"^']+?)['"].rel="next"''', 1, True)[0] 
+           data = data.split('<div class="thumb-holder kt_imgrc">')           
+           if len(data): del data[0] 
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"].title''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?\.jpg)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''top".title="([^"]+?)["].data''', 1, True)[0]
+              if not phTitle:
+                 phTitle = self.cm.ph.getSearchGroups(item, '''alt="([^"]+?)["]''', 1, True)[0]
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>^a-z]+?)<''', 1, True)[0]
+              Added = self.cm.ph.getSearchGroups(item, '''added">([^>^:]+?)<''', 1, True)[0]
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))                
+           return valTab
+  
+        if 'PORNID-channels' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornid.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           next_page =  self.cm.ph.getSearchGroups(data, '''href=['"]([^"^']+?)['"].title="Next''', 1, True)[0]
+           data = data.split('<div class="thumb-content">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''preview".href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"]+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phVideos = self.cm.ph.getSearchGroups(item, '''span>([^>]+?)</span''', 1, True)[0]
+              valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle)+ '\nVideos: '+phVideos+' ',CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNID-clips', phImage, phImage)) 
+           if next_page: 
+                if next_page.startswith('/'): next_page = 'https://www.pornid.xxx' + next_page
+                number = next_page.split('=')[-1]
+                valTab.append(CDisplayListItem('More Channels', 'Next Page: '+number, CDisplayListItem.TYPE_CATEGORY, [next_page], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))
+           return valTab 
+        
+        if 'xbabe' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://xbabe.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xbabe.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Info: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="categories-holder', 'All Rights Reserved', False) [1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href', '</li>', True)
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''"[>]([^"^']+?)[<]/a''', 1, True)[0]
+              phImage = 'http://cdni.sexygirlspics.com/300/1/205/14816410/14816410_016_7995.jpg'
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'xbabe-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Mom Videos ---","Mom Videos",     CDisplayListItem.TYPE_CATEGORY,['https://xbabe.com/categories/videos/mom/'],             'xbabe-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Japanese Videos ---","Japanese Videos",     CDisplayListItem.TYPE_CATEGORY,['https://xbabe.com/categories/videos/japanese/'],             'xbabe-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Teen Videos ---","Teen Videos",     CDisplayListItem.TYPE_CATEGORY,['https://xbabe.com/categories/videos/teen/'],             'xbabe-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest Videos ---","Newest Videos",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'xbabe-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Anal Videos ---","Anal Videos",     CDisplayListItem.TYPE_CATEGORY,['https://xbabe.com/categories/videos/anal/'],             'xbabe-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Solo Girl Videos ---","Solo Girl Videos",     CDisplayListItem.TYPE_CATEGORY,['https://xbabe.com/categories/videos/solo-girl/'],             'xbabe-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Big Ass Videos ---","Big Ass Videos",     CDisplayListItem.TYPE_CATEGORY,['https://xbabe.com/categories/videos/big-ass/'],             'xbabe-clips',    '',None))
+           self.SEARCH_proc='xbabe-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        
+        if 'xbabe-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://xbabe.com/search/?q=%s' % url.replace(' ','+'), 'xbabe-clips')
+           return valTab              
+        
+        if 'xbabe-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xbabe.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''[^>]+?href=['"]([^"^']+?)['"] class="next">''', 1, True)[0] 
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'videos</p>', 'Support', False) [1]
+           printDBG( 'Ãsszes adat: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'data-preview', '"info"')
+           printDBG( 'Ãsszes klip: '+str(data ))
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''srcset=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title">([^"]+?)<''', 1, True)[0]  
+              phTime = self.cm.ph.getSearchGroups(item, '''tion">([^>]+?)<''', 1, True)[0]  
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              printDBG( 'Videolista: '+ phUrl )
+              if phImage.startswith('/'): phImage = 'https:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))                
+           return valTab
+
+        if 'txxx' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.txxx.com'
+           url = 'https://txxx.com/api/json/categories/14400/str.all.json'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'txxx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'txxx.cookie', 'txxx.com', self.defaultParams)
+           if not sts: return valTab
+           self.page=1
+           printDBG( 'Host data:%s' % data )
+           try:
+              result = byteify(simplejson.loads(data))
+              for item in result["categories"]:
+                 phUrl = 'https://txxx.com/categories/%s/1/?sort=latest-updates&date=day&type=all' % str(item["dir"])
+                 phUrl = 'https://txxx.com/api/json/videos/86400/str/latest-updates/60/categories.%s.%s.all..day.json'  % (str(item["dir"]), str(self.page))
+                 phTitle = str(item["title"])
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'txxx-clips', '', None)) 
+           except Exception:
+              printExc()
+           valTab.sort(key=lambda poz: poz.name)
+           #valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,['https://www.txxx.com/longest/'],             'txxx-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,['https://www.txxx.com/most-popular/'],             'txxx-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['https://www.txxx.com/top-rated/'],             'txxx-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['https://www.txxx.com/latest-updates/'],             'txxx-clips',    '',None))
+           self.SEARCH_proc='txxx-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'txxx-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://txxx.com/api/videos.php?params=86400/str/relevance/60/search..1.all..day&s=%s' % url.replace(' ','+'), 'txxx-clips')
+           return valTab              
+        if 'txxx-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           printDBG( 'Host listsItems cat-url: '+str(catUrl) )
+           next = url
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           COOKIEFILE = os_path.join(GetCookieDir(), 'txxx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'txxx.cookie', 'txxx.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              for item in result["videos"]:
+                 phTitle = str(item["title"])
+                 video_id = str(item["video_id"])
+                 scr = str(item["scr"])
+                 phUrl = "https://txxx.com/api/videofile.php?video_id=%s&lifetime=8640000" % video_id
+                 phTime = str(item["duration"])
+                 added = str(item["post_date"])
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle)+'\nAdded: '+added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, scr, None)) 
+           except Exception:
+              printExc()
+           next_page = url.replace('.'+str(self.page)+'.','.'+str(self.page+1)+'.')
+           valTab.append(CDisplayListItem('Next', 'Page: '+str(self.page+1), CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', 'next'))                
+           return valTab
+
+        if 'hclips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.hclips.com'
+           url = 'https://hclips.com/api/json/categories/14400/str.all.json'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hclips.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hclips.cookie', 'hclips.com', self.defaultParams)
+           if not sts: return valTab
+           self.page=1
+           printDBG( 'Host data:%s' % data )
+           try:
+              result = byteify(simplejson.loads(data))
+              for item in result["categories"]:
+                 phUrl = 'https://hclips.com/categories/%s/1/?sort=latest-updates&date=day&type=all' % str(item["dir"])
+                 phUrl = 'https://hclips.com/api/json/videos/86400/str/latest-updates/60/categories.%s.%s.all..day.json'  % (str(item["dir"]), str(self.page))
+                 phTitle = str(item["title"])
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'hclips-clips', '', None)) 
+           except Exception:
+              printExc()
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='hclips-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'hclips-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://hclips.com/api/videos.php?params=86400/str/relevance/60/search..1.all..day&s=%s' % url.replace(' ','+'), 'hclips-clips')
+           return valTab              
+        if 'hclips-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           printDBG( 'Host listsItems cat-url: '+str(catUrl) )
+           next = url
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hclips.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hclips.cookie', 'hclips.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              for item in result["videos"]:
+                 phTitle = str(item["title"])
+                 video_id = str(item["video_id"])
+                 scr = str(item["scr"])
+                 phUrl = "https://hclips.com/api/videofile.php?video_id=%s&lifetime=8640000" % video_id
+                 phTime = str(item["duration"])
+                 added = str(item["post_date"])
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle)+'\nAdded: '+added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, scr, None)) 
+           except Exception:
+              printExc()
+           next_page = url.replace('.'+str(self.page)+'.','.'+str(self.page+1)+'.')
+           valTab.append(CDisplayListItem('Next', 'Page: '+str(self.page+1), CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', 'next'))                
+           return valTab
+
+        if 'sunporno' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.sunporno.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sunporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="im">', '</div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'sunporno-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most viewed ---","Most viewed",     CDisplayListItem.TYPE_CATEGORY,['https://www.sunporno.com/most-viewed/'],             'sunporno-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- HD Porn ---","HD Porn",     CDisplayListItem.TYPE_CATEGORY,['https://www.sunporno.com/most-recent/hd/'],             'sunporno-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Best Videos ---","Best Videos",     CDisplayListItem.TYPE_CATEGORY,['https://www.sunporno.com/top-rated/date-last-week/'],             'sunporno-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,['https://www.sunporno.com/most-recent/'],             'sunporno-clips',    '',None))
+           self.SEARCH_proc='sunporno-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'sunporno-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.sunporno.com/search/%s/' % url.replace(' ','+'), 'sunporno-clips')
+           return valTab              
+        if 'sunporno-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sunporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )  
+           next_page = self.cm.ph.getSearchGroups(data, '''pag-next"\shref=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="th hide', '</div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]  
+              phTime = self.cm.ph.getSearchGroups(item, '''tm">([^>]+?)<''', 1, True)[0]  
+              if phUrl.startswith('/'): phUrl = 'https://www.sunporno.com' + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = 'https://www.sunporno.com' + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'sexu' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://sexu.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sexu.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/tag[^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item).strip() 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'sexu-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Trending ---","Trending",     CDisplayListItem.TYPE_CATEGORY,['http://sexu.com/trending/1'],             'sexu-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- Hall of Fame ---","Hall of Fame",     CDisplayListItem.TYPE_CATEGORY,['http://sexu.com/all/1'],             'sexu-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['http://sexu.com/1'],             'sexu-clips',    '',None))
+           self.SEARCH_proc='sexu-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'sexu-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://sexu.com/search?q=%s' % url.replace(' ','+'), 'sexu-clips')
+           return valTab              
+        if 'sexu-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sexu.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''pagination__arrow--next" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="grid__item">', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt="([^"]+?)"''', 1, True)[0]  
+              phTime = self.cm.ph.getSearchGroups(item, '''counter">([^>]+?)<''', 1, True)[0]  
+              if phUrl.startswith('/'): phUrl = 'http://sexu.com' + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = 'http://sexu.com' + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'tubewolf' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = url #'http://www.tubewolf.com'
+           url = url + '/categories/'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tubewolf.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           if url.startswith('http://crocotube.com'): 
+              data = self.cm.ph.getDataBeetwenMarkers(data, 'A-Z porn categories', 'Footer', False)[1]
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="ct-az-list-item', '</a>')
+           else:
+              data = self.cm.ph.getDataBeetwenMarkers(data, 'Categories<', 'Categories<', False)[1]
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phTitle: phTitle = self._cleanHtmlStr(item).strip() 
+              phTitle = phTitle.replace(' Movies','')
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = url + phUrl 
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'tubewolf-clips', phImage, url)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top-rated'],             'tubewolf-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular'],             'tubewolf-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/latest-updates'],             'tubewolf-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='tubewolf-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        
+        if 'tubewolf-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search/?q=%s' % url.replace(' ','+'), 'tubewolf-clips')
+           return valTab              
+        if 'tubewolf-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tubewolf.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           if not next_page: next_page = self.cm.ph.getDataBeetwenMarkers(data, '<div class="ct-pagination">', 'Next', False)[1]
+           if 'crocotube' in url: 
+              data = self.cm.ph.getDataBeetwenMarkers(data, 'class="ct-videos-list', 'footer', False)[1]
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           if url.startswith('https://www.tubewolf.com'): data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a itemprop="url"', '</div>')
+           if url.startswith('https://zedporn.com'): data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="thumb', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title="([^"]+?)"''', 1, True)[0]  
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt="([^"]+?)"''', 1, True)[0]  
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0]  
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              if not 'Sponsored' in item and phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if not next_page.startswith('http'):
+                 next_page = re.compile('<a href="(.*?)"').findall(next_page)
+                 next_page = next_page[-1]
+                 if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'ALPHAPORNO' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.alphaporno.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'alphaporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''next.+?href=['"]([^"^']+?)['"].title''', 1, True)[0]
+           if next.startswith('/'): next = self.MAIN_URL + next
+           data = data.split('<li class="thumb cat-thumb">')
+           if len(data): 
+              del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''a href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'ALPHAPORNO-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- MOST POPULAR ---","MOST POPULAR VIDEOS",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular/'],             'ALPHAPORNO-clips',    'https://cdni.pornpics.com/460/7/75/99336297/99336297_043_b5c9.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- LONGEST ---","LONGEST VIDEOS",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/longest/'],             'ALPHAPORNO-clips',    'https://cdni.pornpics.de/460/7/426/83786959/83786959_075_4241.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- TOP RATED ---","TOP RATED VIDEOS",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top-rated/'],             'ALPHAPORNO-clips',    'https://cdni.pornpics.com/460/1/86/77475333/77475333_005_ee7f.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- PORNSTARS ---","PORNSTARS",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/pornstars'],             'ALPHAPORNO-pornstars',    'https://cdni.pornpics.com/460/1/358/59650098/59650098_001_69df.jpg',None))
+           self.SEARCH_proc='ALPHAPORNO-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           if next:
+              number = next.split('=')[-1]
+              valTab.append(CDisplayListItem('More Categories', 'More Categories, Page: '+number, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))
+           return valTab
+           
+        if 'ALPHAPORNO-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.alphaporno.com/search/?q=%s' % url.replace(' ','+'), 'ALPHAPORNO-clips')
+           return valTab
+        
+        if 'ALPHAPORNO-clips' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), 'ALPHAPORNO.cookie')
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''btn-next.+?href=['"]([^"^']+?)['"].title''', 1, True)[0]
+           if next.startswith('/'): next = self.MAIN_URL + next
+           data = data.split('<li class="thumb" itemscope itemtype')
+           if len(data): 
+              del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              except: pass
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              number = next.split('=')[-1]
+              valTab.append(CDisplayListItem('Next ', 'Page: '+number, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', 'next'))
+           return valTab
+        
+        if 'ALPHAPORNO-pornstars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'alphaporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="models-list">', '<div class="advertising', False)[1]
+           data = data.split('<li>')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              phTitle = self.cm.ph.getSearchGroups(item, '''name"[>]([^"^']+?)[<]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phCount = self.cm.ph.getSearchGroups(item, '''count"[>]([^"^']+?)[<]''', 1, True)[0]
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle)+'\n'+phCount ,CDisplayListItem.TYPE_CATEGORY, [phUrl],'ALPHAPORNO-clips', phImage, phImage)) 
+           return valTab
+        
+        if 'PORNTUBE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.porntube.com'
+           url = url + '/tags'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'PORNTUBE.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE = ['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = urllib.unquote(base64.b64decode(data))
+           result = byteify(simplejson.loads(data))
+           for item in result["page"]["embedded"]["topTags"]:
+              phUrl = self.MAIN_URL + "/tags/" + str(item["slug"])
+              phTitle = str(item["name"]).title()
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNTUBE-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=rating&time=month'],             'PORNTUBE-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=views&time=month'],             'PORNTUBE-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=date'],             'PORNTUBE-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='PORNTUBE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        if 'PORNTUBE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search/?q=%s' % url.replace(' ','+'), 'PORNTUBE-clips')
+           return valTab              
+        if 'PORNTUBE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'PORNTUBE.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE = ['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = urllib.unquote(base64.b64decode(data))
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              if result["page"]["embedded"].has_key('videos'):
+                 node = result["page"]["embedded"]
+              else:
+                 node = result["page"]
+              for item in node["videos"]["_embedded"]["items"]:
+                 phUrl = self.MAIN_URL + "/api/videos/" + str(item["uuid"]) + "?ssr=false&slug=" + str(item["slug"]) + "&orientation="
+                 phTitle = str(item["title"])
+                 m, s = divmod(item['durationInSeconds'], 60)
+                 phTime = "%02d:%02d" % (m, s)
+                 phImage = str(item["thumbnailsList"][0])
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           except Exception:
+              printExc()
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))                
+           return valTab
+
+        if 'ASHEMALETUBE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.ashemaletube.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'ASHEMALETUBE.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'ASHEMALETUBE.cookie', 'ashemaletube.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not 'Tube' in phTitle: continue
+              if not '/videos/' in phUrl: continue
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://www.ashemaletube.com' + phUrl 
+              phTitle = phTitle.replace ('Porn Tube','').replace ('Tube','')
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'ASHEMALETUBE-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Stories ---","Stories",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/stories/'],             'ASHEMALETUBE-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Models ---","Models",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/models/'],             'ASHEMALETUBE-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Best Recent ---","Best Recent",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'ASHEMALETUBE-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='ASHEMALETUBE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        if 'ASHEMALETUBE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.ashemaletube.com/search/%s/' % url.replace(' ','+'), 'ASHEMALETUBE-clips')
+           return valTab              
+        if 'ASHEMALETUBE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'ASHEMALETUBE.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'ASHEMALETUBE.cookie', 'ashemaletube.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="js-pop thumb-item videospot', '</li>')
+           if not data2: data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="thumb-item videospot', '</li>')
+           for item in data2:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''([\d]?\d\d:\d\d)''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://www.ashemaletube.com' + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = 'https://www.ashemaletube.com' + next_page 
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))                
+           return valTab
+
+        if 'MOMPORNONLY' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://mompornonly.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'mompornonly.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<article id="')           
+           if len(data): del data[0]  
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''lazy-srcset=['"]([^"^']+?)[,]''', 1, True)[0].replace('jpg 212w','jpg').strip()
+              printDBG('Kepek: '+str(phImage))
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'MOMPORNONLY-clips',phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Latest ---","Latest",     CDisplayListItem.TYPE_CATEGORY,['https://mompornonly.com/videos/'],             'MOMPORNONLY-clips',    'https://upload2.mompornonly.com/uploadsimg/2022/04/casey-calvert-young-sexy-brunette-milf-have-a-suprem-body-ZZ2U7C/xnet_72912228-005-a298-VDLM4P.jpg',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- HD Videos ---","HD Videos",     CDisplayListItem.TYPE_CATEGORY,['https://mompornonly.com/videos/?onlyhd=true'],             'MOMPORNONLY-clips',    'https://upload1.mompornonly.com/uploadsimg/2022/01/cory-chase-facial-onlyfans-leak-cory-chase-nudes-T5QWPR/xfrenchies_40120928-001-7752-uu21za-EZPGFI.jpg',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Recommended ---","Recommended",     CDisplayListItem.TYPE_CATEGORY,['https://mompornonly.com/videos/?filter=aleatoire&cat=mom-teach-sex'],             'MOMPORNONLY-clips',    'https://upload1.mompornonly.com/uploadsimg/2022/01/bella-rolland-a-milf-that-assumes-its-shape-P4IBZI/xfrenchies_78036283-027-6006-zn0mwt-EPPVXI.jpg',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Popular ---","Popular",     CDisplayListItem.TYPE_CATEGORY,['https://mompornonly.com/videos/?filter=populaire'],             'MOMPORNONLY-clips',    'https://upload3.mompornonly.com/uploadsimg/2022/05/casca-akashova-and-his-huge-boobs-are-now-here-for-your-eyes-1EJPTA/xnet_32212581-034-f8df-DHUTBE.jpg',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Random Videos ---","Random Videos",     CDisplayListItem.TYPE_CATEGORY,['https://mompornonly.com/videos/?filter=aleatoire'],             'MOMPORNONLY-clips',    'https://upload1.mompornonly.com/uploadsimg/2022/01/anya-olsen-want-to-get-fucked-9Y3V6A/xfrenchies_2267786-014-6f46-3qtivu-FXJFC1.jpg',self.MAIN_URL))
+           self.SEARCH_proc='MOMPORNONLY-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        
+        if 'MOMPORNONLY-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://mompornonly.com/search/%s/' % url.replace(' ','+'), 'MOMPORNONLY-clips')
+           return valTab              
+       
+        if 'MOMPORNONLY-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'mompornonly.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''class='page-next'><a.href=["]([^"^']+?)["]''', 1, True)[0].strip()
+           printDBG( 'MOMPORNONLY listsItems data: '+data )
+           data = data.split('<article id="')           
+           if len(data): del data[0]  
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''lazy-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace('&#8211;' ,'-')
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              printDBG( 'Videolista: '+ phUrl )
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))                
+           return valTab
+
+        
+        if 'streamporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://streamporn.pw'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'streamporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li id="menu-item', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phTitle = self._cleanHtmlStr(item).strip() 
+              if phTitle=='Studios': phTitle='.:'+phTitle+':.'
+              if phTitle=='Years': phTitle='.:'+phTitle+':.'
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://streamporn.pw' + phUrl 
+              if phImage.startswith('/'): phImage = 'https://streamporn.pw' + phImage 
+              if phTitle<>'Hollywood Movies' and phTitle<>'Tvshows':
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'streamporn-clips', phImage, None)) 
+           #valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='streamporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'streamporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://streamporn.pw/?s=%s' % url.replace(' ','+'), 'streamporn-clips')
+           return valTab              
+        if 'streamporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'streamporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           if next_page =='': next_page = self.cm.ph.getSearchGroups(data, '''class='active'>.*?class='page larger' href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div data-movie-id', '<div class="jtip-bottom">')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''class="qtip-title">([^"^']+?)<''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phDesc = self.cm.ph.getSearchGroups(item, '''f-desc"><p>([^"^']+?)<''', 1, True)[0]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://streamporn.pw' + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phDesc),CDisplayListItem.TYPE_CATEGORY, [phUrl],'streamporn-serwer', decodeHtml(phImage), decodeHtml(phImage))) 
+           if next_page:
+              if next_page.startswith('/'): next_page = 'https://streamporn.pw' + next_page 
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if 'streamporn-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'streamporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+str(data) )
+           phImage = self.cm.ph.getSearchGroups(data, '''<meta property="og:image" content=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="dooplay_player">', 'Download', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="Rtable1-cell">', 'rel', False)
+           printDBG('Ãsszes: '+str(data))
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=["]([^"^']+?)"''', 1, True)[0] 
+              printDBG('Linkek: ' + str(phUrl))
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              printDBG('Cimek: '+ str(phTitle))
+              valTab.append(CDisplayListItem(decodeHtml(phTitle), phUrl,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, decodeHtml(phImage), None)) 
+           return valTab
+
+        if 'pornvideos4k' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://pornvideos4k.com/en'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornvideos4k.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<h1><span>', '<div class="list">', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="preview-inn">', '</span></li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'http://pornvideos4k.com/en' + phUrl 
+              if phImage.startswith('/'): phImage = 'http://pornvideos4k.com/en' + phImage 
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'pornvideos4k-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='pornvideos4k-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        
+        if 'pornvideos4k-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://pornvideos4k.com/en/?search=%s' % url.replace(' ','+'), 'pornvideos4k-clips')
+           return valTab              
+        
+        if 'pornvideos4k-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornvideos4k.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next1 = self.cm.ph.getDataBeetwenMarkers(data, "<li class='active'><a href=", "<h2><span>", False)[1]
+           next2 = self.cm.ph.getDataBeetwenMarkers(next1, "<li class=''><a href=", ">", False)[1].replace('"', '')
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, ' <div class="preview">', '/ul')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''<img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''-o"></i>([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'http://pornvideos4k.com/en' + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None))
+           if next2:
+              next_page = 'http://pornvideos4k.com' + next2
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))
+           return valTab
+        
+        if 'fux' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.fux.com'
+           url = url + '/tags'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fux.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE = ['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = urllib.unquote(base64.b64decode(data))
+           result = byteify(simplejson.loads(data))
+           for item in result["page"]["embedded"]["topTags"]:
+              phUrl = self.MAIN_URL + "/tags/" + str(item["slug"])
+              phTitle = str(item["name"]).title()
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'fux-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=rating&time=month'],             'fux-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=views&time=month'],             'fux-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=date'],             'fux-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='fux-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'fux-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search/?q=%s' % url.replace(' ','+'), 'fux-clips')
+           return valTab              
+        if 'fux-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fux.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE = ['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = urllib.unquote(base64.b64decode(data))
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              if result["page"]["embedded"].has_key('videos'):
+                 node = result["page"]["embedded"]
+              else:
+                 node = result["page"]
+              for item in node["videos"]["_embedded"]["items"]:
+                 phUrl = self.MAIN_URL + "/api/videos/" + str(item["uuid"]) + "?ssr=false&slug=" + str(item["slug"]) + "&orientation="
+                 phTitle = str(item["title"])
+                 m, s = divmod(item['durationInSeconds'], 60)
+                 phTime = "%02d:%02d" % (m, s)
+                 phImage = str(item["thumbnailsList"][0])
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           except Exception:
+              printExc()
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'pornerbros' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pornerbros.com'
+           url = url + '/tags'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornerbros.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE = ['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = urllib.unquote(base64.b64decode(data))
+           result = byteify(simplejson.loads(data))
+           for item in result["page"]["embedded"]["topTags"]:
+              phUrl = self.MAIN_URL + "/tags/" + str(item["slug"])
+              phTitle = str(item["name"]).title()
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'pornerbros-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=rating&time=month'],             'pornerbros-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=views&time=month'],             'pornerbros-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=date'],             'pornerbros-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='pornerbros-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornerbros-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search/?q=%s' % url.replace(' ','+'), 'pornerbros-clips')
+           return valTab              
+        if 'pornerbros-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornerbros.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE = ['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = urllib.unquote(base64.b64decode(data))
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              if result["page"]["embedded"].has_key('videos'):
+                 node = result["page"]["embedded"]
+              else:
+                 node = result["page"]
+              for item in node["videos"]["_embedded"]["items"]:
+                 phUrl = self.MAIN_URL + "/api/videos/" + str(item["uuid"]) + "?ssr=false&slug=" + str(item["slug"]) + "&orientation="
+                 phTitle = str(item["title"])
+                 m, s = divmod(item['durationInSeconds'], 60)
+                 phTime = "%02d:%02d" % (m, s)
+                 phImage = str(item["thumbnailsList"][0])
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           except Exception:
+              printExc()
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'PORNBURST' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pornburst.xxx/'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornburst.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornburst.cookie', 'pornburst.xxx', self.defaultParams)
+           printDBG( 'Adatok: '+str(data) )
+           if not sts: return 
+           data = data.split('muestra-categoria"')
+           if len(data): del data[0]
+           printDBG( 'Adatok2: '+str(data) )
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''span>([^"^']+?)[<].h2''', 1, True)[0].strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = 'https://www.pornburst.xxx' + phUrl 
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl], 'PORNBURST-clips', phImage, None)) 
+           valTab.insert(0,CDisplayListItem("--- Channels ---","CHANNELS",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornburst.xxx/sites/videos/'],             'PORNBURST-clips',    'https://cdni.pornpics.com/1280/1/120/19855270/19855270_009_a871.jpg',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---","PORNSTARS",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornburst.xxx/pornstars/'],             'PORNBURST-pornstars',    'https://cdni.pornpics.com/1280/1/161/27090225/27090225_003_8f23.jpg',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","MOST RECENT VIDEOS",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornburst.xxx/'],             'PORNBURST-clips',    'https://cdni.pornpics.com/1280/1/89/68092045/68092045_013_2bc6.jpg',self.MAIN_URL))
+           self.SEARCH_proc='PORNBURST-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        
+        if 'PORNBURST-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornburst.xxx/search/?q=%s' % url.replace(' ','+'), 'PORNBURST-clips')
+           return valTab              
+        
+        if 'PORNBURST-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornburst.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''next "><a href=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = data.split('<div class="box-link')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''.href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title">([^"^']+?)[<]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''"Length"><\/span>([^"^']+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://www.pornburst.xxx' + phUrl 
+              printDBG( 'Linkek: '+str(phUrl) )
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:              
+              if next.startswith('/'): next = 'https://www.pornburst.xxx' + next
+              printDBG( 'KÃ¶vi: '+str(next) )
+              valTab.append(CDisplayListItem('Next', 'Page : '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))            
+           return valTab
+        
+        if 'PORNBURST-pornstars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornburst.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           next = self.cm.ph.getSearchGroups(data, '''next".href=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = data.split('<a class="muestra-escena jsblur muestra')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = 'https://www.pornburst.xxx' + phUrl 
+              printDBG( 'Linkek Stars: '+str(phUrl) )
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle:
+                 phTitle = self.cm.ph.getSearchGroups(item, '''span[>]([^"^']+?)[<]\/h2''', 1, True)[0].strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''this.src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phVideos = self.cm.ph.getSearchGroups(item, '''videos sprite"><\/span>([^>]+?)<''', 1, True)[0]
+              phRuntime = self.cm.ph.getSearchGroups(item, '''"Length"><\/span>([^"^']+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://www.pornburst.xxx' + phUrl 
+              if phImage.startswith('/'): phImage = 'https://www.pornburst.xxx' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle)+ '\nVideos: '+phVideos+' ',CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNBURST-clips', phImage, phImage)) 
+           if next:
+              if next.startswith('/'): next = 'https://www.pornburst.xxx' + next
+              printDBG( 'KÃ¶vi stars: '+str(next) )
+              valTab.append(CDisplayListItem('Next', 'Page : '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None)) 
+           return valTab
+ 
+        if 'XXXBULE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.xxxbule.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xxxbule.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'xxxbule.cookie', 'xxxbule.com', self.defaultParams)
+           if not sts: return 
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="style32', '<svg version="', False)[1]
+           next = self.cm.ph.getSearchGroups(next, '''href=['"]([^"^']+?)["]>[^0-9]''', 1, True)[0] 
+           if next.startswith('/'): next = self.MAIN_URL + next
+           data = data.split('<div class="style24 thumb-bl">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace('FREEPORN','')
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl], 'XXXBULE-clips', phImage, None)) 
+           valTab.insert(0,CDisplayListItem("--- CHANNELS ---","CHANNELS",     CDisplayListItem.TYPE_CATEGORY,['https://www.xxxbule.com/sites/'],             'XXXBULE-pornstars',    'https://cdni.pornpics.com/1280/1/151/76798220/76798220_004_9195.jpg',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- PORNSTARS ---","PORNSTARS",     CDisplayListItem.TYPE_CATEGORY,['https://www.xxxbule.com/pornstars/'],             'XXXBULE-pornstars',    'https://cdni.pornpics.com/460/7/527/56677398/56677398_034_3f63.jpg',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- POPULAR ---","POPULAR VIDEOS",     CDisplayListItem.TYPE_CATEGORY,['https://www.xxxbule.com/popular/'],             'XXXBULE-clips',    'https://cdni.pornpics.com/1280/7/87/29058317/29058317_021_bfb0.jpg',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- BEST VIDEOS ---","BEST VIDEOS",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'XXXBULE-clips',    'https://cdni.pornpics.com/1280/7/585/44361450/44361450_031_720e.jpg',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- NEW VIDEOS ---","NEW VIDEOS",     CDisplayListItem.TYPE_CATEGORY,['https://www.xxxbule.com/newest/'],             'XXXBULE-clips',    'https://cdni.pornpics.com/1280/1/121/38308339/38308339_004_69ce.jpg',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- TOP RATED ---","TOP RATED VIDEOS",     CDisplayListItem.TYPE_CATEGORY,['https://www.xxxbule.com/top-rated/'],             'XXXBULE-clips',    'https://cdni.pornpics.com/1280/1/158/24410848/24410848_005_7154.jpg',self.MAIN_URL))
+           self.SEARCH_proc='XXXBULE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))
+           return valTab
+        
+        if 'XXXBULE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.xxxbule.com/find/%s/' % url.replace(' ','-'), 'XXXBULE-clips')
+           return valTab              
+        
+        if 'XXXBULE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xxxbule.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="style32', '<svg version="', False)[1]
+           next = self.cm.ph.getSearchGroups(next, '''href=['"]([^"^']+?)["]>[^0-9]''', 1, True)[0] 
+           if next.startswith('/'): next = self.MAIN_URL + next
+           data = data.split('<div class="style24 thumb-bl">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              phRuntime = self.cm.ph.getSearchGroups(item, '''style48">([^"^']+?)</div''', 1, True)[0]
+              printDBG( 'Linkek: '+str(phUrl) )
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:                            
+              printDBG( 'KÃ¶vi: '+str(next) )
+              valTab.append(CDisplayListItem('Next', 'Page : '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))            
+           return valTab
+        
+        if 'XXXBULE-pornstars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xxxbule.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="style32', '<svg version="', False)[1]
+           next = self.cm.ph.getSearchGroups(next, '''href=['"]([^"^']+?)["]>[^0-9]''', 1, True)[0] 
+           if next.startswith('/'): next = self.MAIN_URL + next
+           data = data.split('<div class="style24 thumb-bl">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle) ,CDisplayListItem.TYPE_CATEGORY, [phUrl],'XXXBULE-clips', phImage, phImage)) 
+           if next:
+              printDBG( 'KÃ¶vi stars: '+str(next) )
+              valTab.append(CDisplayListItem('Next', 'Page : '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None)) 
+           return valTab
+
+        if 'PORNDIG' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.porndig.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porndig.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porndig.cookie', 'porndig.com', self.defaultParams)
+           if not sts: return 
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'From A to Z', 'webcams lazy homepage', False)[1]
+           data = data.split('sidebar_section_item')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]  
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              printDBG( 'Kategorialinkek: '+str(phUrl) )
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=["']([^"^']+?)["']''', 1, True)[0]
+              phImage = 'https://cdni.pornpics.com/1280/1/363/44985407/44985407_003_5318.jpg'
+              #phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl], 'PORNDIG-clips', phImage, None)) 
+           valTab.insert(0,CDisplayListItem("--- STUDIOS ---","STUDIOS",     CDisplayListItem.TYPE_CATEGORY,['https://www.porndig.com/studios/'],             'PORNDIG-studios',    'https://cdni.pornpics.com/1280/1/151/76798220/76798220_004_9195.jpg',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- PORNSTARS ---","PORNSTARS",     CDisplayListItem.TYPE_CATEGORY,['https://www.porndig.com/pornstars/'],             'PORNDIG-pornstars',    'https://cdni.pornpics.com/460/7/527/56677398/56677398_034_3f63.jpg',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- AMATEUR ---","AMATEUR VIDEOS",     CDisplayListItem.TYPE_CATEGORY,['https://www.porndig.com/amateur/videos/'],             'PORNDIG-clips',    'https://cdni.pornpics.com/1280/7/87/29058317/29058317_021_bfb0.jpg',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- MOST POPULAR ---","MOST POPULAR VIDEOS",     CDisplayListItem.TYPE_CATEGORY,['https://www.porndig.com/video/'],             'PORNDIG-clips',    'https://cdni.pornpics.com/1280/1/158/24410848/24410848_005_7154.jpg',self.MAIN_URL))
+           self.SEARCH_proc='PORNDIG-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        
+        if 'PORNDIG-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.porndig.com/videos/s=%s' % url.replace(' ','+'), 'PORNDIG-results')
+           return valTab              
+        
+        if 'PORNDIG-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porndig.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''next".href=['"]([^"^']+?)["]><''', 1, True)[0] 
+           if next.startswith('/'): next = self.MAIN_URL + next
+           data = data.split('item_title"><header>')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=["]([^"]+?)["]>''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phTitle = self.cm.ph.getSearchGroups(item, '''"[>]([^"^']+?)[<]/a''', 1, True)[0]
+              if not phTitle:
+                 phTitle = self.cm.ph.getSearchGroups(item, '''title=["]([^"]+?)["]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^'^?]+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''duration"><span>([^"^']+?)</span''', 1, True)[0]
+              printDBG( 'Linkek: '+str(phUrl) )
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:                            
+              printDBG( 'KÃ¶vi: '+str(next) )
+              valTab.append(CDisplayListItem('Next', 'Page : '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))            
+           return valTab
+           
+        if 'PORNDIG-studios' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porndig.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           next = self.cm.ph.getSearchGroups(data, '''current.".+?href=['"]([^"^']+?)["]''', 1, True)[0] 
+           if next.startswith('/'): next = self.MAIN_URL + next
+           data = data.split('item_thumbnail"><a class="js_show_loader')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"].+?h3''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]><h3''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle) ,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNDIG-clips', phImage, phImage)) 
+           if next:
+              printDBG( 'KÃ¶vi stars: '+str(next) )
+              valTab.append(CDisplayListItem('Next', 'Page : '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None)) 
+           return valTab
+        
+        if 'PORNDIG-pornstars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porndig.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           next = self.cm.ph.getSearchGroups(data, '''current.".+?href=['"]([^"^']+?)["]''', 1, True)[0] 
+           if next.startswith('/'): next = self.MAIN_URL + next
+           data = data.split('item_thumbnail"><a class="js_show_loader')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"].+?h3''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]><h3''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"].+?us''', 1, True)[0]
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle) ,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNDIG-clips', phImage, phImage)) 
+           if next:
+              printDBG( 'KÃ¶vi stars: '+str(next) )
+              valTab.append(CDisplayListItem('Next', 'Page : '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None)) 
+           return valTab
+        
+        if 'PORNDIG-results' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porndig.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           next = self.cm.ph.getSearchGroups(data, '''page current.+?href=['"]([^"^']+?)["]''', 1, True)[0] 
+           if next.startswith('/'): next = self.MAIN_URL + next
+           data = data.split('"video_block_image"')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=["]([^"]+?)["].alt''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=["]([^"]+?)["]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''base_url=['"]([^"^'^?]+?)["]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''mobile_duration"><span>([^"^']+?)</span''', 1, True)[0]
+              printDBG( 'Linkek: '+str(phUrl) )
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:                            
+              printDBG( 'KÃ¶vi: '+str(next) )
+              valTab.append(CDisplayListItem('Next', 'Page : '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))            
+           return valTab
+        
+        
+        if 'ruleporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://ruleporn.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'ruleporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'ruleporn.cookie', 'ruleporn.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<!-- item -->', '<!-- item END -->')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phTitle = self.cm.ph.getSearchGroups(item, '''title">([^"^']+?)[<]''', 1, True)[0]
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'ruleporn-clips', phImage , None))
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos/'],             'ruleporn-clips',    'https://cdni.pornpics.com/460/1/272/10878785/10878785_005_04b3.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-viewed/'],             'ruleporn-clips',    'https://cdni.pornpics.com/460/7/402/89047311/89047311_016_1b0c.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top-rated/'],             'ruleporn-clips',    'https://cdni.pornpics.com/1280/7/95/72519895/72519895_028_c84e.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- Most Discussed ---","Most Discussed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-discussed/'],             'ruleporn-clips',    'https://cdni.pornpics.com/1280/1/287/93147403/93147403_004_54f4.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/longest/'],             'ruleporn-clips',    'https://cdni.pornpics.com/1280/1/162/98620335/98620335_002_bf7a.jpg', None))
+           self.SEARCH_proc='ruleporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415' , None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        if 'ruleporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://ruleporn.com/search/%s/' % url.replace(' ','-'), 'ruleporn-clips')
+           return valTab              
+        if 'ruleporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'ruleporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'ruleporn.cookie', 'ruleporn.com', self.defaultParams)
+           printDBG( 'Oldal cÃ­me: '+url )
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           cookieHeader = self.cm.getCookieHeader(COOKIEFILE)
+           actualUrl = self.cm.ph.getDataBeetwenMarkers(data, '<link rel="canonical" href="', '"', False)[1]
+           if actualUrl.endswith('.html'):
+              actualUrl = actualUrl.replace(actualUrl.split('/')[-1],'')
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<link rel="next" href="', '"', False)[1]
+           next_page = actualUrl + next_page
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<!-- item -->', '<!-- item END -->')
+           for item in data:
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"] title''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title">([^"^']+?)[<]''', 1, True)[0].strip()
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''title="([^"^']+?)["]''', 1, True)[0].replace("&#039;", "'")
+              if not phTitle: phTitle = 'Anonymous Video'
+              Time = self.cm.ph.getSearchGroups(item, '''time">([^"^']+?)<''', 1, True)[0]
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']   '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))    
+           return valTab
+        
+        if '123PANDAMOVIE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://pandamovie.info'
+           COOKIEFILE = os_path.join(GetCookieDir(), '123PANDAMOVIE.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, '123PANDAMOVIE.cookie', '123pandamovie.me', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="genres scrolling">', '</ul>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'123PANDAMOVIE-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           #valTab.insert(0,CDisplayListItem("--- Pornstars ---","Pornstars",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/pornstars'],             '123PANDAMOVIE-years',    '',self.MAIN_URL))
+           #valTab.insert(0,CDisplayListItem("--- Studios ---","Studios",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             '123PANDAMOVIE-years',    '', 'studios'))
+           valTab.insert(0,CDisplayListItem("--- Years ---","Years",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             '123PANDAMOVIE-years',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Movies ---","Movies",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/genres/porn-movies'],             '123PANDAMOVIE-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='123PANDAMOVIE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if '123PANDAMOVIE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/?s=%s' % url.replace(' ','+'), '123PANDAMOVIE-clips')
+           return valTab              
+        if '123PANDAMOVIE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), '123PANDAMOVIE.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': False, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, '123PANDAMOVIE.cookie', '123pandamovie.me', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'arrow_pag', 'resppages', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''([\d]?\d\d:\d\d)''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'123PANDAMOVIE-serwer', phImage, None)) 
+           if next_page:
+              #printDBG( 'Host listsItems next_page: '+next_page )
+              next_page = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next_page)[-1]
+              #printDBG( 'Host listsItems next_page one: '+next_page )
+              if next_page.startswith('/'): next_page = self.MAIN_URL + next_page 
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if '123PANDAMOVIE-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), '123PANDAMOVIE.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return ''
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<h2>Video Sources', '<div class="sgeneros">', False)[1]
+           #printDBG( 'Host listsItems data: '+data )
+           phImage = self.cm.ph.getSearchGroups(data, '''"og:image" content=['"]([^"^']+?)['"]''', 1, True)[0] 
+           phTime = '' #self.cm.ph.getSearchGroups(data, '''description" content=['"]([^"^']+?)['"|]''', 1, True)[0].strip()
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="hosts', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href="([^"^']+?)['"] rel''', 1, True)[0] 
+              printDBG( 'Kiszedett Linkek: '+str(phUrl))
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self._cleanHtmlStr(item)
+              if 'netu' in phUrl: phUrl= ''
+              if 'Netu' in phTitle: phTitle= ''
+              if 'RapidGator' in phTitle: phTitle=''
+              if 'Share-online' in phTitle: phTitle=''
+              if 'Ubiqfile' in phTitle: phTitle=''
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              if '/goto/' in phUrl: 
+                 self.defaultParams['header']['Referer'] = url
+                 sts, data = self._getPage(phUrl, self.defaultParams)
+                 if not sts: return 
+                 printDBG( 'Host listsItems data2: '+str(data) )
+                 phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                 printDBG( 'Host listsItems phUrl: '+str(phUrl) )
+                 if '/goto/' in phUrl: 
+                    sts, data = self._getPage(phUrl, self.defaultParams)
+                    if not sts: return 
+                    printDBG( 'Host listsItems data2: '+str(data) )
+                    phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                    if '/goto/' in phUrl: 
+                       sts, data = self._getPage(phUrl, self.defaultParams)
+                       if not sts: return 
+                       printDBG( 'Host listsItems data2: '+str(data) )
+                       phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0]
+              if phTitle:
+                 phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+                 printDBG( 'Linklista: '+str(phUrl) )
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           return valTab
+        if '123PANDAMOVIE-years' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), '123PANDAMOVIE.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': False, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, '123PANDAMOVIE.cookie', '123pandamovie.me', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           #printDBG( 'Host catUrl: '+str(catUrl) )
+           if catUrl == 'studios':
+              data = self.cm.ph.getDataBeetwenMarkers(data, '>Studios<', '</ul>', False)[1]
+           else:
+              data = self.cm.ph.getDataBeetwenMarkers(data, 'Release Year', '</ul>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'123PANDAMOVIE-clips', '', None)) 
+           return valTab
+
+        if 'DANSMOVIES' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://dansmovies.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'dansmovies.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'dansmovies.cookie', 'dansmovies.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<span>Popular</span>', '<span>All</span>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           phImage = 'http://goodsexporn.org/media/galleries/53f4f5c777fd1/7.jpg'
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=[']([^/^/]+)[']''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              #phUrl.endswith('/'): phUrl = phUrl[ :(len(phUrl)-1)]
+              if phUrl:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'DANSMOVIES-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- NEW ---","NEW",     CDisplayListItem.TYPE_CATEGORY,['http://www.dansmovies.com/?sortby=newest'],             'DANSMOVIES-clips',    'https://s9v7j7a4.ssl.hwcdn.net/galleries/full/76/36/d3/7636d3602bec8920c34f976b0aebb7df/11.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- MOST VIEWED ---","MOST VIEWED",     CDisplayListItem.TYPE_CATEGORY,['http://www.dansmovies.com/most-viewed/'],             'DANSMOVIES-clips',    'https://s9v7j7a4.ssl.hwcdn.net/galleries/full/d7/50/92/d75092b21def27114ed591e75d526fc6/7.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- TOP RATED ---","TOP RATED",     CDisplayListItem.TYPE_CATEGORY,['http://www.dansmovies.com/top-rated/'],             'DANSMOVIES-clips',    'https://s9v7j7a4.ssl.hwcdn.net/galleries/full/12/73/85/127385d7a32618724dbdd34382931f16/8.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- LONGEST ---","LONGEST",     CDisplayListItem.TYPE_CATEGORY,['http://www.dansmovies.com/top-longest/'],             'DANSMOVIES-clips',    'https://s9v7j7a4.ssl.hwcdn.net/galleries/full/46/0e/23/460e23315c02d3970dcaa53643ea92ae/0.jpg', None))
+           self.SEARCH_proc='DANSMOVIES-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        if 'DANSMOVIES-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://dansmovies.com/search/videos/%s/' % url.replace(' ','-'), 'DANSMOVIES-clips')
+           return valTab              
+        if 'DANSMOVIES-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'dansmovies.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'dansmovies.cookie', 'dansmovies.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<link rel="next" href="', '" />', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="tw">', '</div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=["]([^"^']+?)["]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''duration"><i></i>([^"^']+?)[<]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('http://www.yobt.tv'): phTitle = ''
+              if phUrl.startswith('http://www.porntube.com'): phTitle = ''
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']   '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None))
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))                
+           return valTab
+        
+
+        if 'PORNREWIND' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pornrewind.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornrewind.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.page = 0
+           cats = ['3d','amateur','asmr','arab','anal','webcam','voyeur','teen','romantic', 'beards', 'big tits', 'big butt', 'big dick',
+           'bisexual', 'blonde', 'blowjob', 'bondage', 'bukkake', 'casting', 'college', 'compilation', 'cosplay', 'couples', 'cuckold',
+           'cumshots','dp', 'dildos toys', 'ebony', 'european', 'facial'
+           ]
+           for item in cats:
+              phUrl = 'https://www.pornrewind.com/categories/%s/' % item.replace(' ','-')
+              valTab.append(CDisplayListItem(item.upper(),item,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNREWIND-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='PORNREWIND-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'PORNREWIND-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornrewind.com/search/%s/' % url.replace(' ','+'), 'PORNREWIND-clips')
+           return valTab
+        if 'PORNREWIND-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           if not '/search/' in url:
+              url = url + '?mode=async&function=get_block&block_id=list_videos_common_videos_list&sort_by=post_date&from=%s' % self.page
+           else:
+              if self.page>1:
+                 url = url + '?mode=async&function=get_block&block_id=list_videos_videos&q=dildo&category_ids=&sort_by=post_date&from_videos=%s&from_albums=%s' % (self.page, self.page)
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornrewind.cookie')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="direction"><a', '</li>', False)[1]
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<h1 class="title">', '<nav class="pagination">', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="th', '</div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"] title''', 1, True)[0] 
+              printDBG( 'Linkek: '+ phUrl )
+              Time = self.cm.ph.getSearchGroups(item, '''thumb-time">\s*<span>([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''thumb-added">\s*<span>([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://www.pornrewind.com'})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle)+'\n'+'Time: ['+Time+']'+'\n'+'Added: ['+Added+']',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = self.cm.ph.getSearchGroups(next, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if next.startswith('/'): next = 'https://www.pornrewind.com' + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [url], name, '', 'next'))
+           return valTab
+
+
+        if 'BALKANJIZZ' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.balkanjizz.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'balkanjizz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.page = 0
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="col-sm', '</div> </a> </div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'https://www.balkanjizz.com' + phUrl
+              if phImage.startswith('/'): phImage = 'https://www.balkanjizz.com' + phImage
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://www.balkanjizz.com'})
+              except: pass
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'BALKANJIZZ-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='BALKANJIZZ-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'BALKANJIZZ-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.balkanjizz.com/search/videos?search_query=%s' % url.replace(' ','+'), 'BALKANJIZZ-clips')
+           return valTab
+        if 'BALKANJIZZ-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'balkanjizz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''</a></li><li><a href=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="col-sm', '</div> </div> </div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duration-bar pull-right">([^>]+?)<''', 1, True)[0].strip()
+              Views = self.cm.ph.getSearchGroups(item, '''views-bar pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://www.balkanjizz.com' + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://www.balkanjizz.com'})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle)+'\n'+'Time: ['+Time+']'+'\n'+'Views: ['+Views+']',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('/'): next = 'https://www.balkanjizz.com' + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'PORNORUSSIA' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://pornorussia.mobi' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornorussia.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.page = 0
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="th" href="/c', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'https://pornorussia.mobi' + phUrl
+              if phImage.startswith('/'): phImage = 'https://pornorussia.mobi' + phImage
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://pornorussia.mobi'})
+              except: pass
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNORUSSIA-clips', phImage, None)) 
+           self.SEARCH_proc='PORNORUSSIA-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'PORNORUSSIA-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://pornorussia.mobi/s.php?poisk=%s' % url.replace(' ','+'), 'PORNORUSSIA-clips')
+           return valTab
+        if 'PORNORUSSIA-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornorussia.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''class="more" href=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="th', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''th-duration">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://pornorussia.mobi' + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = 'https://pornorussia.mobi' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://pornorussia.mobi'})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('/'): next = 'https://pornorussia.mobi' + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'LETMEJERK' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.letmejerk.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'letmejerk.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           self.defaultParams['header']['Referer'] = url
+           self.defaultParams['header']['Origin'] = self.MAIN_URL
+           #sts, data = self.get_Page(url)
+           sts, data = self.getPage(url, 'letmejerk.cookie', 'letmejerk.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.page = 0
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item)
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              clas = self.cm.ph.getSearchGroups(item, '''class=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'https://www.letmejerk.com' + phUrl
+              if clas=='category':
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'LETMEJERK-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- TOP ---","TOP",     CDisplayListItem.TYPE_CATEGORY,['https://www.letmejerk.com/?sort=top'],             'LETMEJERK-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- LATEST ---","LATEST",     CDisplayListItem.TYPE_CATEGORY,['https://www.letmejerk.com/?sort=latest'],             'LETMEJERK-clips',    '', None))
+           self.SEARCH_proc='LETMEJERK-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'LETMEJERK-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.letmejerk.com/search.php?q=%s' % url.replace(' ','+'), 'LETMEJERK-clips')
+           return valTab
+        if 'LETMEJERK-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           for x in range(1, 3): 
+              COOKIEFILE = os_path.join(GetCookieDir(), 'letmejerk.cookie')
+              self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+              self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+              self.defaultParams['header']['Referer'] = url
+              self.defaultParams['header']['Origin'] = self.MAIN_URL
+              self.defaultParams['header']['User-Agent'] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0"
+              self.defaultParams['cookie_items'] = {'visited':'yes'}
+              sts, data = self.getPage(url, 'letmejerk.cookie', 'letmejerk.com', self.defaultParams)
+              if not sts: return valTab
+              printDBG( 'Host listsItems data: '+data )
+              next = self.cm.ph.getDataBeetwenMarkers(data, 'class="next"', '</ul>', False)[1]
+              data = data.split('<div class="th">')
+              if len(data): del data[0]
+              if not len(data): continue
+              for item in data:
+                 phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+                 phImage = self.cm.ph.getSearchGroups(item, '''img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+                 if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+                 if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+                 phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                 Time = self.cm.ph.getSearchGroups(item, '''clock"></i>([^>]+?)<''', 1, True)[0].strip()
+                 if ''==Time: Time = self.cm.ph.getSearchGroups(item, '''clock-o"></i>([^>]+?)<''', 1, True)[0].strip()
+                 if phUrl.startswith('/'): phUrl = 'https://www.letmejerk.com' + phUrl
+                 if phImage.startswith('//'): phImage = 'https:' + phImage
+                 try:
+                    phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://www.letmejerk.com'})
+                 except: pass
+                 if phTitle and not phUrl.endswith('/.html'):
+                    valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+              if len(next)>18:
+                 match = re.compile('href="(.*?)"').findall(next)
+                 if not match: return valTab
+                 next = match[-1].replace('&sort=','')
+                 #url1 = url.replace(url.split('/')[-1],'')
+                 #next = url1 + next
+                 if next.startswith('/'): next = 'https://www.letmejerk.com' + next
+                 valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', 'next'))
+              if len(data): break
+           return valTab
+
+        if 'SEXTUBEFUN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://sextubefun.com/' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sextubefun.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<header class="row">', '</section>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'col -channel">', '</div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0]
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'SEXTUBEFUN-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- MOST RECENT VIDEOS ---","MOST RECENT VIDEOS",     CDisplayListItem.TYPE_CATEGORY,['https://sextubefun.com/videos/'],             'SEXTUBEFUN-clips',    'https://cdni.pornpics.com/1280/1/306/81417133/81417133_003_7894.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- MOST POPULAR VIDEOS ---","MOST POPULAR VIDEOS",     CDisplayListItem.TYPE_CATEGORY,['https://sextubefun.com/most-viewed/'],             'SEXTUBEFUN-clips',    'https://cdni.pornpics.com/1280/7/501/49579428/49579428_010_f4ad.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- TOP RATED VIDEOS ---","TOP RATED VIDEOS",     CDisplayListItem.TYPE_CATEGORY,['https://sextubefun.com/top-rated/'],             'SEXTUBEFUN-clips',    'https://cdni.pornpics.com/1280/7/189/95098249/95098249_002_6571.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- MOST DISCUSSED VIDEOS ---","MOST DISCUSSED VIDEOS",     CDisplayListItem.TYPE_CATEGORY,['https://sextubefun.com/most-discussed/'],             'SEXTUBEFUN-clips',    'https://cdni.pornpics.com/1280/7/49/47928053/47928053_020_7d31.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- LONGEST VIDEOS ---","LONGEST VIDEOS",     CDisplayListItem.TYPE_CATEGORY,['https://sextubefun.com/longest/'],             'SEXTUBEFUN-clips',    'https://cdni.pornpics.com/1280/1/178/57226461/57226461_007_1e27.jpg', None))
+           self.SEARCH_proc='SEXTUBEFUN-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        
+        if 'SEXTUBEFUN-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://sextubefun.com/search/%s/' % url.replace(' ','+'), 'SEXTUBEFUN-clips')
+           return valTab
+        
+        if 'SEXTUBEFUN-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sextubefun.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           pageUrl = self.cm.ph.getSearchGroups(data, '''canonical".href=["']([^"^']+?)['"]>''', 1, True)[0]
+           if 'html' in pageUrl:
+              pageUrl = self.cm.ph.getSearchGroups(data, '''canonical".href=["']([^"^']+?)[p]age''', 1, True)[0]
+           next = self.cm.ph.getSearchGroups(data, '''Next'.href=[']([^"^']+?)['].class="next''', 1, True)[0]
+           next = pageUrl + next
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="item-col col -video">', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              printDBG( 'Video-oldalak: '+phUrl )
+              Time = self.cm.ph.getSearchGroups(item, '''time">([^>]+?)</span''', 1, True)[0].strip()
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))
+           return valTab
+        
+        if 'SEXTUBEFUN-channels' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'gotporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="channel-card', '</li> </ul>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://www.gotporn.com' + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://www.gotporn.com'})
+              except: pass
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'SEXTUBEFUN-clips', phImage, None)) 
+              #   valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, doodNone)) 
+           if next:
+              if next.startswith('/'): next = 'https://www.gotporn.com' + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if '3MOVS' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.3movs.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), '3movs.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, '3movs.cookie', '3movs.com', self.defaultParams)
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb_cat item">', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^/^/]+)['"]>''', 1, True)[0]
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'3MOVS-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- TODAY'S FEATURED ---", "TODAY'S FEATURED PORN VIDEOS", CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL], '3MOVS-clips', 'https://jk1tthawth.ent-cdn.com/contents/albums/sources/0/1/1.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- NEW VIDEOS ---", "NEW VIDEOS", CDisplayListItem.TYPE_CATEGORY, ['https://www.3movs.com/videos/'], '3MOVS-clips', 'https://jk1tthawth.ent-cdn.com/contents/albums/sources/36000/36165/646748.jpg', None))
+           valTab.insert(0,CDisplayListItem('--- TOP RATED ---', 'TOP RATED VIDEOS', CDisplayListItem.TYPE_CATEGORY, ['https://www.3movs.com/top-rated/all-time/'], '3MOVS-clips', 'https://jk1tthawth.ent-cdn.com/contents/albums/sources/55000/55990/1007884.jpg', None))
+           valTab.insert(0,CDisplayListItem('--- MOST VIEWED ---', 'MOST VIEWED VIDEOS ', CDisplayListItem.TYPE_CATEGORY, ['https://www.3movs.com/most-viewed/all-time/'], '3MOVS-clips', 'https://jk1tthawth.ent-cdn.com/contents/albums/sources/35000/35002/624987.jpg', None))
+           valTab.insert(0,CDisplayListItem('--- LONGEST VIDEOS ---', 'LONGEST VIDEOS', CDisplayListItem.TYPE_CATEGORY, ['https://www.3movs.com/longest/'], '3MOVS-clips', 'https://jk1tthawth.ent-cdn.com/contents/albums/sources/9000/9953/175722.jpg', None))
+           self.SEARCH_proc='3MOVS-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab 
+        if '3MOVS-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.3movs.com/search_videos/?q=%s' % url.replace(' ','-'), '3MOVS-clips')
+           return valTab
+        if '3MOVS-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), '3movs.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='iphone_3_0')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, '3movs.cookie', '3movs.com', self.defaultParams)
+           if not sts: return valTab
+           next = self.cm.ph.getSearchGroups(data, '''pager"><a href=["']([^"^']+?)["].+Next''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="item thumb  ">', '<i class="icon-eye"></i>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=["']([^"^']+?)["].title''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^/^/]+)['"].>''', 1, True)[0].replace('?','')
+              phTitle = phTitle.replace('(','').replace(')','').replace('/','').replace('\\','')
+              phTime = self.cm.ph.getSearchGroups(item, '''time"[>]([^"^'^a-z]+?)[<]''', 1, True)[0]  
+              Added = self.cm.ph.getSearchGroups(item, '''span[>]([^"^-]+?)ag[o]''', 1, True)[0] 
+              if Added:
+                 Added = Added + 'ago'
+              printDBG( 'Video Links: '+ phUrl )
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle)+'\nAdded: '+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None))
+           if next:
+              next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))    
+           return valTab
+        
+
+        if 'ANALDIN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.analdin.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'analdin.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'class="list-categories', 'footer', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<a class="item', '</a>')
+           for item in data2:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'ANALDIN-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           #valTab.insert(0,CDisplayListItem("--- MOST VIEWED ---","MOST VIEWED",     CDisplayListItem.TYPE_CATEGORY,['https://www.analdin.com/most-popular/?mode=async&action=js_stats'],             'ANALDIN-clips',    '', None))
+           #valTab.insert(0,CDisplayListItem("--- TOP RATED ---","TOP RATED",     CDisplayListItem.TYPE_CATEGORY,['https://www.analdin.com/top-rated/'],             'ANALDIN-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- LATEST ---","LATEST",     CDisplayListItem.TYPE_CATEGORY,['https://www.analdin.com/latest-updates/'],             'ANALDIN-clips',    '', None))
+           self.SEARCH_proc='ANALDIN-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'ANALDIN-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.analdin.com/search/%s/' % url.replace(' ','+'), 'ANALDIN-clips')
+           return valTab
+        if 'ANALDIN-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           if not '/search/' in url:
+              url = url + '?mode=async&function=get_block&block_id=list_videos_common_videos_list&sort_by=post_date&from=%s&_=%s' % (self.page, time_time())
+           else:
+              if self.page>1:
+                 url = url + '?mode=async&function=get_block&block_id=list_videos_videos&q=dildo&category_ids=&sort_by=post_date&from_videos=%s&from_albums=%s' % (self.page, self.page)
+           if 'latest-updates' in url:
+              url = url.replace(url.split('/')[-1],'')
+           COOKIEFILE = os_path.join(GetCookieDir(), 'analdin.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="next">', 'Next', False)[1]
+           next = self.cm.ph.getSearchGroups(data, '''from:([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="item', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''class="title">([^>]+?)<''', 1, True)[0].strip() 
+              phImage = self.cm.ph.getSearchGroups(item, '''thumb=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              except: pass
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              #next = url
+              if next.startswith('/'): next = self.MAIN_URL + next
+              url = url.replace(url.split('/')[-1],'')
+              #printDBG( 'Host time data: '+str(time_time()*10)) #.encode('utf-8') )
+              valTab.append(CDisplayListItem('Next ', 'Page: '+str(self.page+1), CDisplayListItem.TYPE_CATEGORY, [url], name, '', 'next'))
+           return valTab
+
+        if 'NETFLIXPORNO' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://netflixporno.net'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'netflixporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'netflixporno.cookie', 'netflixporno.net', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="Title">Categories</div>', '</div><div id="execphp-3"')
+           for item in data:
+              allTitle = self.cm.ph.getDataBeetwenMarkers(item, '<li class="cat-item cat-item', '<div id="execphp-3', False)[1]
+              #phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getAllItemsBeetwenMarkers(allTitle, '<a href="', '">', False)
+              printDBG( 'Linkek listaja: '+str(phUrl ))
+              #phTitle = self.cm.ph.getSearchGroups(phTitle, '''">([^"^'^a^<]+?)[</a>]''', 1, True)[0] 
+              phTitle = self.cm.ph.getAllItemsBeetwenMarkers(allTitle, '/">', '</a>', False)
+              printDBG( 'Cimek: '+ str(phTitle))
+              #phImage = self.cm.ph.getSearchGroups(item, '''rel=['"]([^"^']+?)['"]''', 1, True)[0] 
+           for i in phTitle:
+                 valTab.append(CDisplayListItem(i,i,CDisplayListItem.TYPE_CATEGORY, [phUrl[phTitle.index(i)]],'NETFLIXPORNO-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- XXX SCENES ---","XXX SCENES",     CDisplayListItem.TYPE_CATEGORY,['https://netflixporno.net/adult/'],             'NETFLIXPORNO-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- FEATURED SCENES ---","FEATURED SCENES",     CDisplayListItem.TYPE_CATEGORY,['https://netflixporno.net/scenes/category/featured-scenes/'],             'NETFLIXPORNO-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- MOST POPULAR ---","MOST POPULAR",     CDisplayListItem.TYPE_CATEGORY,['https://netflixporno.net/scenes/?r_sortby=highest_rated&r_orderby=desc'],         'NETFLIXPORNO-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- MOST VIEWS ---","MOST VIEWS",     CDisplayListItem.TYPE_CATEGORY,['https://netflixporno.net/scenes/?v_sortby=views&v_orderby=desc'],         'NETFLIXPORNO-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- NEW ---","NEW",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'NETFLIXPORNO-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- DIGITAL PLAYGROUND ---","DIGITAL PLAYGROUND",     CDisplayListItem.TYPE_CATEGORY,['https://netflixporno.net/scenes/director/digital-playground/'],             'NETFLIXPORNO-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- REALITY KINGS  ---","REALITY KINGS",     CDisplayListItem.TYPE_CATEGORY,['https://netflixporno.net/scenes/director/reality-kings/'],             'NETFLIXPORNO-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- BRAZZERS  ---","BRAZZERS",     CDisplayListItem.TYPE_CATEGORY,['https://netflixporno.net/scenes/director/brazzers/'],             'NETFLIXPORNO-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- MOFOS  ---","MOFOS",     CDisplayListItem.TYPE_CATEGORY,['https://netflixporno.net/scenes/director/mofos/'],             'NETFLIXPORNO-clips',    '', None))
+           self.SEARCH_proc='NETFLIXPORNO-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'NETFLIXPORNO-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://netflixporno.net/?s=%s' % url.replace(' ','+'), 'NETFLIXPORNO-clips')
+           return valTab              
+        if 'NETFLIXPORNO-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'netflixporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'netflixporno.cookie', 'netflixporno.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''<link\s*rel=['"]next['"]\s*href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''Title">([^>]+?)<''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if not 'Ubiqfile' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'NETFLIXPORNO-serwer', phImage, phTitle)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))   
+           return valTab
+        if 'NETFLIXPORNO-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'netflixporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'netflixporno.cookie', 'netflixporno.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           phImage = self.cm.ph.getSearchGroups(data, '''"og:image" content=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="infoloadingdiv">', '<article class="TPost A Single">', False)[1]
+           phUrl = self.cm.ph.getDataBeetwenMarkers(data, 'DoodStream" href="', '" rel=', False)[1]
+           printDBG( 'Lekert cim 1: '+phUrl) 
+           if not phUrl: 
+               phUrl = self.cm.ph.getDataBeetwenMarkers(data, 'Streamzz" href="', '"', False)[1]
+           if not phUrl: 
+               phUrl = self.cm.ph.getDataBeetwenMarkers(data, 'youdbox" href="', '"', False)[1]
+           if not phUrl: 
+               phUrl = self.cm.ph.getDataBeetwenMarkers(data, 'Tape" href="', '"', False)[1]
+           if not phUrl: 
+               phUrl = self.cm.ph.getDataBeetwenMarkers(data, 'upstream.php?link=', '"', False)[1]
+           if not phUrl: 
+               phUrl = self.cm.ph.getDataBeetwenMarkers(data, 'upstream.php?link=', '"', False)[1]
+           if not phUrl: 
+               phUrl = self.cm.ph.getDataBeetwenMarkers(data, 'Netu" href="', '" rel', False)[1]
+               sts, datat = self.cm.getPage(phUrl)
+               phUrl = self.cm.ph.getDataBeetwenMarkers(datat, '<meta property="og:url" content="', '"', False)[1]
+           printDBG( 'Lekert cim 2: '+phUrl) 
+           phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+           phTitle = self.cm.ph.getDataBeetwenMarkers(data, 'title="', ' - on Netu"', False)[1] 
+           valTab.append(CDisplayListItem(decodeHtml(phTitle),phUrl,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           return valTab
+
+        if 'fapset' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://fapset.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fapset.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '<nav class="menu-inner" id="menu-inner">', '</nav>', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<li>', '</li>')
+           for item in data2:
+              phTitle = self._cleanHtmlStr(item)
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'fapset-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- LATEST ---","LATEST VIDEOS",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'fapset-clips',    'https://cdni.pornpics.com/1280/7/256/41067927/41067927_015_f47e.jpg', None))
+           #valTab.insert(0,CDisplayListItem("--- BRAZZERS ---","BRAZZERS VIDEOS",     CDisplayListItem.TYPE_CATEGORY,['https://fapset.com/site/brazzers/'],             'fapset-clips',    'https://images.fineartamerica.com/images/artworkimages/mediumlarge/3/brazzers-logo-heny-richo.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- BLACKED ---","BLACKED VIDEOS",     CDisplayListItem.TYPE_CATEGORY,['https://fapset.com/site/blacked/'],             'fapset-clips',    'https://preview.redd.it/qjgswr5awhi61.png?width=400&format=png&auto=webp&s=551bf56bb116f6d49296e06a96ea7f640783b28d', None))
+           valTab.insert(0,CDisplayListItem("--- BANGBROS ---","BANGBROS VIDEOS",     CDisplayListItem.TYPE_CATEGORY,['https://fapset.com/site/bangbros/'],             'fapset-clips',    'https://i1.sndcdn.com/artworks-000593976420-86a2ge-t500x500.jpg', None))
+           self.SEARCH_proc='fapset-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY','https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        if 'fapset-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://fapset.com/search/%s/' % url.replace(' ','+'), 'fapset-clips')
+           return valTab
+        if 'fapset-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fapset.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''class="next.+?href=['"]([^"^']+?)['"]>&''', 1, True)[0]
+           data = self.cm.ph.getDataBeetwenMarkers(data, '"set_direction_sort" id="set_direction_sort"', 'wrap about cf', False)[1]
+           data = data.split('<article class="shortstory cf">')
+           if len(data): 
+              del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''short_title"[>]([^"^']+?)[<]''', 1, True)[0].replace('Bangbros ? ','')
+              phTitle = phTitle.replace("?","'").replace("&amp;","and")
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"].title''', 1, True)[0] 
+              phViews = self.cm.ph.getSearchGroups(item, '''views">([^>]+?)<''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              except: pass
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle)+'\n'+phViews+' Views',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              number = next.split('=')[-1]
+              valTab.append(CDisplayListItem('Next ', 'Page: '+number, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', 'next'))
+           return valTab
+
+        if 'PORNDROIDS' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.porndroids.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porndroids.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<link rel="next" href="', '" />', False)[1]
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'grid--categories', '<nav class="pagination', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'item--category">', '</figcaption>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''a href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0]
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'porndroid-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Latest Updates ---","Latest Updates",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'porndroid-clips',    'https://cache.careers360.mobi/media/article_images/2019/9/4/JEE-Main-2020-Latest-News-and-Updates.jpg', None))
+           valTab.insert(0,CDisplayListItem("--- Channels ---","Channels",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/channels/'],             'porndroid-channels',    'https://gotblop.com/templates/public/main/chaturbate.png',None))
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---","Pornstars",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/pornstars'],             'porndroid-pornstars',    'https://candy.porn/upload/media/posts/2021-02/25/which-pornstar-suits-you-best_1614282438-b.jpg',None))
+           self.SEARCH_proc='porndroid-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           if next:
+              number = next.split('=')[-1]
+              valTab.append(CDisplayListItem('More Categories', 'More Categories, Page: '+number, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))
+           return valTab
+           
+        if 'porndroid-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.porndroids.com/search/?q=%s' % url.replace(' ','+'), 'porndroid-clips')
+           return valTab
+        
+        if 'porndroid-clips' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porndroids.cookie')
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination" itemprop="url" href="', '" title="', False)[1]
+           if next.startswith('/'): next = self.MAIN_URL + next
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'item--video-thumb">', '</figure>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''video">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              except: pass
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              number = next.split('=')[-1]
+              valTab.append(CDisplayListItem('Next ', 'Page: '+number, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', 'next'))
+           return valTab
+           
+        if 'porndroid-channels' == name:
+            printDBG( 'Host listsItems begin name='+name )
+            COOKIEFILE = os_path.join(GetCookieDir(), 'porndroids.cookie')
+            self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.getPage(url, 'porndroids.cookie', 'porndroids.com', self.defaultParams)
+            if not sts: return ''
+            printDBG( 'Channels Adatok: '+data )
+            next_page = self.cm.ph.getDataBeetwenMarkers(data, '<link rel="next" href="', '" />', False)[1]
+            self.cm.ph.getDataBeetwenMarkers(data, 'grid grid--producer', '<nav class="pagination', False)[1]
+            data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a itemprop', '<meta itemprop')
+            for item in data:
+                phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+                phUrl = self.cm.ph.getSearchGroups(item, '''url" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'porndroid-clips', phImage, None))
+            if next_page: 
+                number = next_page.split('=')[-1]
+                valTab.append(CDisplayListItem('More Channels', 'Next Page: '+number, CDisplayListItem.TYPE_CATEGORY, [next_page], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))
+            return valTab
+            
+        if 'porndroid-pornstars' == name:
+            printDBG( 'Host listsItems begin name='+name )
+            COOKIEFILE = os_path.join(GetCookieDir(), 'porn300.cookie')
+            self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.getPage(url, 'porndroids.cookie', 'porndroids.com', self.defaultParams)
+            if not sts: return ''
+            printDBG( 'Pornstars Adatok: '+data )
+            next_page = self.cm.ph.getDataBeetwenMarkers(data, '<link rel="next" href="', '" />', False)[1]
+            self.cm.ph.getDataBeetwenMarkers(data, 'grid grid--pornstars', '<nav class="pagination', False)[1]
+            data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a itemprop', 'ranking')
+            for item in data:
+                phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+                phUrl = self.cm.ph.getSearchGroups(item, '''url" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'porndroid-clips', phImage, None))
+            if next_page: 
+                number = next_page.split('=')[-1]
+                valTab.append(CDisplayListItem('More Pornstars', 'Next Page: '+number, CDisplayListItem.TYPE_CATEGORY, [next_page], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))
+            return valTab   
+           
+        if 'lovehomeporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://lovehomeporn.com/' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'lovehomeporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.page = 0
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="tag2', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item).strip().capitalize()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'lovehomeporn-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'videos?o=mv'],             'lovehomeporn-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'videos?o=tr'],             'lovehomeporn-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'videos?o=mr'],             'lovehomeporn-clips',    '', None))
+           self.SEARCH_proc='lovehomeporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'lovehomeporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://lovehomeporn.com/search?search_type=videos&search_query=%s' % url.replace(' ','+'), 'lovehomeporn-clips')
+           return valTab
+        if 'lovehomeporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'lovehomeporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', 'Next', False)[1]
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="thumbs-items', 'pagination', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''info">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phImage.endswith('.webp'): phImage = re.sub(r'/260(.*?)195/', '/260%D1%85195/', phImage.replace('webp','jpg'))
+              phImage = strwithmeta(phImage, {'Referer':self.MAIN_URL})
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              next = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next)[-1]
+              next = next.replace('&amp;','&')
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'EROPROFILE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.eroprofile.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'eroprofile.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           cats = '[{"title":"Amateur Moms/Mature","url":"13"},{"title":"Amateur Teens","url":"14"},{"title":"Amateurs","url":"12"},\
+           {"title":"Asian","url":"19"},{"title":"Ass","url":"27"},{"title":"BDSM","url":"25"},{"title":"Big Ladies","url":"5"},\
+           {"title":"Big Tits","url":"11"},{"title":"Bisexual","url":"18"},{"title":"Black / Ebony","url":"20"},{"title":"Celeb","url":"23"},\
+           {"title":"Dogging","url":"33"},{"title":"Facial / Cum","url":"24"},{"title":"Fetish / Kinky","url":"10"},{"title":"Fucking / Sucking","url":"26"},\
+           {"title":"Hairy","url":"7"},{"title":"Interracial","url":"15"},{"title":"Lesbian","url":"6"},{"title":"Lingerie / Panties","url":"30"},\
+           {"title":"Nudist / Voyeur / Public","url":"16"},{"title":"Other / Cartoon","url":"28"},{"title":"Pregnant","url":"32"},\
+           {"title":"Shemale / TS","url":"9"},{"title":"Squirting","url":"34"},{"title":"Swingers / Gangbang","url":"8"}]'
+           result = simplejson.loads(cats)
+           for item in result:
+              title = str(item["title"])
+              id = str(item["url"])
+              url = 'http://www.eroprofile.com/m/videos/search?niche=%s&pnum=%s' % (id, '1')
+              valTab.append(CDisplayListItem(title,title,CDisplayListItem.TYPE_CATEGORY, [url],'EROPROFILE-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Fun Videos ---",       "Fun Videos",       CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/m/videos/search?niche=17"], 'EROPROFILE-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular Videos ---",       "Popular Videos",       CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/m/videos/popular"], 'EROPROFILE-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Videos Home ---",       "Videos Home",       CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/m/videos/home"], 'EROPROFILE-clips', '',None))
+           self.SEARCH_proc='EROPROFILE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'EROPROFILE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.eroprofile.com/m/videos/search?niche=13.14.12.19.27.25.5.11.18.20.23.24.10.26.17.7.15.6.30.16.28.9.8.32.33.34&text=%s&pnum=1' % url.replace(' ','+'), 'EROPROFILE-clips')
+           return valTab
+        if 'EROPROFILE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'eroprofile.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'VideoListPageNav', 'marL', False)[1]
+           data = data.split('<div class="video">')
+           for item in data:
+              printDBG( 'Host listsItems item: '+str(item) )
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle=='': phTitle = self.cm.ph.getSearchGroups(item, '''videoTtl">([^>]+?)<''', 1, True)[0].strip()
+              time = self.cm.ph.getSearchGroups(item, '''videoDur">([^>]+?)<''', 1, True)[0].strip()
+              added = self.cm.ph.getSearchGroups(item, '''fsSmall">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              except: pass
+              if time and not 'Web Analytics' in phTitle and not 'tools' in time:
+                 valTab.append(CDisplayListItem(phTitle,'['+time+'] '+phTitle+'\nAdded: '+added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next)[-1]
+              next = next.replace('&amp;','&')
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next', 'Page: '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))
+           return valTab
+
+        if 'absoluporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.absoluporn.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'absoluporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'pvicon-categorie', 'tags', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(decodeHtml(item)).strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl.replace('..','')
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'absoluporn-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,['http://www.absoluporn.com/en/wall-main-1.html'],             'absoluporn-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['http://www.absoluporn.com/en/wall-note-1.html'],             'absoluporn-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,['http://www.absoluporn.com/en/wall-date-1.html'],             'absoluporn-clips',    '', None))
+           self.SEARCH_proc='absoluporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'absoluporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.absoluporn.com/en/search-%s-1.html' % url.replace(' ','+'), 'absoluporn-clips')
+           return valTab
+        if 'absoluporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'absoluporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').replace('..','')
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           data = data.split('<div class="thumb-main">')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''time">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('=')[-1].replace('.html',''), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+        
+        if 'porngo' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://porngo.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porngo.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porngo.cookie', 'porngo.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           if len(data)<100 and 'Maintenance' in data:
+              msg = _("Last error:\n%s" % data)
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              return valTab
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '<div class="letter-block">', '<div class="letter-block">', False)[1]
+           if ''==data2: data2 = data
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<div class="letter-block__item">', '</div>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(decodeHtml(item)).strip()
+              if phTitle.startswith('-') or ''== phTitle: continue
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'porngo-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'porngo-clips',    '', None))
+           self.SEARCH_proc='porngo-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'porngo-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.porngo.com/search/%s/' % url.replace(' ','-'), 'porngo-clips')
+           return valTab
+        if 'porngo-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porngo.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porngo.cookie', 'porngo.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', '>Next', False)[1]
+           data = data.split('<div class="thumb item ">')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"]+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''pull-right no-rating">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next)[-1]
+              next = next.replace('&amp;','&')
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+ next.split('/')[-2],CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'anybunny' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://anybunny.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anybunny.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anybunny.cookie', 'anybunny.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, 'pvicon-categorie', 'tags', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class=linkscts', '</a>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(decodeHtml(item)).replace('\n','').strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/top/[^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'anybunny-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['http://anybunny.com/top/'],             'anybunny-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,['http://anybunny.com/new/'],             'anybunny-clips',    '', None))
+           self.SEARCH_proc='anybunny-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'anybunny-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://anybunny.com/top/%s' % url.replace(' ','+'), 'anybunny-clips')
+           return valTab
+        if 'anybunny-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anybunny.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anybunny.cookie', 'anybunny.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'topbtmse', '>Next page', False)[1]
+           data = data.split('nuyrfe')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''<span>([^>]+?)<''', 1, True)[0].replace('Video','').strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              next = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next)[-1]
+              next = next.replace('&amp;','&')
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('=')[-1].replace('.html','').replace('page',''), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'XCAFE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://xcafe.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xcafe.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'xcafe.cookie', 'xcafe.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Adatok: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'query-id=', '</span></a></li>', True)
+           printDBG( 'Ãjabb Adatok: '+str(data) )
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title"[>]([^"^']+?)[<]''', 1, True)[0].capitalize()
+              if not phTitle: 
+                 phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].capitalize()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              printDBG( 'KÃ©pek: '+phImage )
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'XCAFE-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='XCAFE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        if 'XCAFE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://xcafe.com/videos/%s/' % url.replace(' ','-'), 'XCAFE-clips')
+           return valTab
+        if 'XCAFE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xcafe.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'xcafe.cookie', 'xcafe.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''"next".href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = data.split('data-rotator=')           
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title"[>]([^"]+?)[<]''', 1, True)[0].capitalize()
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].capitalize()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''a.href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              printDBG('Link to Video: '+ phUrl)
+              Time = self.cm.ph.getSearchGroups(item, '''time"[>]+?([^>^<]+?)[<]/span''', 1, True)[0].strip()
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))
+           return valTab
+
+        if 'MILF300' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.milf300.com/' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'milf300.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'milf300.cookie', 'milf300.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Adatok: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''href=['"]([^"^']+?)['"].rel="next"''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="col-md-3 nopadding">', '</div>', True)
+           printDBG( 'Ãjabb Adatok: '+str(data) )
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=["]([^"^']+?)["]>''', 1, True)[0].capitalize()
+              if not phTitle: 
+                 phTitle = self.cm.ph.getSearchGroups(item, '''title=["]([^"^']+?)["]./><''', 1, True)[0].capitalize()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              printDBG( 'KÃ©pek: '+phImage )
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]><''', 1, True)[0]
+              phUrl = self.MAIN_URL + phUrl
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'MILF300-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='MILF300-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))
+           return valTab
+        
+        if 'MILF300-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.milf300.com/search?q=%s' % url.replace(' ','+'), 'MILF300-clips')
+           return valTab
+        
+        if 'MILF300-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'milf300.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'milf300.cookie', 'milf300.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           now = self.cm.ph.getSearchGroups(data, '''canonical".href=['"]([^"^']+?)['"]./>''', 1, True)[0]
+           if not now:
+              now = self.MAIN_URL + 'search'
+           next = self.cm.ph.getSearchGroups(data, '''page-link".href=['"]([^"^']+?)['"].rel="next"''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="my_thumb">', '<div class="card-body">', True)
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=.+?Videos.[-]([^"]+?)["]''', 1, True)[0].replace("&#039;","'")
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''''', 1, True)[0].replace("&#039;","'")
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'https://www.milf300.com' + phUrl
+              printDBG('Link to Video: '+ phUrl)
+              Time = self.cm.ph.getSearchGroups(item, '''text"[>]+?([^>^<]+?)[<]/div''', 1, True)[0].strip()
+              if phImage:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              next = now + next
+              next = next.replace('amp;', '')
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))
+           return valTab
+
+
+        if 'hqporner' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://hqporner.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hqporner.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hqporner.cookie', 'hqporner.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<section', '</section>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl and phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'hqporner-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='hqporner-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'hqporner-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://hqporner.com/?s=%s' % url.replace(' ','+'), 'hqporner-clips')
+           return valTab
+        if 'hqporner-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hqporner.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hqporner.cookie', 'hqporner.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', '>Next', False)[1]
+           data = data.split('<div class="6u">')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''fa-clock-o meta-data">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              next = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next)[-1]
+              next = next.replace('&amp;','&')
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('=')[-1].replace('.html','').replace('page',''), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'spankbang' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://spankbang.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'spankbang.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           url = 'https://spankbang.com/categories'
+           sts, data = self.getPage(url, 'spankbang.cookie', 'spankbang.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div id="main_tags">', '</ul>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           printDBG( 'Minden adat: '+str(data ))
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''word">([^"^']+?)[<]/a''', 1, True)[0]
+              phImage = 'https://cdni.pornpics.com/1280/5/53/64158477/64158477_004_c328.jpg'
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl + '?o=all'
+              printDBG( 'Links : ' + phUrl)
+              if phUrl and phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'spankbang-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Trending ---","Trending",     CDisplayListItem.TYPE_CATEGORY,['https://spankbang.com/trending_videos/'],             'spankbang-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most_popular/?period=week'],             'spankbang-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/new_videos/'],             'spankbang-clips',    '', None))
+           self.SEARCH_proc='spankbang-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',  '', None)) 
+           return valTab
+        if 'spankbang-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://spankbang.com/s/%s/?o=all' % url.replace(' ','+'), 'spankbang-clips')
+           return valTab
+        if 'spankbang-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'spankbang.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'spankbang.cookie', 'spankbang.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''href=['"]([^"^']+?)['"].class="next"''', 1, True)[0].replace('&amp;','&').replace('..','')
+           if next == '': next = self.cm.ph.getSearchGroups(data, '''<li class="next"><a href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').replace('..','')
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="main_results">', '<div class="video-item clear-fix"', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'data-id="', '</p>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"].class="t''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''"l"[>]([^"^']+?)[<]''', 1, True)[0].strip()
+              if not Time: Time = self.cm.ph.getSearchGroups(item, '''i-len">([^>]+?)<''', 1, True)[0].strip()
+              if not Time: Time = self.cm.ph.getSearchGroups(item, '''</use></svg>([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('//'): next = 'http:' + next
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('/')[-2].replace('.html','').replace('page',''), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+        
+        if 'cumlouder' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.cumlouder.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cumlouder.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'cumlouder.cookie', 'cumlouder.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a tag-url=', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl and phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'cumlouder-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Channels ---","channels",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/channels/'],             'cumlouder-girls',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Series ---","series",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/series/'],             'cumlouder-girls',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Girls ---","girls",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/girls/'],             'cumlouder-girls',    '', None))
+           self.SEARCH_proc='cumlouder-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'cumlouder-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.cumlouder.com/search/?q=%s' % url.replace(' ','+'), 'cumlouder-clips')
+           return valTab
+        if 'cumlouder-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cumlouder.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'cumlouder.cookie', 'cumlouder.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').replace('..','')
+           if next == '': next = self.cm.ph.getSearchGroups(data, '''<li class="next"><a href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').replace('..','')
+           data = data.split('<a class="muestra-escena')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''minutos sprite"></span>([^>]+?)<''', 1, True)[0].strip()
+              if not Time: Time = self.cm.ph.getSearchGroups(item, '''i-len">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''fecha sprite"></span>([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('//'): next = 'http:' + next
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('/')[-2].replace('.html','').replace('page',''), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+        if 'cumlouder-girls' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cumlouder.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'cumlouder.cookie', 'cumlouder.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('class="muestra-escena')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl and phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'cumlouder-clips', phImage, None)) 
+           #valTab.sort(key=lambda poz: poz.name)
+           return valTab
+
+        if 'porn00' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.porn00.org'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porn00.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porn00.cookie', 'porn00.org', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="category-menu', '</ul>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="item"', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip()
+              if ''==phTitle: continue
+              if ''==phUrl: continue
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phUrl:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'porn00-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='porn00-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'porn00-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.porn00.org/search/?q=%s' % url.replace(' ','+'), 'porn00-clips')
+           return valTab              
+        if 'porn00-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porn00.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porn00.cookie', 'porn00.org', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="next">', '</li>', False)[1]
+           data = data.split('<div class="item')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''([\d]?\d\d:\d\d)''', 1, True)[0] 
+              Added = self.cm.ph.getSearchGroups(item, '''added">[<em>]?([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              page = self.cm.ph.getSearchGroups(str(next), '''from:([^"^']+?)['"]''')[0]
+              next = url + '?mode=async&function=get_block&block_id=list_videos_common_videos_list&sort_by=post_date&from='+page
+              valTab.append(CDisplayListItem('Next', 'Page : '+page, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))                
+           return valTab
+
+        if 'watchpornx' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://watchpornx.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'watchpornx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'watchpornx.cookie', 'watchpornx.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'href="#">CATEGORIES</a>', ' href="#">PORNSTARS</a>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'genres menu-item', 'class="menu-item menu')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''">([^"^']+?)[<]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'watchpornx-clips', 'https://k5x5n5g8.ssl.hwcdn.net/content/150501/kassi-presenting-kassi-03.jpg', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---","Pornstars",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'watchpornx-years',    'https://m.media-amazon.com/images/I/61ttgOOwQpL._SL1024_.jpg',"Pornstars"))
+           valTab.insert(0,CDisplayListItem("--- Years ---","Years",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'watchpornx-years',    'https://sytekmarketing.com/img/porn-star-the-body.jpg',"Years"))
+           valTab.insert(0,CDisplayListItem("--- Studios ---","Studios",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'watchpornx-years',    'https://cdn2-thumbs.worldsex.com/albums/20/19844/9063118b66ff5ef1250d8af4c6f7a0a1b5e12cbb_001_620x.jpg',"Studios"))
+           valTab.insert(0,CDisplayListItem("--- Clips & Scenes ---","Clips & Scenes",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/scenes'],             'watchpornx-clips',    'https://xphoto.name/uploads/posts/2022-01/1641946445_2-xphoto-name-p-famous-porn-actress-2.jpg',self.MAIN_URL))
+           #valTab.insert(0,CDisplayListItem("--- Featured ---","Featured",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/category/featured-movies'],             'watchpornx-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'watchpornx-clips',    'https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/701/p-1-how-porn-stars-stay-fit-1517319321.jpg', None))
+           self.SEARCH_proc='watchpornx-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        if 'watchpornx-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://watchpornx.com/?s=%s' % url.replace(' ','+'), 'watchpornx-clips')
+           return valTab              
+        if 'watchpornx-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'watchpornx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'watchpornx.cookie', 'watchpornx.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''<link\s*rel=['"]next['"]\s*href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''Title">([^>]+?)<''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''lazy-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''rel="tag">([^>]+?)<''', 1, True)[0]
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if not 'Ubiqfile' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle)+'\n'+phTime,CDisplayListItem.TYPE_CATEGORY, [phUrl],'watchpornx-serwer', phImage, phTitle)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', None))                
+           return valTab
+        if 'watchpornx-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'watchpornx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'watchpornx.cookie', 'watchpornx.com', self.defaultParams)
+           if not sts: return ''
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           phImage = self.cm.ph.getSearchGroups(data, '''"og:image" content=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'petsdivcontainer">', '<article class="TPost A Single">', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'Rtable1-cell"><a', 'class="Rtable1')
+           printDBG( 'Adatok: '+str(data) )
+           if "Netu" in data[0]:
+               del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=["]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),phUrl,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           return valTab
+        if 'watchpornx-years' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'watchpornx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': False, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'watchpornx.cookie', 'watchpornx.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           #printDBG( 'Host catUrl: '+str(catUrl) )
+           if catUrl == 'Studios':
+              data = self.cm.ph.getDataBeetwenMarkers(data, '>STUDIOS</a>', '</ul>', False)[1]
+           elif catUrl == 'Years':
+              data = self.cm.ph.getDataBeetwenMarkers(data, '">YEARS</a>', '</ul>', False)[1]
+           elif catUrl == 'Pornstars':
+              data = self.cm.ph.getDataBeetwenMarkers(data, '>PORNSTARS</a>', '</ul>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''">([^>]+?)<''', 1, True)[0]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'watchpornx-clips', '', None)) 
+           return valTab
+
+        if 'PORN300' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.porn300.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porn300.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porn300.cookie', 'porn300.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<link rel="next" href="', '" />', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'grid__item--category', '</figcaption>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title--category"[>]([^"^']+?)[<]/h3''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'http:' + phImage + '/' 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORN300-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---","Pornstars",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/pornstars'],             'PORN300-pornstars',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Channels ---","Channels",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/channels/'],             'PORN300-channels',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Home ---","Home",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'PORN300-clips',    '',None))
+           self.SEARCH_proc='PORN300-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           if next_page:
+              number = next_page.split('=')[-1]
+              valTab.append(CDisplayListItem('More Categories', 'More Categories, Page: '+number, CDisplayListItem.TYPE_CATEGORY, [next_page], name, 'https://www.topporntubesites.com/img/0/8/c/f/d/6/Porn300-Logo.png', None))
+           return valTab
+        
+        if 'PORN300-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.porn300.com/search/?q=%s' % url.replace(' ','+'), 'PORN300-clips')
+           return valTab              
+        
+        if 'PORN300-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porn300.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porn300.cookie', 'porn300.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<link rel="next" href="', '" />', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'video-thumb">', '"data__vote">')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''a href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"] a''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''ion-video">([^>]+?)<''', 1, True)[0].strip()
+              Views = self.cm.ph.getSearchGroups(item, '''li>([^/]+?)[ ]v''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+'Views: '+Views,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:              
+              number = next_page.split('/')[-1]
+              valTab.append(CDisplayListItem('Next Page', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, 'https://www.topporntubesites.com/img/0/8/c/f/d/6/Porn300-Logo.png', None))          
+           return valTab
+
+        if 'PORN300-channels' == name:
+            printDBG( 'Host listsItems begin name='+name )
+            COOKIEFILE = os_path.join(GetCookieDir(), 'porn300.cookie')
+            self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.getPage(url, 'porn300.cookie', 'porn300.com', self.defaultParams)
+            if not sts: return ''
+            printDBG( 'Channels Adatok: '+data )
+            next_page = self.cm.ph.getDataBeetwenMarkers(data, '<link rel="next" href="', '" />', False)[1]
+            self.cm.ph.getDataBeetwenMarkers(data, 'grid grid--producer', '<nav class="pagination', False)[1]
+            data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a itemprop', '<meta itemprop')
+            for item in data:
+                phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+                phUrl = self.cm.ph.getSearchGroups(item, '''url" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORN300-clips', phImage, None))
+            if next_page: 
+                number = next_page.split('=')[-1]
+                valTab.append(CDisplayListItem('More Channels', 'Next Page: '+number, CDisplayListItem.TYPE_CATEGORY, [next_page], name, 'https://www.topporntubesites.com/img/0/8/c/f/d/6/Porn300-Logo.png', None))
+            return valTab
+            
+        if 'PORN300-pornstars' == name:
+            printDBG( 'Host listsItems begin name='+name )
+            COOKIEFILE = os_path.join(GetCookieDir(), 'porn300.cookie')
+            self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.getPage(url, 'porn300.cookie', 'porn300.com', self.defaultParams)
+            if not sts: return ''
+            printDBG( 'Pornstars Adatok: '+data )
+            next_page = self.cm.ph.getDataBeetwenMarkers(data, '<link rel="next" href="', '" />', False)[1]
+            self.cm.ph.getDataBeetwenMarkers(data, 'grid grid--pornstars', '<nav class="pagination', False)[1]
+            data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a itemprop', 'ranking')
+            for item in data:
+                phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+                phUrl = self.cm.ph.getSearchGroups(item, '''url" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORN300-clips', phImage, None))
+            if next_page: 
+                number = next_page.split('/')[-1]
+                valTab.append(CDisplayListItem('More Pornstars', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, 'https://www.topporntubesites.com/img/0/8/c/f/d/6/Porn300-Logo.png', None))
+            return valTab
+        
+        if 'pornopersik' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://pornopersik.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornopersik.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornopersik.cookie', 'pornopersik.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<a class="item"')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'http:' + phImage + '/' 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'pornopersik-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular/'+'?sort_by=post_date'],             'pornopersik-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top-rated/'+'?sort_by=post_date'],             'pornopersik-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest ---","Latest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/latest-updates/'+'?sort_by=post_date'],             'pornopersik-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Home ---","Home",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/?sort_by=post_date'],             'pornopersik-clips',    '',None))
+           self.SEARCH_proc='pornopersik-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornopersik-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://pornopersik.com/search/%s/?sort_by=post_date' % url.replace(' ','+'), 'pornopersik-clips')
+           return valTab              
+        if 'pornopersik-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornopersik.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornopersik.cookie', 'pornopersik.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''class="next".*?from:(\d)"''', 1, True)[0] 
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'id="list_videos_most_recent_videos', 'footer', False)[1]
+           if data2: data = data2
+           n = '<div class="item'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''class="duration">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0].strip()
+              if not Added: Added = self.cm.ph.getSearchGroups(item, '''pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if 'label-private">PRIVATE<' in item: phTitle = phTitle + '   {PRIVATE}'
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next_page = url.replace('&'+url.split('&')[-1],'')+'&from='+str(next)
+              if '/search/' in url: next_page = url.replace('&'+url.split('&')[-1],'')+'&from_videos='+str(next)
+              #valTab.append(CDisplayListItem('Next', next_page.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'ANYPORN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://anyporn.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anyporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anyporn.cookie', 'anyporn.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<a class="item"')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'http:' + phImage + '/' 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'anyporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- HD ---","HD",     CDisplayListItem.TYPE_CATEGORY,['https://anyporn.com/categories/hd/?sort_by=post_date'],             'anyporn-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,['https://anyporn.com/popular/?sort_by=post_date'],             'anyporn-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest ---","Latest",     CDisplayListItem.TYPE_CATEGORY,['https://anyporn.com/newest/?sort_by=post_date'],             'anyporn-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- Home ---","Home",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/?sort_by=post_date'],             'anyporn-clips',    '',None))
+           self.SEARCH_proc='anyporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'anyporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://anyporn.com/search/%s/' % url.replace(' ','+'), 'anyporn-clips')
+           return valTab              
+        if 'anyporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anyporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anyporn.cookie', 'anyporn.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''next".*?from:(\d)">Next''', 1, True)[0] 
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'id="list_videos_most_recent_videos', 'footer', False)[1]
+           if data2: data = data2
+           n = "<div class='item"
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''durationid.*?innerHTML\s*?=\s*?"([^"^']+?)"''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0].strip()
+              if not Added: Added = self.cm.ph.getSearchGroups(item, '''pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if 'label-private">PRIVATE<' in item: phTitle = phTitle + '   {PRIVATE}'
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if '?' in url:
+                 next_page = url.replace('&'+url.split('&')[-1],'')+'&from='+str(next)
+              else:
+                 next_page = url.replace('&'+url.split('&')[-1],'')+'?from='+str(next)
+              if '/search/' in url: next_page = url.replace('&'+url.split('&')[-1],'')+'&from_videos='+str(next)
+              #valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+              valTab.append(CDisplayListItem('Next', next_page.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'ANON-V' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://anon-v.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anon-v.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anon-v.cookie', 'anon-v.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<a class="item"')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'http:' + phImage + '/' 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'anon-v-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           #valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,['https://anon-v.com/most-popular/?sort_by=post_date'],             'anon-v-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest ---","Latest",     CDisplayListItem.TYPE_CATEGORY,['https://anon-v.com/latest-updates/?sort_by=post_date'],             'anon-v-clips',    '',None))
+           self.SEARCH_proc='anon-v-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'anon-v-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://anon-v.com/search/%s/' % url.replace(' ','+'), 'anon-v-clips')
+           return valTab              
+        if 'anon-v-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anon-v.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anon-v.cookie', 'anon-v.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''next".*?from:(\d)">Next''', 1, True)[0] 
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'id="list_videos_most_recent_videos', 'footer', False)[1]
+           if data2: data = data2
+           n = '<div class="item'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0].strip()
+              if not Added: Added = self.cm.ph.getSearchGroups(item, '''pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = strwithmeta(phImage, {'Referer':self.MAIN_URL})
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if '?' in url:
+                 next_page = url.replace('&'+url.split('&')[-1],'')+'&from='+str(next)
+              else:
+                 next_page = url.replace('&'+url.split('&')[-1],'')+'?from='+str(next)
+              if '/search/' in url: next_page = url.replace('&'+url.split('&')[-1],'')+'&from_videos='+str(next)
+              #valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+              valTab.append(CDisplayListItem('Next', next_page.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'bravoporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.bravoporn.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bravoporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'bravoporn.cookie', 'bravoporn.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not '/c/' in phUrl: continue
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle=='': continue
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'http:' + phImage + '/' 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'bravoporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Popular ---","Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular/'],             'bravoporn-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/latest-updates/'],             'bravoporn-clips',    '',None))
+           self.SEARCH_proc='bravoporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'bravoporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.bravoporn.com/s/?q=%s' % url.replace(' ','+'), 'bravoporn-clips')
+           return valTab              
+        if 'bravoporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bravoporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'bravoporn.cookie', 'bravoporn.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''<a href=['"]([^"^']+?)['"]\sclass="next nopop"''', 1, True)[0] 
+           n = 'class="video_block'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''time">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0].strip()
+              if not Added: Added = self.cm.ph.getSearchGroups(item, '''pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              #printDBG( 'Host listsItems next: '+next )
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem(_("Next page"), 'Page: '+next.split('/')[-2], CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'bravoteens' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.bravoteens.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bravoteens.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'bravoteens.cookie', 'bravoteens.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<div class="preview-item">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'bravoteens-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top/'],             'bravoteens-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular ---","Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/popular/'],             'bravoteens-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/new/'],             'bravoteens-clips',    '',None))
+           self.SEARCH_proc='bravoteens-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'bravoteens-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.bravoteens.com/search/?q=%s' % url.replace(' ','+'), 'bravoteens-clips')
+           return valTab              
+        if 'bravoteens-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bravoteens.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'bravoteens.cookie', 'bravoteens.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'class="pagination', '</div>', False)[1]
+           n = 'class="preview-item"'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''time">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              try:
+                 next_page = re.compile('</span>.+?<a href="(.+?)"', re.DOTALL).findall(next)[-1]
+                 if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+                 valTab.append(CDisplayListItem(_("Next page"), 'Page: '+next_page.split('/')[-2], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+              except Exception:
+                 printExc()
+           return valTab
+
+        if 'sleazyneasy' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.sleazyneasy.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sleazyneasy.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'sleazyneasy.cookie', 'sleazyneasy.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<div class="thumb">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'sleazyneasy-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top-rated/'],             'sleazyneasy-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular ---","Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular/'],             'sleazyneasy-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/latest-updates/'],             'sleazyneasy-clips',    '',None))
+           self.SEARCH_proc='sleazyneasy-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'sleazyneasy-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.sleazyneasy.com/search/?q=%s' % url.replace(' ','+'), 'sleazyneasy-clips')
+           return valTab              
+        if 'sleazyneasy-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sleazyneasy.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'sleazyneasy.cookie', 'sleazyneasy.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'class="pager', '</div>', False)[1]
+           n = '<span class="thumb-info">'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https://www.sleazyneasy.com/videos/[^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle=='ASACP': continue
+              phImage = self.cm.ph.getSearchGroups(item, '''data-poster=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''<i>([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''truncate">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              try:
+                 next_page = re.compile('href="(.+?)"', re.DOTALL).findall(next)[-1]
+                 if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+                 valTab.append(CDisplayListItem(_("Next page"), 'Page: '+next_page.split('/')[-2], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+              except Exception:
+                 printExc()
+           return valTab
+
+        if 'homepornking' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.homepornking.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'homepornking.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'homepornking.cookie', 'HOMEPORNKING.COM', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="mainthumb">', '</p></span')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'homepornking-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/long/'],             'homepornking-clips',    'https://cdn2.homepornking.com/thumbs/6/279/13952/697601/7.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Popular ---","Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'homepornking-clips',    'https://cdn0.homepornking.com/thumbs/cl/24/1186/59285/2964235.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- New Videos ---","New Videos",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/new/'],             'homepornking-clips',    'https://cdn0.homepornking.com/thumbs/cl/16/810/40478/2023883.jpg',None))
+           self.SEARCH_proc='homepornking-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        if 'homepornking-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.homepornking.com/search/?q=%s' % url.replace(' ','+'), 'homepornking-clips')
+           return valTab              
+        if 'homepornking-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'homepornking.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'homepornking.cookie', 'homepornking.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'link rel="next" href="', '" />', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, "</span><a href=", "</a></span", True)
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phTitle = phTitle.title()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              printDBG( 'KÃ©sz link: '+str(phUrl) )
+              valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle), CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next Page', next, CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', 'Next'))  
+           return valTab
+
+        if 'freeones' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.freeones.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'freeones.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'freeones.cookie', 'freeones.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a  class=" teaser__link"', '<div class="main-indicator-container">')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl + '/videos'
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'freeones-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Latest---","Latest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos/'],             'freeones-clips',    'http://fpfreegals.com/fotos/yf/eleven/3/1.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?l=24&f[status][0]=active&s=votes.average&o=desc'],             'freeones-clips',    'https://cdn.freeones.com/photo-d37/rU/bp/DX6pTtxZrGz9p7Sudf/Candy-Sweet-strips-off-her-yellow-bra-and-panties_ultra.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?l=24&s=views&o=desc'],             'freeones-clips',    'https://cdn.freeones.com/photo-8b0/9k/f4/Max6dhVQXdyfPj3tjS/Curvy-Ava-Addams-in-red-Dress-getting-rammed-hard_001_preview.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?l=24&s=duration&o=desc'],             'freeones-clips',    'https://cdn.freeones.com/photo-045/5H/Ed/FBpEYYqaeVDgJcr9n/Horny-chicks-Darcie-Dolce-and-Georgia-Jones-making-passionate-lesbian-_001_big.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- HD Videos ---","HD Videos",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?f[video.hd]=true'],             'freeones-clips',    'https://cdn.freeones.com/photo-e02/Ms/Mp/ToTNidUHCpcJ7cAGth/Gorgeous-busty-brunette-starlet-Alexis-Fawx-strips-and-toys-her-cunt_007_big.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Channels ---","Channels",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/channels/'],             'freeones-channels',    'https://cdn.freeones.com/photo-ddb/xh/xv/kkB5mmeC8ut5BMLUTh/Blonde-cougar-Kit-Mercer-shows-off-her-fuck-skills_001_big.jpg',None))
+           self.SEARCH_proc='freeones-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        if 'freeones-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.freeones.com/videos?q=%s&' % url.replace(' ','%20'),  'freeones-clips')
+           return valTab              
+        if 'freeones-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'freeones.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'freeones.cookie', 'freeones.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next1 = self.cm.ph.getDataBeetwenMarkers(data, '</page-selector>', '/svg', False)[1]
+           next2 = self.cm.ph.getDataBeetwenMarkers(next1, '</div>', '>Next ', False)[1]
+           next = self.cm.ph.getSearchGroups(next2, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           if next:
+              next = self.MAIN_URL + next 
+           data = data.split('<div data-test="teaser-video"')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^'^#]+?)["]''', 1, True)[0]
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').title()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''title="duration([^>]+?)"''', 1, True)[0]
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle), CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next Page', 'Next Page', CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', 'Next'))  
+           return valTab 
+        
+        if 'freeones-channels' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'freeones.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'freeones.cookie', 'freeones.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next1 = self.cm.ph.getDataBeetwenMarkers(data, '</page-selector>', '/svg', False)[1]
+           next2 = self.cm.ph.getDataBeetwenMarkers(next1, '</div>', '>Next ', False)[1]
+           next = self.cm.ph.getSearchGroups(next2, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a  class=" teaser__link"', '<div class="rating-container">')
+           printDBG( 'CsatornÃ¡k Adatai: '+str(data))
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phUrl = phUrl.replace('feed','videos')              
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').title()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle), CDisplayListItem.TYPE_CATEGORY, [phUrl],'freeones-clips', phImage, None))
+           if next:
+              next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next Page', 'Next Page', CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', 'Next'))  
+           return valTab 
+   
+        if 'mymilfporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://mymilfporn.net'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'mymilfporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           next = self.cm.ph.getSearchGroups(data, '''current"..</a></li><li><a href=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="videos-list">', '<div class="pagination', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href="', 'alt="', True)
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'mymilfporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Viewed Videos ---","Most Viewed Videos",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/?filter=most-viewed'],             'mymilfporn-clips',    'https://cdni.pornpics.com/1280/7/61/68169873/68169873_011_ec63.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Longest Videos ---","Longest Videos",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/?filter=longest'],             'mymilfporn-clips',    'https://cdni.pornpics.com/460/7/22/71444033/71444033_056_2e47.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Popular Videos ---","Popular Videos",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/?filter=popular'],             'mymilfporn-clips',    'https://cdni.pornpics.com/1280/7/61/68169873/68169873_011_ec63.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Latest Videos ---","Latest Videos",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/?filter=latest'],             'mymilfporn-clips',    'https://cdni.pornpics.com/1280/7/360/92129329/92129329_025_df2b.jpg',None))
+           self.SEARCH_proc='mymilfporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           if next:
+              printDBG( 'KÃ¶vi: '+ str(next))
+              valTab.append(CDisplayListItem('Next Page', 'Next Page', CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', 'Next')) 
+           return valTab
+        if 'mymilfporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://mymilfporn.net/?s=%s' % url.replace(' ','+'), 'mymilfporn-clips')
+           return valTab              
+        if 'mymilfporn-clips' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), 'mymilfporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           next = self.cm.ph.getSearchGroups(data, '''current"..</a></li><li><a href=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'Random video', '</article></div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'post type-post', '</div><header')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              printDBG( 'KLIP LINKJE: '+phUrl )
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"]+?)["]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage:
+                 phImage = self.cm.ph.getSearchGroups(item, '''img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''clock-o"></i?[>]+?([^"]+?)[<]/span''', 1, True)[0]
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next Page', 'Next Page', CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', 'Next'))  
+           return valTab 
+
+        if 'familyporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://familyporn.tv'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'familyporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data2 = data.split('<div class="th">')
+           if len(data2): del data2[0]
+           for item in data2:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'familyporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not '/tags/' in phUrl: continue
+              phTitle = self._cleanHtmlStr(item).strip()+'   [tag]'
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'familyporn-clips', phImage, None)) 
+           self.SEARCH_proc='familyporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'familyporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://familyporn.tv/search/%s/' % url.replace(' ','+'), 'familyporn-clips')
+           return valTab              
+        if 'familyporn-clips' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), 'familyporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'class="page-current">', '</nav>', False)[1]
+           n = 'data-item-id='
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle=='': continue
+              phImage = self.cm.ph.getSearchGroups(item, '''data-poster=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''time"></i><span>([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''calendar"></i><span>([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              try:
+                 tmp = self.cm.ph.getAllItemsBeetwenMarkers(next, '<li>', '</li>')
+                 for item in tmp:
+                    next = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''')[0]
+                    if next=='': error
+                    if next.startswith('/'): next = self.MAIN_URL + next
+                 valTab.append(CDisplayListItem(_("Next page"), 'Page : '+next.split('/')[-2], CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))  
+              except Exception:
+                 printExc()
+           return valTab 
+
+        if 'bitporno' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://bitporno.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bitporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not '/cat-' in phUrl: continue
+              phTitle = self._cleanHtmlStr(item).strip()
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'bitporno-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='bitporno-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'bitporno-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.bitporno.com/?q=%s' % url.replace(' ','+'), 'bitporno-clips')
+           return valTab              
+        if 'bitporno-clips' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bitporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'class="pages-active"', 'class="pages"', False)[1]
+           n = '<div class="entry square_entry'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''<div style.*?>([^>]+?)<''', 1, True)[0]
+              if phTitle=='': continue
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''time"></i><span>([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''</a> - ([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              try:
+                 next = self.cm.ph.getSearchGroups(next, '''href=['"]([^"^']+?)['"]''')[0]
+                 if next.startswith('/'): next = self.MAIN_URL + next
+                 valTab.append(CDisplayListItem(_("Next page"), 'Page : '+next.split('-')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))  
+              except Exception:
+                 printExc()
+           return valTab 
+
+        if 'PERVCLIPS' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pervclips.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'PERVCLIPS.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="items-list', '<div class="box bottom-items">', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="item">', '</span>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''p.class="title"[>]([^"^']+?)[<]''', 1, True)[0].strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PERVCLIPS-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='PERVCLIPS-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', 'https://img2.thejournal.ie/inline/2398415/original/?width=630&version=2398415', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        'https://www.hyperpoolgroup.co.za/wp-content/uploads/2018/07/Product-Search.jpg', None)) 
+           return valTab
+        if 'PERVCLIPS-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pervclips.com/tube/search/?q=%s' % url.replace(' ','+'), 'PERVCLIPS-clips')
+           return valTab              
+        if 'PERVCLIPS-clips' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), 'PERVCLIPS.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''href=['"]([^"^']+?)['"].+title="Next"''', 1, True)[0]
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="items-list">', '<li class="item active">', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="item thumb desktop-thumb"', '<span class="rating"')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle=='': continue
+              if phUrl=='': continue
+              phImage = self.cm.ph.getSearchGroups(item, '''loading.+?src=['"]([^"^']+?)?["]''', 1, True)[0]
+              if not phImage:
+                 phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)[/]..jpg''', 1, True)[0]
+                 phImage = phImage + '/1.jpg'
+                 try:
+                    phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://cdn.pervclips.com'})
+                 except: pass
+              printDBG('KÃ©pek: ' + phImage)
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''Published" content=["]([^>]+?)["]>''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle)+'\nAdded: '+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, self.FullUrl(phImage), None))
+           if next:
+              try:
+                 if next.startswith('/'): next = self.MAIN_URL + next
+                 valTab.append(CDisplayListItem(_("Next page"), 'Page : '+next.split('/')[-2], CDisplayListItem.TYPE_CATEGORY, [next], name, 'http://www.clker.com/cliparts/n/H/d/S/N/j/green-next-page-button-hi.png', 'Next'))  
+              except Exception:
+                 printExc()
+           return valTab 
+ 
+		   
+        return valTab
+
+    def getLinksForVideo(self, url):
+        printDBG("Urllist.getLinksForVideo url[%s]" % url)
+        videoUrls = []
+        uri, params   = DMHelper.getDownloaderParamFromUrl(url)
+        printDBG(params)
+        uri = urlparser.decorateUrl(uri, params)
+       
+        urlSupport = self.up.checkHostSupport( uri )
+        if 1 == urlSupport:
+            retTab = self.up.getVideoLinkExt( uri )
+            videoUrls.extend(retTab)
+            printDBG("Video url[%s]" % videoUrls)
+            return videoUrls
+
+    def getParser(self, url):
+        printDBG( 'Host getParser begin' )
+        printDBG( 'Host getParser mainurl: '+self.MAIN_URL )
+        printDBG( 'Host getParser url    : '+url )
+        if url.startswith('http://www.4tube.com'):                    return 'http://www.4tube.com'
+        if url.startswith('https://www.4tube.com'):                   return 'http://www.4tube.com'
+        if url.startswith('https://www.fux.com'):                     return 'http://www.4tube.com'
+        if url.startswith('http://www.pornerbros.com'):               return 'http://www.4tube.com'
+        if url.startswith('https://www.pornerbros.com'):              return 'http://www.4tube.com'
+        if url.startswith('https://www.porntube.com'):                return 'http://www.4tube.com'
+        if url.startswith('https://www.ah-me.com'):                   return 'http://www.ah-me.com'
+        if url.startswith('https://www.pornhat.com/'):                return 'https://www.pornhat.com/'
+        if url.startswith('https://pornhat.com/'):                    return 'https://www.pornhat.com/'
+        if url.startswith('https://ruleporn.com'):                    return 'https://ruleporn.com'
+        if url.startswith('http://www.drtuber.com'):                  return 'http://www.drtuber.com'
+        if url.startswith('http://www.eporner.com'):                  return 'http://www.eporner.com'
+        if url.startswith('http://www.yourupload.com'):               return 'https://www.yourupload.com'
+        if url.startswith('http//yourupload.com'):                    return 'https://www.yourupload.com'
+        if url.startswith('https://www.yourupload.com'):              return 'https://www.yourupload.com'
+        if url.startswith('https://yourupload.com'):                  return 'https://www.yourupload.com'
+        if url.startswith('https://www.hclips.com'):                  return 'http://www.hclips.com'
+        if url.startswith('https://hclips.com'):                      return 'http://www.hclips.com'
+        if url.startswith('http://www.hdporn.net'):                   return 'http://www.hdporn.net'
+        if url.startswith('http://hdsite.net'):                       return 'https://hdsite.net'
+        if url.startswith('https://hdsite.net'):                      return 'https://hdsite.net'
+        if url.startswith('https://www.alohatube.com'):               return 'https://www.alohatube.com'
+        if url.startswith('http://hentaigasm.com'):                   return 'http://hentaigasm.com'
+        if url.startswith('http://www.homemoviestube.com'):           return 'http://www.homemoviestube.com'
+        if url.startswith('https://zbporn.com'):                       return 'https://zbporn.com'
+        if url.startswith('https://www.katestube.com'):               return 'https://www.katestube.com'
+        if url.startswith('http://www.katestube.com'):                return 'https://www.katestube.com'
+        if url.startswith('https://www.koloporno.com'):               return 'https://www.koloporno.com'
+        if url.startswith('https://mangovideo'):                      return 'https://mangovideo'
+        if url.startswith('https://videos.porndig.com'):              return 'https://porndig.com'
+        if url.startswith('https://www.playvids.com'):                return 'https://www.playvids.com'
+        if url.startswith('https://glavmatures.com'):                 return 'https://glavmatures.com'
+        if url.startswith('https://mymilfporn.net'):                  return 'https://mymilfporn.net'
+        if url.startswith('http://www.pornhd.com'):                   return 'http://www.pornhd.com'
+        if url.startswith('http://www.pornhub.com/embed/'):           return 'http://www.pornhub.com/embed/'
+        if url.startswith('https://www.pornhub.com/embed/'):          return 'http://www.pornhub.com/embed/'
+        if url.startswith('http://pl.pornhub.com/embed/'):            return 'http://www.pornhub.com/embed/'
+        if url.startswith('http://pl.pornhub.com'):                   return 'http://www.pornhub.com'
+        if url.startswith('http://www.pornhub.com'):                  return 'http://www.pornhub.com'
+        if url.startswith('https://www.pornhub.com'):                 return 'http://www.pornhub.com'
+        if url.startswith('http://m.pornhub.com'):                    return 'http://m.pornhub.com'
+        if url.startswith('http://pornicom.com'):                     return 'http://pornicom.com'
+        if url.startswith('https://pornicom.com'):                    return 'http://pornicom.com'
+        if url.startswith('http://www.pornicom.com'):                 return 'http://pornicom.com'
+        if url.startswith('https://www.pornicom.com'):                return 'http://pornicom.com'
+        if url.startswith('https://www.pornoxo.com'):                 return 'https://www.pornoxo.com'
+        if url.startswith('http://www.pornrabbit.com'):               return 'http://www.pornrabbit.com'
+        if url.startswith('https://www.pornrewind.com'):              return 'https://www.pornrewind.com'
+        if url.startswith('https://motherless.com'):                  return 'https://motherless.com'
+        if url.startswith('https://www.homepornking.com'):            return 'https://www.homepornking.com'
+        if url.startswith('https://www.motherless.com'):              return 'https://motherless.com'
+        if url.startswith('http://embed.redtube.com'):                return 'http://embed.redtube.com'
+        if url.startswith('http://www.redtube.com'):                  return 'http://www.redtube.com'
+        if url.startswith('https://spankbang.com'):                   return 'https://spankbang.com'
+        if url.startswith('http://www.thumbzilla.com'):               return 'http://www.thumbzilla.com'
+        if url.startswith('http://www.tnaflix.com'):                  return 'https://www.tnaflix.com'
+        if url.startswith('https://alpha.tnaflix.com'):               return 'https://alpha.tnaflix.com'
+        if url.startswith('http://www.tube8.com/embed/'):             return 'http://www.tube8.com/embed/'
+        if url.startswith('http://www.tube8.com'):                    return 'http://www.tube8.com'
+        if url.startswith('http://m.tube8.com'):                      return 'http://m.tube8.com'
+        if url.startswith('https://www.tube8.com'):                   return 'http://www.tube8.com'
+        if url.startswith('https://www.deviants.com'):                return 'https://www.deviants.com'
+        if url.startswith('https://pornone.com'):                     return 'https://pornone.com'
+        if url.startswith('http://xhamster.com'):                     return 'http://xhamster.com'
+        if url.startswith('https://xhamster.com'):                    return 'http://xhamster.com'
+        if url.startswith('https://xh.video'):                        return 'http://xhamster.com'
+        if url.startswith('http://www.xnxx.com'):                     return 'http://www.xnxx.com'
+        if url.startswith('http://www.xvideos.com'):                  return 'http://www.xvideos.com'
+        if url.startswith('https://porngo.com'):                      return 'https://porngo.com'
+        if url.startswith('http://www.youjizz.com'):                  return 'http://www.youjizz.com'
+        if url.startswith('https://www.youporn.com/embed/'):           return 'https://www.youporn.com/embed/'
+        if url.startswith('https://www.youporn.com'):                  return 'https://www.youporn.com'
+        if url.startswith('https://www.youporn.com'):                 return 'https://www.youporn.com'
+        if url.startswith('https://sxyprn.com'):                      return 'https://yourporn.sexy'
+        if url.startswith('https://mini.zbiornik.com'):               return 'https://mini.zbiornik.com'
+        if url.startswith('http://sexkino.to'):                       return 'http://sexkino.to'
+        if url.startswith('http://www.plashporn.com'):                return 'http://sexkino.to'
+        if url.startswith('http://www.alphaporno.com'):               return 'http://www.tubewolf.com'
+        if url.startswith('http://crocotube.com'):                    return 'http://www.tubewolf.com'
+        if url.startswith('http://www.tubewolf.com'):                 return 'http://www.tubewolf.com'
+        if url.startswith('http://zedporn.com'):                      return 'http://www.tubewolf.com'
+        if url.startswith('https://www.alphaporno.com'):              return 'http://www.tubewolf.com'
+        if url.startswith('https://crocotube.com'):                   return 'http://www.tubewolf.com'
+        if url.startswith('https://www.tubewolf.com'):                return 'http://www.tubewolf.com'
+        if url.startswith('https://zedporn.com'):                     return 'http://www.tubewolf.com'
+        if url.startswith('https://www.ashemaletube.com'):            return 'https://www.ashemaletube.com'
+        if url.startswith('https://upstream.to'):                     return 'https://upstream.to'
+        if url.startswith('https://prostream.to'):                    return 'https://prostream.to'
+        if url.startswith('https://www.bigtitslust.com'):             return 'https://www.sleazyneasy.com'
+        if url.startswith('https://www.bravotube.net'):               return 'http://www.hdporn.net'        
+
+# URLPARSER
+        if url.startswith('https://gounlimited.to'):                  return 'xxxlist.txt'
+        if url.startswith('http://gounlimited.to'):                   return 'xxxlist.txt'
+        if url.startswith('http://openload.co'):                      return 'xxxlist.txt'
+        if url.startswith('https://oload.tv'):                        return 'xxxlist.txt'
+        if url.startswith('http://www.cda.pl'):                       return 'xxxlist.txt'
+        if url.startswith('http://hqq.tv'):                           return 'xxxlist.txt'
+        if url.startswith('https://hqq.tv'):                          return 'xxxlist.txt'
+        if url.startswith('http://hqq.to'):                           return 'xxxlist.txt'
+        if url.startswith('https://hqq.to'):                          return 'xxxlist.txt'
+        if url.startswith('https://www.rapidvideo.com'):              return 'xxxlist.txt'
+        if url.startswith('http://videomega.tv'):                     return 'xxxlist.txt'
+        if url.startswith('http://www.flashx.tv'):                    return 'xxxlist.txt'
+        if url.startswith('http://streamcloud.eu'):                   return 'xxxlist.txt'
+        if url.startswith('http://thevideo.me'):                      return 'xxxlist.txt'
+        if url.startswith('https://vidoza.net'):                      return 'xxxlist.txt'
+        if url.startswith('http://fileone.tv'):                       return 'xxxlist.txt'
+        if url.startswith('https://fileone.tv'):                      return 'xxxlist.txt'
+        if url.startswith('https://streamcherry.com'):                return 'xxxlist.txt'
+        if url.startswith('https://vk.com'):                          return 'xxxlist.txt'
+        if url.startswith('https://www.fembed.com'):                  return 'xxxlist.txt'
+        if url.startswith('https://videobin.co'):                     return 'https://videobin.co'
+        if url.startswith('http://dato.porn'):                        return 'https://dato.porn'
+        if url.startswith('https://dato.porn'):                       return 'https://dato.porn'
+        if url.startswith('http://datoporn.co'):                      return 'https://dato.porn'
+        if url.startswith('https://datoporn.co'):                     return 'https://dato.porn'
+        if url.startswith('http://datoporn.com'):                     return 'https://dato.porn'
+        if url.startswith('https://www.datoporn.com'):                return 'https://dato.porn'
+        if url.startswith('https://sinparty.com'):                    return 'https://sinparty.com'
+        if url.startswith('https://vidlox.tv'):                       return 'https://vidlox.tv'
+        if url.startswith('http://pornvideos4k.com/en'):              return 'http://pornvideos4k.com/en'
+        if url.startswith('https://www.watchmygf.me'):                return 'https://mangovideo'
+        if self.MAIN_URL == 'https://www.freeomovie.to/':             return 'xxxlist.txt'
+        if self.MAIN_URL == 'https://streamporn.pw':                  return 'xxxlist.txt' 
+        if self.MAIN_URL == 'http://www.xxxstreams.org':              return 'xxxlist.txt' 
+        if self.MAIN_URL == 'https://pandamovie.info':                return 'xxxlist.txt' 
+        if self.MAIN_URL == 'https://www.pornrewind.com':             return 'xxxlist.txt'
+        if self.MAIN_URL == 'http://netflixporno.net':                return 'xxxlist.txt'
+        if self.MAIN_URL == 'https://watchpornx.com':                 return 'xxxlist.txt'
+        if self.MAIN_URL == 'https://ebuxxx.net':                     return 'xxxlist.txt'
+        
+# A TO DO ...
+        if url.startswith('http://www.slutsxmovies.com/embed/'): return 'http://www.nuvid.com'
+        if url.startswith('http://www.cumyvideos.com/embed/'):   return 'http://www.nuvid.com'
+        #if url.startswith('http://www.x3xtube.com'):         return 'file: '
+        if url.startswith('http://www.nuvid.com'):           return 'http://www.nuvid.com'
+        if url.startswith('http://hornygorilla.com'):        return 'file: '
+        #if url.startswith('http://www.vikiporn.com'):        return '1file: "'
+        if url.startswith('http://www.fetishshrine.com'):    return 'file: '
+        if url.startswith('http://www.sunporno.com'):        return 'http://www.sunporno.com'
+        if url.startswith('http://theclassicporn.com'):      return "video_url: '"
+        if url.startswith('http://www.faphub.xxx'):          return 'http://www.faphub.xxx'
+        if url.startswith('http://www.sleazyneasy.com'):     return 'file: '
+        if url.startswith('http://www.proporn.com'):         return 'http://www.proporn.com'
+        if url.startswith('http://www.tryboobs.com'):        return "video_url: '"
+        if url.startswith('http://www.viptube.com'):         return 'http://www.nuvid.com'
+        if url.startswith('http://www.jizz.us'):             return 'http://www.x3xtube.com'
+        if url.startswith('http://www.pornstep.com'):        return 'videoFile="'
+        if url.startswith('http://www.azzzian.com'):         return "video_url: '"
+        if url.startswith('http://www.porndreamer.com'):     return 'http://www.x3xtube.com'
+        if url.startswith('http://www.tubeon.com'):          return 'http://www.tubeon.com'
+        if url.startswith('http://www.finevids.xxx'):        return "video_url: '"
+        if url.startswith('http://www.xfig.net'):            return 'videoFile="'
+        if url.startswith('http://www.pornoid.com'):         return "video_url: '"
+        if url.startswith('http://tubeq.xxx'):               return 'http://www.faphub.xxx'
+        if url.startswith('http://www.wetplace.com'):        return "video_url: '"
+        if url.startswith('http://sexylies.com'):            return 'http://sexylies.com'
+        if url.startswith('http://www.eskimotube.com'):      return 'http://www.eskimotube.com'
+        if url.startswith('http://www.pornalized.com'):      return "video_url: '"
+        if url.startswith('http://www.porn5.com'):           return 'http://www.porn5.com'
+        if url.startswith('https://www.pornheed.com'):       return 'https://www.pornheed.com'
+        if url.startswith('http://www.pornyeah.com'):        return 'http://www.pornyeah.com'
+        if url.startswith('http://www.porn.com'):            return 'http://www.porn5.com'
+        if url.startswith('http://www.yeptube.com'):         return 'http://www.yeptube.com'
+        if url.startswith('http://www.pornpillow.com'):      return 'http://www.pornpillow.com'
+        if url.startswith('http://porneo.com'):              return 'http://www.nuvid.com'
+        if url.startswith('http://www.5fing.com'):           return 'file: '
+        if url.startswith('http://www.pornroxxx.com'):       return "0p'  : '"
+        if url.startswith('http://www.hd21.com'):            return "0p'  : '"
+        #if url.startswith('https://www.pornrox.com'):         return "0p'  : '"
+        if url.startswith('https://www.gotporn.com'):        return 'https://www.gotporn.com'
+        if url.startswith('https://www.pornwhite.com'):      return 'https://www.deviants.com'
+        if url.startswith('https://www.wankoz.com'):         return 'https://www.deviants.com'
+        if url.startswith('https://xcafe.com'):              return 'https://www.deviants.com'
+        if url.startswith('https://www.boundhub.com'):       return 'https://www.deviants.com'
+        if url.startswith('https://www.shameless.com'):      return 'https://www.deviants.com'
+        if url.startswith('https://www.pornid.xxx'):         return 'https://www.pornid.xxx'
+        if url.startswith('https://www.3movs.com'):          return 'https://www.3movs.com'
+        if url.startswith('https://www.pervclips.com'):      return 'https://www.3movs.com'
+        if url.startswith('https://hqbang.com/'):            return 'https://www.3movs.com'
+        if url.startswith('https://www.milf300.com/'):       return 'https://www.milf300.com/'
+        if url.startswith('http://www.pornrox.com'):         return 'https://www.alohatube.com'
+        if url.startswith('https://anyporn.com'):            return 'https://anyporn.com'
+        if url.startswith('http://www.flyflv.com'):          return 'http://www.flyflv.com'
+        if url.startswith('http://www.xtube.com'):           return 'https://vidlox.tv'
+        if url.startswith('http://xxxkingtube.com'):         return 'http://xxxkingtube.com'
+        if url.startswith('http://www.boyfriendtv.com'):     return 'source src="'
+        if url.startswith('http://pornxs.com'):              return 'http://pornxs.com'
+        if url.startswith('http://pornsharing.com'):         return 'http://pornsharing.com'
+        if url.startswith('http://www.vivatube.com'):        return 'http://vivatube.com'
+        if url.startswith('http://www.clipcake.com'):        return 'videoFile="'
+        if url.startswith('http://www.cliplips.com'):        return 'videoFile="'
+        if url.startswith('http://www.sheshaft.com'):        return 'file: '
+        if url.startswith('http://www.vid2c.com'):           return 'videoFile="'
+        if url.startswith('http://www.bonertube.com'):       return 'videoFile="'
+        if url.startswith('https://hellmoms.com/'):          return 'https://xbabe.com'
+        if url.startswith('https://streamtape.com'):         return 'xxxlist.txt'
+        if url.startswith('https://filemoon.sx'):            return 'https://filemoon.sx'
+        if url.startswith('https://doodstream.com'):         return 'xxxlist.txt'
+        if url.startswith('https://doodstream.com'):         return 'xxxlist.txt'
+        if url.startswith('https://www.doodstream.com'):     return 'xxxlist.txt'
+        if url.startswith('https://dood.pm'):                return 'xxxlist.txt'
+        if url.startswith('https://www.dood.pm'):            return 'xxxlist.txt'
+        if url.startswith('https://dood.re'):                return 'xxxlist.txt'
+        if url.startswith('https://www.dood.re'):            return 'xxxlist.txt'
+        if url.startswith('https://dood.pm'):                return 'xxxlist.txt'
+        if url.startswith('https://dood.re'):                return 'xxxlist.txt'
+        if url.startswith('https://www.bravoporn.com'):      return 'https://anyporn.com'
+        if url.startswith('https://www.bravoteens.com'):     return 'https://anyporn.com'
+        if url.startswith('https://www.sexvid.xxx'):         return 'https://familyporn.tv'
+        if url.startswith('https://www.momvids.com'):        return 'https://www.momvids.com'
+        if url.startswith('https://sextubefun.com/'):        return 'https://sextubefun.com/'
+        if url.startswith('https://www.pornburst.xxx/'):     return 'https://www.pornburst.xxx/'
+        if url.startswith('https://www.xxxbule.com/'):       return 'https://www.xxxbule.com/'
+        if url.startswith('https://www.porndig.com'):        return 'https://www.porndig.com'
+
+# Test mjpg
+        if url.endswith('.mjpg'):                            return 'mjpg_stream'
+        if url.endswith('.cgi'):                             return 'mjpg_stream'
+        if self.MAIN_URL == 'https://zbporn.com':            return 'https://zbporn.com'
+        if self.MAIN_URL == 'https://www.alphaporno.com':    return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.boundhub.com':      return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.shameless.com/':    return self.MAIN_URL
+        if self.MAIN_URL == 'https://pornone.com':           return self.MAIN_URL
+        if self.MAIN_URL == 'https://sxyprn.com':            return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.moviefap.com':      return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.pornid.xxx':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.homemoviestube.com': return 'http://www.homemoviestube.com'
+        if self.MAIN_URL == 'https://xcafe.com':             return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.porndig.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.alohatube.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.4tube.com':         return 'http://www.4tube.com'
+        if self.MAIN_URL == 'https://www.fux.com':           return 'http://www.4tube.com'
+        if self.MAIN_URL == 'https://www.pornerbros.com':    return 'http://www.4tube.com'
+        if self.MAIN_URL == 'https://www.porntube.com':      return 'http://www.4tube.com'
+        if self.MAIN_URL == 'https://www.playvids.com':      return self.MAIN_URL
+        if self.MAIN_URL == 'https://motherless.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://tubepornclassic.com':    return 'http://tubepornclassic.com'
+        if self.MAIN_URL == 'http://dansmovies.com':         return 'http://dansmovies.com'
+        if self.MAIN_URL == 'https://www.koloporno.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.perfectgirls.xxx':  return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.milf300.com/':      return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.yuvutu.com':         return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.thumbzilla.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.wankoz.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.filmyporno.tv':      return self.MAIN_URL
+        if self.MAIN_URL == 'https://glavmatures.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'https://sinparty.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.pornheed.com':      return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.pornwhite.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.porntrex.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'http://porn720.net':            return self.MAIN_URL
+        if self.MAIN_URL == 'http://rusporn.tv':             return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.megatube.xxx':      return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.el-ladies.com':      return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.movids.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'https://pl.bongacams.com':      return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.tnaflix.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'https://pornmaki.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.drtuber.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.pornhat.com/':      return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.youjizz.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'https://fullporner.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.amateurporn.net':    return self.MAIN_URL
+        if self.MAIN_URL == 'https://chaturbate.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.ah-me.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.pornrabbit.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.tube8.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.redtube.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.youporn.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'http://showup.tv':              return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.xnxx.com':           return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.xvideos.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://hentaigasm.com':         return self.MAIN_URL
+        if self.MAIN_URL == 'http://xhamsterlive.com':       return 'http://xhamster.com/cams'
+        if self.MAIN_URL == 'http://xhamster.com':           return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.eporner.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.pornhub.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.4tube.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.hdporn.net':         return self.MAIN_URL
+        if self.MAIN_URL == 'http://m.tube8.com':            return self.MAIN_URL
+        if self.MAIN_URL == 'http://m.pornhub.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.katestube.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.hclips.com':         return 'http://www.hclips.com'
+        if self.MAIN_URL == 'https://xbabe.com':             return 'https://xbabe.com'
+        if self.MAIN_URL == 'https://www.txxx.com':          return 'https://www.txxx.com'
+        if self.MAIN_URL == 'https://www.sunporno.com':      return 'http://www.sunporno.com'
+        if self.MAIN_URL == 'http://sexu.com':               return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.tubewolf.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'https://streamate.com':         return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.pornburst.xxx/':    return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.adulttvlive.net':    return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.balkanjizz.com':    return self.MAIN_URL 
+        if self.MAIN_URL == 'https://pornorussia.mobi':      return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.letmejerk.com':     return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.gotporn.com':       return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.3movs.com':         return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.deviants.com':      return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.analdin.com':       return self.MAIN_URL 
+        if self.MAIN_URL == 'https://fapset.com':            return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.porndroids.com':    return 'https://www.porndroids.com'
+        if self.MAIN_URL == 'https://lovehomeporn.com/':     return self.MAIN_URL
+        if self.MAIN_URL == 'https://mompornonly.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.eroprofile.com':    return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.absoluporn.com':     return self.MAIN_URL 
+        if self.MAIN_URL == 'http://anybunny.com':           return self.MAIN_URL  
+        if self.MAIN_URL == 'https://hqporner.com':          return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.naked.com':         return self.MAIN_URL  
+        if self.MAIN_URL == 'https://www.cumlouder.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.porn00.org':         return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.porn300.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'https://pornopersik.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'https://anyporn.com':           return self.MAIN_URL
+        if self.MAIN_URL == 'https://anon-v.com':            return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.bravoporn.com':     return 'https://anyporn.com'
+        if self.MAIN_URL == 'https://www.bravoteens.com':    return 'https://anyporn.com'
+        if self.MAIN_URL == 'https://www.sleazyneasy.com':   return 'https://www.sleazyneasy.com'
+        if self.MAIN_URL == 'https://www.homepornking.com':  return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.freeones.com':      return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.youx.xxx':          return self.MAIN_URL
+        if self.MAIN_URL == 'https://xxxdessert.com':        return 'https://www.youx.xxx'
+        if self.MAIN_URL == 'https://www.pornalin.com':      return 'https://www.youx.xxx'
+        if self.MAIN_URL == 'https://mymilfporn.net':        return self.MAIN_URL
+        if self.MAIN_URL == 'https://porngo.com':            return self.MAIN_URL
+        if self.MAIN_URL == 'https://familyporn.tv':         return self.MAIN_URL
+        if self.MAIN_URL == 'https://bitporno.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'https://sextubefun.com/':       return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.pornburst.xxx/':    return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.xxxbule.com/':      return 'https://www.xxxbule.com/'
+        return ''
+
+    def getResolvedURL(self, url):
+        printDBG( 'Host getResolvedURL begin' )
+        printDBG( 'Host getResolvedURL url: '+url )
+        videoUrl = ''
+        parser = self.getParser(url)
+        printDBG( 'Host getResolvedURL parser: '+parser )
+        #if parser == '': return url
+
+        if 'gounlimited.to' in url:
+            if 'embed' not in url:
+                url = 'https://gounlimited.to/embed-{0}.html'.format(url.split('/')[3])
+        if 'clipwatching.com' in url:
+            if 'embed' not in url:
+                video_id = self.cm.ph.getSearchGroups(url, 'clipwatching.com/([A-Za-z0-9]{12})[/.-]')[0]
+                url = 'http://clipwatching.com/embed-{0}.html'.format(video_id)
+
+        if parser == 'mjpg_stream':
+           try:
+              stream=urllib.urlopen(url)
+              bytes=''
+              while True:
+                 bytes+=stream.read(1024)
+                 a = bytes.find('\xff\xd8')
+                 b = bytes.find('\xff\xd9')
+                 if a!=-1 and b!=-1:
+                    jpg = bytes[a:b+2]
+                    bytes= bytes[b+2:]
+                    with open('/tmp/obraz.jpg', 'w') as titleFile:  
+                       titleFile.write(jpg) 
+                       return 'file:///tmp/obraz.jpg'
+           except: pass
+           return ''
+
+        if parser == 'http://www.porntrex.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porntrex.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porntrex.cookie', 'porntrex.com', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+str(data) )
+           if 'video is a private' in data:
+              SetIPTVPlayerLastHostError(_(' This video is a private.'))
+              return []
+           if self.format4k:
+              videoPage = self.cm.ph.getSearchGroups(data, '''video_alt_url5: ['"]([^"^']+?)['"]''')[0] 
+              if videoPage:
+                 printDBG( 'Host videoPage video_alt_url5 4k: '+videoPage )
+                 return strwithmeta(videoPage, {'Referer':url})
+              videoPage = self.cm.ph.getSearchGroups(data, '''video_alt_url4: ['"]([^"^']+?)['"]''')[0] 
+              if videoPage:
+                 printDBG( 'Host videoPage video_alt_url4 High HD: '+videoPage )
+                 return strwithmeta(videoPage, {'Referer':url})
+              videoPage = self.cm.ph.getSearchGroups(data, '''video_alt_url3: ['"]([^"^']+?)['"]''')[0] 
+              if videoPage:
+                 printDBG( 'Host videoPage video_alt_url3 Full High: '+videoPage )
+                 return strwithmeta(videoPage, {'Referer':url})
+           videoPage = self.cm.ph.getSearchGroups(data, '''video_alt_url2: ['"]([^"^']+?)['"]''')[0] 
+           if videoPage:
+              printDBG( 'Host videoPage video_alt_url2 HD: '+videoPage )
+              return strwithmeta(videoPage, {'Referer':url})
+           videoPage = self.cm.ph.getSearchGroups(data, '''video_alt_url: ['"]([^"^']+?)['"]''')[0] 
+           if videoPage:
+              printDBG( 'Host videoPage video_alt_url Medium: '+videoPage )
+              return strwithmeta(videoPage, {'Referer':url})
+           videoPage = self.cm.ph.getSearchGroups(data, '''video_url: ['"]([^"^']+?)['"]''')[0] 
+           if videoPage:
+              printDBG( 'Host videoPage video_url Low: '+videoPage )
+              return strwithmeta(videoPage, {'Referer':url})
+           return ''
+
+        if parser == 'http://www.hclips.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hclips.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hclips.cookie', 'hclips.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = re.search('video_url":"([^"]+)', data).group(1)
+           replacemap = {'M':'\u041c', 'A':'\u0410', 'B':'\u0412', 'C':'\u0421', 'E':'\u0415', '=':'~', '+':'.', '/':','}
+           for key in replacemap:
+               videoUrl = videoUrl.replace(replacemap[key], key)
+           videoUrl = base64.b64decode(videoUrl)
+           if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           if videoUrl.startswith('/'): videoUrl = 'https://hclips.com' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'https://mompornonly.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'mompornonly.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return ''
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<video class', 'fillToContainer', False)[1]
+           phUrl = self.cm.ph.getDataBeetwenMarkers(data, 'src="', '"', False)[1]
+           printDBG( 'Vege: '+str(phUrl) )
+           return phUrl
+        
+        if parser == 'http://pornvideos4k.com/en':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornvideos4k.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return ''
+           phUrl = self.cm.ph.getDataBeetwenMarkers(data, "<video id='my-video' ><source src='", "' type='video/mp4", False)[1]
+           phUrl = 'https:' + phUrl
+           printDBG( 'Vege: '+str(phUrl) )
+           return phUrl
+        
+        
+        if parser == 'http://tubepornclassic.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tubepornclassic.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'tubepornclassic.cookie', 'tubepornclassic.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = ph.search(data, '''video_url":"([^"]+?)"''')[0]
+           replacemap = {'M':'\u041c', 'A':'\u0410', 'B':'\u0412', 'C':'\u0421', 'E':'\u0415', '=':'~', '+':'.', '/':','}
+           for key in replacemap:
+               videoUrl = videoUrl.replace(replacemap[key], key)
+           videoUrl = base64.b64decode(videoUrl)
+           if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           if videoUrl.startswith('/'): videoUrl = 'https://tubepornclassic.com' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'http://www.hdzog.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdzog.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hdzog.cookie', 'hdzog.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           posturl = 'https://%s/sn4diyux.php' % url.split('/')[2]
+           pC3 = re.search('''pC3:'([^']+)''', data)
+           if not pC3: return ''
+           pC3 = pC3.group(1)
+           vidid = re.search('''video_id["|']?:\s?(\d+)''', data).group(1)
+           postdata = '%s,%s' % (vidid, pC3)
+           sts, data = self.getPage(posturl, 'hclips.cookie', 'hclips.com', self.defaultParams, post_data={'param': postdata})
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = re.search('video_url":"([^"]+)', data).group(1)
+           printDBG( 'Host videoUrl:%s' % videoUrl )
+           replacemap = {'M':'\u041c', 'A':'\u0410', 'B':'\u0412', 'C':'\u0421', 'E':'\u0415', '=':'~', '+':'.', '/':','}
+           for key in replacemap:
+               videoUrl = videoUrl.replace(replacemap[key], key)
+           videoUrl = base64.b64decode(videoUrl)
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'https://www.alohatube.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'alohatube.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'alohatube.cookie', 'alohatube.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Video Adat: '+ url)
+           if 'pornrox.com' in url:
+              videoUrl = self.cm.ph.getDataBeetwenMarkers(data, '"contentUrl": "','"', False)[1]
+              videoUrl = videoUrl.replace('\/', '/')
+              printDBG( 'Pornrox Link:' +videoUrl )
+              return videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+        
+        if parser == 'https://xbabe.com':
+           sts, data = self.get_Page(url)
+           Urls = self.cm.ph.getDataBeetwenMarkers(data, '<video id="', 'is_mobile', False) [1]
+           videoUrls = self.cm.ph.getAllItemsBeetwenMarkers(Urls, 'src="', '" title', False)
+           videoUrl = videoUrls[-1]
+           return videoUrl
+
+        if parser == 'http://showup.tv':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'showup.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host getResolvedURL query error url: '+url )
+              return ''
+           printDBG( 'Host getResolvedURL data: '+data )
+           parse = re.search("var srvE = '(.*?)'", data, re.S)
+           if parse:
+              printDBG( 'Host Url: '+url)
+              printDBG( 'Host rtmp: '+ parse.group(1))
+              rtmp = parse.group(1)
+           startChildBug = re.search("startChildBug\(user\.uid, '', '([\s\S]+?)'", data, re.I);
+           if startChildBug:
+              s = startChildBug.group(1)
+              printDBG( 'Host startChildBug: '+ s)
+              ip = ''
+              t = re.search(r"(.*?):(.*?)", s, re.I)
+              if t.group(1) == 'j12.showup.tv': ip = '94.23.171.122'
+              if t.group(1) == 'j13.showup.tv': ip = '94.23.171.121'
+              if t.group(1) == 'j11.showup.tv': ip = '94.23.171.115'
+              if t.group(1) == 'j14.showup.tv': ip = '94.23.171.120'
+              printDBG( 'Host IP: '+ip)
+              port = s.replace(t.group(1)+':', '')
+              printDBG( 'Host Port: '+port)
+              modelName = url.replace('http://showup.tv/','')
+              printDBG( 'Host modelName: '+modelName)
+
+              libsPath = GetPluginDir('libs/')
+              import sys
+              sys.path.insert(1, libsPath)
+              import websocket 
+              wsURL1 = 'ws://'+s
+              wsURL2 = 'ws://'+ip+':'+port
+              printDBG( 'Host wsURL1: '+wsURL1)
+              printDBG( 'Host wsURL2: '+wsURL2)
+              ws = websocket.create_connection(wsURL2)
+
+              zapytanie = '{ "id": 0, "value": ["", ""]}'
+              zapytanie = zapytanie.decode("utf-8")
+              printDBG( 'Host zapytanie1: '+zapytanie)
+              ws.send(zapytanie) 
+              result = ws.recv()
+              printDBG( 'Host result1: '+result)
+
+              zapytanie = '{ "id": 2, "value": ["%s"]}' % modelName
+              zapytanie = zapytanie.decode("utf-8")
+              printDBG( 'Host zapytanie2: '+zapytanie)
+              ws.send(zapytanie) 
+              result = ws.recv()
+              printDBG( 'Host result2: '+result)
+
+              playpath = re.search('value":\["(.*?)"', result)
+
+              if playpath:
+                 Checksum =  playpath.group(1)  
+                 if len(Checksum)<30: 
+                    for x in range(1, 10): 
+                       ws.send(zapytanie)
+                       result = ws.recv()
+                       czas = re.search('(\d+)\[:\](\d+)\[', result )
+                       if czas:
+                          printDBG( 'Host czas.group(1): '+czas.group(1) )
+                          printDBG( 'Host czas.group(2): '+czas.group(2) )
+                          czas = int(czas.group(1)) - int(czas.group(2))
+                          printDBG( 'Host a: '+str(czas) )
+                          a = str(czas)
+                          if a=='0': a = 'kilka'
+                          Checksum = 'PRIVATE - Czekaj '+a+' sekund'
+                          break
+                    if Checksum=='' or Checksum=='failure': Checksum='OFFLINE'
+                    ws.close() 
+                    SetIPTVPlayerLastHostError(Checksum)
+                    return []
+                 videoUrl = 'rtmp://cdn-t0.showup.tv:1935/webrtc/'+Checksum+'_aac' # token=fake'
+                 ws.close() 
+                 try:
+                    import commands
+                    for x in range(1, 9): 
+                       cmd = '/usr/bin/rtmpdump -B 1 -r "%s"' % videoUrl.replace('cdn-t0','cdn-t0'+str(x))
+                       wow = commands.getoutput(cmd)
+                       printDBG( 'HostXXX cmd > '+ cmd )
+                       #printDBG( 'HostXXX rtmpdump > '+ wow )
+                       if not 'StreamNotFound' in wow:
+                          return videoUrl.replace('cdn-t0','cdn-t0'+str(x))+' live=1'
+                       printDBG( 'HostXXX GUZIK ' )
+                 except:
+                    printDBG( 'HostXXX error commands.getoutput ' )
+                 return videoUrl.replace('cdn-t0','cdn-t01')+' live=1'
+
+           return ''
+
+        def base_myfreecam(serwer, url):
+           data = ''
+           newurl = 'http://video%s.myfreecams.com:1935/NxServer/mfc_%s.f4v_aac/playlist.m3u8' % (serwer, url)
+           try:
+              data = urllib2.urlopen(newurl, timeout=1)
+              #printDBG( 'Host data.meta:  '+str(data.meta) )
+           except:
+              printDBG( 'Host error newurl:  '+newurl )
+           if data:
+              return newurl
+
+        def _get_stream_uid(username):
+           m = hashlib.md5(username.encode('utf-8') + str(time_time()).encode('utf-8'))
+           return m.hexdigest()
+
+        if parser == 'https://pl.bongacams.com':
+           printDBG( 'Host url:  '+url )
+           username = url 
+           printDBG( 'Host username:  '+username )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bongacams.cookie')
+           host = 'Mozilla/5.0 (iPad; CPU OS 8_1_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B466 Safari/600.1.4'
+           header = {'User-Agent': host, 'Accept':'text/html,application/json','Accept-Language':'en,en-US;q=0.7,en;q=0.3', 'Referer':'https://en.bongacams.com/'+username, 'Origin':'https://en.bongacams.com'} 
+           self.defaultParams = { 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+           sts, data = self.cm.getPage('https://en.bongacams.com/'+username, self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Parser Bonga data: '+data ) 
+           amf = self.cm.ph.getSearchGroups(data, '''MobileChatService\(\'\/([^"^']+?)\'\+\$''')[0] 
+           if not amf: amf = 'tools/amf.php?x-country=pl&m=1&res='
+           url_amf = 'https://en.bongacams.com/' + amf + str(random.randint(2100000, 3200000))
+           printDBG( 'Host url_amf:  '+url_amf )
+           postdata = {'method' : 'getRoomData', 'args[]' : username} 
+           header = {'User-Agent': host, 'Accept':'text/html,application/xhtml+xml,application/xml,application/json','Accept-Language':'en,en-US;q=0.7,en;q=0.3','X-Requested-With':'XMLHttpRequest', 'Referer':'https://en.bongacams.com/'+username, 'Origin':'https://en.bongacams.com'} 
+           self.defaultParams = { 'url': url_amf, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': True, 'return_data': True }
+           sts, data = self.cm.getPage(url_amf, self.defaultParams, postdata)
+           if not sts: return ''
+           #printDBG( 'Parser Bonga link2: '+data ) 
+           serwer = self.cm.ph.getSearchGroups(data, '''"videoServerUrl":['"]([^"^']+?)['"]''', 1, True)[0] 
+           printDBG( 'Parser Bonga serwer: '+serwer ) 
+           url_m3u8 = 'https:' + serwer.replace('\/','/') + '/hls/stream_' +username + '/playlist.m3u8'
+           if serwer: 
+              videoUrl = urlparser.decorateUrl(url_m3u8, {'User-Agent': host, 'Referer':'https://bongacams.com/'+username})
+              if self.cm.isValidUrl(videoUrl): 
+                 tmp = getDirectM3U8Playlist(videoUrl)
+                 #if not tmp: return ''
+                 try: tmp = sorted(tmp, key=lambda item: int(item.get('bitrate', '0')))
+                 except Exception: pass
+                 for item in tmp:
+                    printDBG( 'Host listsItems valtab: '  +str(item))
+                 try:
+                    if item['bitrate']=='unknown': 
+                       return ''
+                    return item['url']
+                    printDBG( 'item bitrate: '  +str(item['bitrate']))
+                 except Exception: pass
+           return ''
+
+        if parser == 'https://www.momvids.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'momvids.cookie')
+           self.cm.HEADER = {'User-Agent': self.cm.getDefaultHeader()['User-Agent'], 'X-Requested-With': 'XMLHttpRequest'}
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'momvids.cookie', 'momvids.com', self.defaultParams)
+           if not sts: return ''
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           if not videoUrl:  
+              videoUrl = self.cm.ph.getSearchGroups(data, '''video_alt_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           printDBG( 'Final URL: ' + videoUrl )
+           return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent': self.HTTP_HEADER['User-Agent']})
+           return ''
+
+        if parser == 'https://fullporner.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fullporner.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           MainUrl = self.cm.ph.getSearchGroups(data, '''src=["']([^"^']+?)["] sandbox''', 1, True)[0] 
+           if MainUrl.startswith('//'): MainUrl = 'https:' + MainUrl
+           sts, data = self.get_Page(MainUrl)
+           if not sts: return '' 
+           videoUrl = self.cm.ph.getSearchGroups(data, '''720p HD</a> : <a href=['"]([^"]+?)['"] style''', 1, True)[0] 
+           if not videoUrl:
+              videoUrl = self.cm.ph.getSearchGroups(data, '''360p</a> : <a href=['"]([^"]+?)['"] style''', 1, True)[0] 
+           if not videoUrl:
+              videoUrl = self.cm.ph.getSearchGroups(data, '''it: <a href=['"]([^"]+?)['"] style''', 1, True)[0] 
+           if not videoUrl:
+              videoUrl = self.cm.ph.getSearchGroups(data, '''source src=.?['"]([^"]+?)['"] ''', 1, True)[0].replace('\\','')
+           if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           return videoUrl
+
+        if parser == 'https://www.camsoda.com/':
+            if 'rtmp' in url:
+                rtmp = 1
+            else:
+                rtmp = 0
+            url = url.replace('rtmp','')
+            query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+            try: data = self.cm.getURLRequestData(query_data)
+            except:
+                printDBG( 'Host getResolvedURL query error url: '+url )
+                return ''
+            #printDBG( 'Host getResolvedURL data: '+data )
+            dane = '['+data+']'
+            #printDBG( 'Host listsItems json: '+dane )
+            result = simplejson.loads(dane)
+            if result:
+                try:
+                    for item in result:
+                        token = str(item["token"])
+                        app = str(item["app"])
+                        serwer = str(item["edge_servers"][0])
+                        #edge_servers2 = str(item["edge_servers"][1])
+                        stream_name = str(item["stream_name"])
+                        #printDBG( 'Host listsItems token: '+token )
+                        #printDBG( 'Host listsItems app: '+app )
+                        #printDBG( 'Host listsItems edge_servers1: '+serwer )
+                        #printDBG( 'Host listsItems edge_servers2: '+edge_servers2 )
+                        #printDBG( 'Host listsItems stream_name: '+stream_name )
+                        name = re.sub('-enc.+', '', stream_name)
+                        if rtmp == 0:
+                            #Url = 'https://%s/%s/mp4:%s_mjpeg/playlist.m3u8?token=%s' % (serwer, app, stream_name, token )
+                            Url = 'https://%s/%s/mp4:%s_aac/playlist.m3u8?token=%s' % (serwer, app, stream_name, token )
+                            USER_AGENT = 'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:52.0) Gecko/20100101 Firefox/52.0'
+                            Url = urlparser.decorateUrl(Url, {'User-Agent': USER_AGENT})
+                            if self.cm.isValidUrl(Url): 
+                                tmp = getDirectM3U8Playlist(Url)
+                                for item in tmp:
+                                    #printDBG( 'Host listsItems valtab: '  +str(item))
+                                    if str(item["with"])=='0':
+                                        SetIPTVPlayerLastHostError(' OFFLINE')
+                                        return []
+                                    return item['url']
+                            SetIPTVPlayerLastHostError(' OFFLINE')
+                            return []
+                        else:
+                            Url = 'rtmp://%s:1935/%s?token=%s/ playpath=?mp4:%s swfUrl=https://www.camsoda.com/lib/video-js/video-js.swf live=1 pageUrl=https://www.camsoda.com/%s' % (serwer, app, token, stream_name, name)
+                            return Url
+                except Exception: printExc()
+            return ''
+
+        if parser == 'xxxlist.txt':
+           videoUrls = self.getLinksForVideo(url)
+           if videoUrls:
+              for item in videoUrls:
+                 Url = item['url']
+                 Name = item['name']
+                 printDBG( 'Host url:  '+Url )
+                 return Url
+           return ''
+           
+        if parser == 'http://xhamster.com/cams':
+           config='http://xhamsterlive.com/api/front/config'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamsterlive.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(config)
+           if not sts: return ''
+           printDBG( 'Host listsItems data1: '+data )
+           parse = re.search('"sessionHash":"(.*?)"', data, re.S) 
+           if not parse: return ''
+           sessionHash = parse.group(1) 
+           printDBG( 'Host sessionHash: '+sessionHash )
+
+           models='http://xhamsterlive.com/api/front/models'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamsterlive.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(models)
+           if not sts: return ''
+           printDBG( 'Host listsItems data2: '+data )
+           result = simplejson.loads(data)
+           try:
+              for item in result["models"]:
+                 ID = str(item["id"]) 
+                 Name = item["username"]
+                 BroadcastServer = item["broadcastServer"]
+                 swf_url = 'http://xhamsterlive.com/assets/cams/components/ui/Player/player.swf?bgColor=2829099&isModel=false&version=1.5.892&bufferTime=1&camFPS=30&camKeyframe=15&camQuality=85&camWidth=640&camHeight=480'
+                 Url = 'rtmp://b-eu10.stripcdn.com:1935/%s?sessionHash=%s&domain=xhamsterlive.com playpath=%s swfUrl=%s pageUrl=http://xhamsterlive.com/cams/%s live=1 ' % (BroadcastServer, sessionHash, ID, swf_url, Name) 
+                 Url = 'rtmp://b-eu10.stripcdn.com:1935/%s?sessionHash=%s&domain=xhamsterlive.com playpath=%s swfVfy=%s pageUrl=http://xhamsterlive.com/cams/%s live=1 ' % (BroadcastServer, sessionHash, ID, swf_url, Name) 
+                 if ID == url: 
+                    return urlparser.decorateUrl(Url, {'Referer': 'https://xhamsterlive.com/cams/'+Name, 'iptv_livestream': True}) 
+           except Exception:
+              printExc()
+           return ''
+
+        if parser == 'http://www.redtube.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'redtube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           #printDBG( 'Elemek listaja: '+data )
+           result = self.cm.ph.getDataBeetwenMarkers(data, 'mp4","videoUrl":"', '","remote":true}],"', False) [1]
+           allUrl = result.replace("/api","/").replace("\/","/")
+           printDBG( 'Result eredmenye: '+allUrl )
+           
+           sts, data = self.get_Page(allUrl)
+           if not sts: return ''
+           printDBG( 'Lekerve: '+data )
+           #hlsUrl = self.cm.ph.getAllItemsBeetwenMarkers(data, 'videoUrl":"', '"},{"' False)
+           hlsUrl = self.cm.ph.getDataBeetwenMarkers(data, 'videoUrl":"', '"},{"', False) [1]
+           videoUrl = hlsUrl.replace("\/","/")
+           printDBG( 'Ez a vege: '+videoUrl )
+           return videoUrl
+          
+        if parser == 'http://www.tube8.com/embed/':
+           return self.getResolvedURL(url.replace(r"embed/",r""))
+        
+        if parser == 'http://www.pornhub.com/embed/':
+           return self.getResolvedURL(url.replace(r"embed/",r"view_video.php?viewkey="))
+
+        if parser == 'http://www.tube8.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tube8.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           #printDBG( 'Host getResolvedURL data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''quality_720p['"]:['"]([^"^']+?)['"]''')[0] 
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''quality_480p['"]:['"]([^"^']+?)['"]''')[0] 
+           return videoUrl.replace('\/','/') 
+
+        if parser == 'http://www.4tube.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), '4tube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           if url.startswith('https://www.4tube.com'):
+              self.HTTP_HEADER['Origin'] = 'https://www.4tube.com'
+           elif url.startswith('https://www.fux.com'):
+              self.HTTP_HEADER['Origin'] = 'https://www.fux.com'
+           elif url.startswith('https://www.pornerbros.com'):
+              self.HTTP_HEADER['Origin'] = 'https://www.pornerbros.com'
+           elif url.startswith('https://www.porntube.com'):
+              self.HTTP_HEADER['Origin'] = 'https://www.porntube.com'
+           self.HTTP_HEADER['Referer'] = url
+
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           domena = url.split('/')[2].replace ('www.','')
+           printDBG( 'Host domain: '+domena )
+
+           videoID = re.findall('data-id="(\d+)".*?data-quality="(\d+)"', data, re.S)
+           try:
+              init = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE\s*?=\s*?['"]([^"^']+?)['"]''', 1, True)[0] 
+              init = urllib.unquote(base64.b64decode(init))
+              #printDBG( 'Host listsItems init: '+init )
+              try:
+                 result = byteify(simplejson.loads(init)["page"])
+              except Exception:
+                 printExc()
+                 result = byteify(simplejson.loads(data))
+              videoID = result["video"]["mediaId"]
+              info = {}
+              res = ''
+              for item in result["video"]["encodings"]:
+                 res += str(item["height"]) + "+"
+              res.strip('+')
+              posturl = "https://token.%s/0000000%s/desktop/%s" % (domena, videoID, res)
+              printDBG( 'Host getResolvedURL posturl: '+posturl )
+              sts, data = self.get_Page(posturl)
+              if not sts: return ''
+              printDBG( 'Host getResolvedURL posturl data1: '+data )
+              videoUrl = re.findall('token":"(.*?)"', data, re.S)
+              if videoUrl: return videoUrl[-2]     
+           except Exception:
+              printExc()
+           if videoID:
+              res = ''
+              for x in videoID:
+                  res += x[1] + "+"
+              res.strip('+')
+              posturl = "https://token.%s/0000000%s/desktop/%s" % (domena, videoID[-1][0], res)
+              printDBG( 'Host getResolvedURL posturl: '+posturl )
+              sts, data = self.get_Page(posturl)
+              if not sts: return ''
+              printDBG( 'Host getResolvedURL posturl data2: '+data )
+              videoUrl = re.findall('token":"(.*?)"', data, re.S)
+              if videoUrl: return videoUrl[-2]                 
+              else: return ''
+           return ''
+
+        if parser == 'https://zbporn.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbporn.cookie')
+           host = "Mozilla/5.0 (Linux; U; Android 4.1.1; en-us; androVM for VirtualBox ('Tablet' version with phone caps) Build/JRO03S) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30"
+           header = {'User-Agent': host, 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}   
+           try: data = self.cm.getURLRequestData({ 'url': url, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host getResolvedURL query error url: '+url )
+              return ''
+           printDBG( 'Host getResolvedURL data: '+data )
+           videoUrl =  self.cm.ph.getDataBeetwenMarkers(data, "video_url: '", "',", False) [1]
+           return videoUrl
+
+        if parser == 'https://www.txxx.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'txxx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'txxx.cookie', 'txxx.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = re.search('video_url":"([^"]+)', data).group(1)
+           replacemap = {'M':'\u041c', 'A':'\u0410', 'B':'\u0412', 'C':'\u0421', 'E':'\u0415', '=':'~', '+':'.', '/':','}
+           for key in replacemap:
+               videoUrl = videoUrl.replace(replacemap[key], key)
+           videoUrl = base64.b64decode(videoUrl)
+           if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           if videoUrl.startswith('/'): videoUrl = 'https://txxx.com' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'https://www.youporn.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           self.defaultParams['header']['Referer'] = url
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           result = self.cm.ph.getSearchGroups(data, '''"videoUrl":['"]([^'"]+?)['"]''')[0].replace('&amp;','&').replace(r"\/",r"/")
+           allUrl = result.replace("/api","https://www.youporn.com/api")
+           #printDBG( 'Ezt talaltam: '+allUrl )
+           sts, data = self.get_Page(allUrl)         
+           #printDBG( 'Lekerve: '+data )
+           hlsUrl = self.cm.ph.getDataBeetwenMarkers(data, 'videoUrl":"', '","', False) [1]
+           videoUrl = hlsUrl.replace("\/","/").replace('\u0026', '&')
+           #printDBG( 'Ez a vege: '+videoUrl )
+           return videoUrl
+           
+
+        # make by 12asdfg12
+        def ssut51(str):
+            str = re.sub(r'\D', '', str)
+            sut = 0
+            for i in range(0, len(str)):
+                sut += int(str[i])
+            return sut
+
+        if parser == 'https://yourporn.sexy':
+           for x in range(1, 99): 
+              COOKIEFILE = os_path.join(GetCookieDir(), 'yourporn.cookie')
+              self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+              self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+              self.defaultParams['header']['Origin'] = 'https://sxyprn.com'
+              sts, data = self.getPage(url, 'yourporn.cookie', 'sxyprn.com', self.defaultParams)
+              if not sts: return ''
+              #printDBG( 'Host listsItems data: '+str(data) )
+              videoUrl = self.cm.ph.getSearchGroups(data, '''data-vnfo=['"].*?:['"]([^"^']+?)['"]''')[0].replace(r"\/",r"/")
+              if videoUrl:
+                 printDBG( 'Host listsItems videoUrl: '+videoUrl )
+                 if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+                 if videoUrl.startswith('/'): videoUrl = 'https://sxyprn.com' + videoUrl
+                 try:
+                    match = re.search('src="(/js/main[^"]+)"', data, re.DOTALL | re.IGNORECASE)
+                    if match.group(1).startswith('/'): result = 'https://sxyprn.com' + match.group(1)
+                    sts, jsscript = self.getPage(result, 'yourporn.cookie', 'sxyprn.com', self.defaultParams)
+                    replaceint = re.search(r'tmp\[1\]\+= "(\d+)";', jsscript, re.DOTALL | re.IGNORECASE).group(1)
+                    videoUrl = videoUrl.replace('/cdn/', '/cdn%s/' % replaceint)
+                 except:
+                    if '/cdn/' in videoUrl: videoUrl = videoUrl.replace('/cdn/','/cdn'+str(self.yourporn)+'/')
+                 videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': url, 'Origin': 'https://sxyprn.com'}) 
+                 tmp = videoUrl.split('/')
+                 a = str(int(tmp[-3]) - ssut51(re.sub(r'\D', '', tmp[-2])) - ssut51(re.sub(r'\D', '', tmp[-1])))
+                 if int(a)>0: 
+                    tmp[-3] = a
+                 else: 
+                    tmp[-3] = str(int(tmp[-3])-101)
+                 videoUrl = '/'.join(tmp)
+              self.defaultParams['max_data_size'] = 0
+              sts, data = self.getPage(videoUrl, 'yourporn.cookie', 'sxyprn.com', self.defaultParams)
+              if not sts: return ''
+              if not 'sxyprn' in data.meta['url']: return data.meta['url']
+           return ''
+
+        if parser == 'https://www.playvids.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'playvids.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'playvids.cookie', 'playvids.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''hls-src720=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if ''==videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''hls-src480=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if ''==videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''hls-src360=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+
+           videoUrl = self.cm.ph.getSearchGroups(data, '''src720=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''src480=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''src360=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+           return ''
+
+        if parser == 'http://www.tubewolf.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tubewolf.cookie')
+           for x in range(1, 10): 
+              self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+              self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+              sts, data = self.get_Page(url)
+              if not sts: return ''
+              printDBG( 'Host listsItems data: '+data )
+              data = self.cm.ph.getDataBeetwenMarkers(data, '<video id', '</video>', False)[1]
+              videoUrl = re.findall('<source\ssrc="(.*?)"', data, re.S)
+              if videoUrl:
+                 return videoUrl[-1]
+
+        if parser == 'https://streamate.com':
+            COOKIEFILE = os_path.join(GetCookieDir(), 'streamate.cookie')
+            url = 'https://streamate.com/blacklabel/hybrid/?name={}&lang=en&manifestUrlRoot=https://sea1c-ls.naiadsystems.com/sea1c-edge-ls/80/live/s:'.format(url)
+            query_data = { 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+            try:
+                data = self.cm.getURLRequestData(query_data)
+            except Exception as e:
+                printExc()
+                printDBG( 'Host listsItems query error url:'+url )
+                return ''
+            printDBG( 'Host listsItems data: '+data )
+            url =  self.cm.ph.getSearchGroups(data, '''data-manifesturl=['"]([^"^']+?)['"]''')[0] 
+            header = {'Referer': 'https://streamate.com', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}
+            query_data = { 'url': url, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+            try:
+                data = self.cm.getURLRequestData(query_data)
+            except Exception as e:
+                printExc()
+                printDBG( 'Host listsItems query error url:'+url )
+                return ''
+            printDBG( 'Host listsItems data2: '+data )
+            try:
+                videoinfo = simplejson.loads(data)
+                videoUrl = videoinfo['formats']['mp4-hls']['manifest']
+                videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': 'https://streamate.com', 'iptv_livestream': True}) 
+                if '.m3u8' in videoUrl:
+                    if self.cm.isValidUrl(videoUrl): 
+                        tmp = getDirectM3U8Playlist(videoUrl)
+                        for item in tmp:
+                            printDBG( 'Host listsItems valtab: '  +str(item))
+                            return item['url']
+                return videoUrl
+            except Exception as e:
+                printExc()
+            return ''
+
+        if parser == 'http://www.youjizz.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youjizz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+
+           #host = 'iPhone'
+           #header = {'User-Agent': host, 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'X-Requested-With':'XMLHttpRequest'}   
+           #try: data = self.cm.getURLRequestData({ 'url': url, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           #except:
+           #   printDBG( 'Host getResolvedURL query error url: '+url )
+           #   return ''
+           #printDBG( 'Host getResolvedURL data: '+data )
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"1080","filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&")
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"720","filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&")
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"480","filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&")
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"360","filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&") 
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"288","filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&") 
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"270","filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&")
+           videoPage = self.cm.ph.getSearchGroups(data, '''"filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&")
+           videoPage = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0] 
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&")
+
+           error = self.cm.ph.getDataBeetwenMarkers(data, '<p class="text-gray">', '</p>', False)[1]
+           if error:
+              SetIPTVPlayerLastHostError(_(error))
+              return []
+           return ''
+
+        if parser == 'https://www.ashemaletube.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'ASHEMALETUBE.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'ASHEMALETUBE.cookie', 'ashemaletube.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           if 'sources: ' in data:
+              try:
+                 sources = self.cm.ph.getDataBeetwenMarkers(data, 'sources: ', ']', False)[1]
+                 result = byteify(simplejson.loads(sources+']'))
+                 for item in result:
+                    if str(item["desc"])=='720p' and str(item["active"])=='true': return str(item["src"])
+                    if str(item["desc"])=='480p' and str(item["active"])=='true': return str(item["src"])
+                    if str(item["desc"])=='360p' and str(item["active"])=='true': return str(item["src"])
+              except Exception as e:
+                 printExc()
+           videoUrl = self.cm.ph.getSearchGroups(data, '''source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return videoUrl 
+
+           if 'To watch this video please' in data:
+              SetIPTVPlayerLastHostError(_(' Login Protected.'))
+              return []
+           return ''
+
+        if parser == 'http://www.pornhub.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhub.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              match = re.compile(r"""quality_([0-9]{3,4})p\s*=(?:"|')?([^'";]+)(?:"|')?;""", re.DOTALL | re.IGNORECASE).findall(data)
+              match = sorted(match, key=lambda x: int(x[0]), reverse=True)
+              videolink = match[0][1]
+              if "/*" in videolink:
+                 videolink = re.sub(r"/\*[^/]+/", "", videolink).replace("+","")
+                 linkparts = re.compile(r"(\w+)", re.DOTALL | re.IGNORECASE).findall(videolink)
+                 for part in linkparts:
+                    partval = re.compile(part+'="(.*?)";', re.DOTALL | re.IGNORECASE).findall(data)[0]
+                    partval = partval.replace('" + "','')
+                    videolink = videolink.replace(part, partval)
+              videoUrl = videolink.replace(" ","")
+              printDBG( 'Host videoUrl: '+videoUrl )
+              if videoUrl: return strwithmeta(videoUrl, {'Referer':url})
+           except Exception:
+              printExc()  
+
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"720","videoUrl":['"]([^"^']+?)['"]''')[0] 
+           if videoPage: return videoPage.replace('\/','/')
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"480","videoUrl":['"]([^"^']+?)['"]''')[0] 
+           if videoPage: return videoPage.replace('\/','/')
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"240","videoUrl":['"]([^"^']+?)['"]''')[0] 
+           if videoPage: return videoPage.replace('\/','/')
+           try:
+              #js = re.findall('(var flashvars_(?:\d+).*?)loadScriptUniqueId', data, re.S)
+              js = re.findall('type="text/javascript">.*?(var\sflashvars.*?)</script>', data, re.S)
+              #js = self.cm.ph.getDataBeetwenMarkers(data, 'var flashvars_', 'loadScriptUniqueId', False)[1]
+              printDBG( 'Host data js: '+js[0] )
+              if js:
+                 urls = js_execute( js[0].replace('playerObjList.', '')+ '\nfor (n in this){print(n+"="+this[n]+";");}')
+                 videoPage = self.cm.ph.getSearchGroups(urls['data'], '''media_[0-9]=([^;]+?1080P[^;]+?);''')[0] 
+                 if videoPage: return videoPage
+                 videoPage = self.cm.ph.getSearchGroups(urls['data'], '''media_[0-9]=([^;]+?720P[^;]+?);''')[0] 
+                 if videoPage: return videoPage
+                 videoPage = self.cm.ph.getSearchGroups(urls['data'], '''media_[0-9]=([^;]+?480P[^;]+?);''')[0] 
+                 if videoPage: return videoPage
+                 videoPage = self.cm.ph.getSearchGroups(urls['data'], '''media_[0-9]=([^;]+?240P[^;]+?);''')[0] 
+                 if videoPage: return videoPage
+           except Exception:
+              printExc()
+              embed = re.search('"embedCode":"<iframe src=."(.*?)"', data, re.S)
+              if embed:
+                 url = embed.group(1).replace('\/','/').replace('\\','')
+                 printDBG( 'Host data embed: '+url )
+                 sts, data = self._getPage(url, self.defaultParams)
+                 if not sts: return ''
+                 printDBG( 'Host listsItems data: '+data )
+                 videoPage = re.findall('quality_720p":"(.*?)"', data, re.S)
+                 if videoPage: return videoPage[0].replace('\/','/')
+                 videoPage = re.findall('quality_480p":"(.*?)"', data, re.S)
+                 if videoPage: return videoPage[0].replace('\/','/')
+           return ''
+
+        if parser == 'https://chaturbate.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'chaturbate.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER}
+           for x in range(1, 3): 
+              sts, data = self.get_Page(url)
+              if not sts: return
+              printDBG( 'Host listsItems data: '+str(data) )
+              if '/auth/login/' in self.cm.meta['url']:
+                 SetIPTVPlayerLastHostError(_(' PRIVATE.'))
+              if 'Room is currently offline' in data:
+                 SetIPTVPlayerLastHostError(_(' OFFLINE.'))
+              host = 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.18) Gecko/20110621 Mandriva Linux/1.9.2.18-0.1mdv2010.2 (2010.2) Firefox/3.6.18'
+              videoPage = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0] 
+              if not videoPage: 
+                 data = data.replace(r'\u0022','"').replace(r'\u002D','-')
+                 videoPage = self.cm.ph.getSearchGroups(data, '''hls_source":\s*['"]([^"^']+?)['"]''')[0] 
+              try:
+                 item = []
+                 videoUrl = videoPage.replace('&amp;','&')
+                 videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent':host}) 
+                 tmp = getDirectM3U8Playlist(videoUrl, checkExt=True, variantCheck=True, checkContent=True, sortWithMaxBitrate=99999999)
+                 for item in tmp:
+                    printDBG( 'Host listsItems valtab1: '  +str(item))
+                 if self.format4k:
+                    return tmp[0]['url']
+                 else:
+                    if tmp[0]['height']<=1080 : return tmp[0]['url']
+                    if tmp[1]['height']<=1080 : return tmp[1]['url']
+                    if tmp[2]['height']<=1080 : return tmp[2]['url']
+              except Exception:
+                 printExc()
+           return ''
+  
+        if parser == 'https://www.pornburst.xxx/':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornburst.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''src=['"]([^"^']+?)['"].type="video\/mp4''')[0] 
+           if videoUrl: return videoUrl
+           return ''
+        
+        if parser == 'https://www.xxxbule.com/':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xxxbule.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_src".href=['"]([^"^']+?)['"]./>''')[0] 
+           if not videoUrl:
+              videoUrl = self.cm.ph.getSearchGroups(data, '''contentUrl":.['"]([^"^']+?)['"]''')[0]
+           if videoUrl: return videoUrl
+           return ''
+               
+        if parser == 'https://www.porndig.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porndig.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           #videoUrl = self.cm.ph.getSearchGroups(data, '''href=['"]([^"^']+?)["].class''')[0] 
+           videoLinks = self.cm.ph.getDataBeetwenMarkers(data, '<div class="video_actions_wrapper', 'full video', False)[1]
+           printDBG( 'Ãsszes adat: '+str(videoLinks))
+           videoLinks = self.cm.ph.getAllItemsBeetwenMarkers(videoLinks, 'href="', '" class', False)
+           self.cm.ph.getAllItemsBeetwenMarkers
+           printDBG( 'Linkek: '+str(videoLinks))
+           videoUrl = videoLinks[-2]
+           printDBG( 'Kesz link: '+str(videoUrl))
+           if videoUrl: return videoUrl
+           return ''
+        
+        if parser == 'https://www.tnaflix.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tnaflix.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           vid = self.cm.ph.getSearchGroups(data, '''data-vid=['"]([^"^']+?)['"]''')[0]
+           nk =  self.cm.ph.getSearchGroups(data, '''data-nk=['"]([^"^']+?)['"]''')[0]
+           vk =  self.cm.ph.getSearchGroups(data, '''data-vk=['"]([^"^']+?)['"]''')[0]
+           xml = 'https://cdn-fck.tnaflix.com/tnaflix/%s.fid?key=%s&VID=%s&nomp4=1&catID=0&rollover=1&startThumb=31&embed=0&utm_source=0&multiview=0&premium=1&country=0user=0&vip=1&cd=0&ref=0&alpha' % (vk, nk, vid) 
+           sts, data = self.get_Page(xml, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoPage = re.findall('<videoLink>.*?//(.*?)(?:]]>|</videoLink>)', data, re.S)
+           if videoPage: return 'http://' + videoPage[-1]
+
+           videoUrl = self.cm.ph.getSearchGroups(data, '''download href=['"]([^"^']+?)['"]''')[0] 
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"contentUrl" content=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': url})
+           if videoUrl: return videoUrl
+           return ''
+
+        if parser == 'https://pornmaki.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornmaki.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = self.cm.ph.getDataBeetwenMarkers(data, 'file:"', '"};', False)[1]
+           if videoUrl: return videoUrl
+           return ''
+
+        if parser == 'https://www.moviefap.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'moviefap.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           self.USER_AGENT = 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0'
+           self.HEADER = {'User-Agent': self.USER_AGENT, 'DNT':'1', 'Accept': 'text/html'}
+           self.defaultParams = {'header':dict(self.HEADER)}
+           self.defaultParams['header']['Referer'] = url
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           xml = self.cm.ph.getSearchGroups(data, '''flashvars.config.*?//([^"^']+?)['"]''')[0]
+           if not xml: xml = self.cm.ph.getSearchGroups(data, '''name="config".*?//([^"^']+?)['"]''')[0] 
+           if xml:
+              videoUrl = "https://" + xml
+              sts, data = self.get_Page(videoUrl, self.defaultParams)
+              if not sts: return 
+              printDBG( 'Host listsItems data2: '+str(data) )
+              url = re.findall('<videoLink>.*?//(.*?)(?:]]>|</videoLink>)', data, re.S)
+              if url:
+                 return "http://" + url[-1].replace('&amp;','&')  
+           return ''
+
+        if parser == 'https://www.pinflix.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pinflix.cookie')
+           self.USER_AGENT = 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0'
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'pinflix.cookie', 'pinflix.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''preload".href=['"]([^"^']+?)['"].as="fetch" crossorigin>''')[0]
+           return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent':self.USER_AGENT})
+           return ''
+
+        if parser == 'http://www.pornhd.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhd.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'pornhd.cookie', 'pornhd.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source[^>]+?src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"1080p":['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"720p":['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"480p":['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"360p":['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('/'): videoUrl = 'https://www.pornhd.com' + videoUrl
+           self.defaultParams['max_data_size'] = 0
+           sts, data = self.getPage(videoUrl, 'pornhd.cookie', 'pornhd.com', self.defaultParams)
+           if not sts: return ''
+           return data.meta['url']
+
+        if parser == 'http://www.adulttvlive.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'adulttv.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'adulttv.cookie', 'adulttv.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data1: '+data )
+
+           videoUrl = self.cm.ph.getSearchGroups(data, '''src=['"](https://adult-channels.com/channels/[^"^']+?)['"]''')[0] 
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''src=['"](https://www.adulttvlive.net[^"^']+?embed/)['"]''')[0] 
+
+           sts, data = self.getPage(videoUrl, 'adulttv.cookie', 'adulttv.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data2: '+data )
+           if 'porndig' in data:
+              videoUrl = self.cm.ph.getSearchGroups(data, '''src=['"]([^"^']+?)['"]''')[0] 
+              return self.getResolvedURL(videoUrl)
+
+           if 'unescape' in data:
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'eval(', ');', False)
+              try:
+                 ddata = ''
+                 for idx in range(len(data)):
+                    tmp = data[idx].split('+')
+                    for item in tmp:
+                       item = item.strip()
+                       if item.startswith("'") or item.startswith('"'):
+                          ddata += self.cm.ph.getSearchGroups(item, '''['"]([^'^"]+?)['"]''')[0]
+                       else:
+                          tmp2 = re.compile('''unescape\(['"]([^"^']+?)['"]''').findall(item)
+                          for item2 in tmp2:
+                             ddata += urllib.unquote(item2)
+                
+                 printDBG('Host listsItems ddata2: '+ddata)
+                
+                 funName = self.cm.ph.getSearchGroups(ddata, '''function\s*([^\(]+?)''')[0].strip()
+                 sp      = self.cm.ph.getSearchGroups(ddata, '''split\(\s*['"]([^'^"]+?)['"]''')[0]
+                 modStr  = self.cm.ph.getSearchGroups(ddata, '''\+\s*['"]([^'^"]+?)['"]''')[0] 
+                 modInt  = int( self.cm.ph.getSearchGroups(ddata, '''\+\s*(-?[0-9]+?)[^0-9]''')[0] )
+                
+                 ddata =  self.cm.ph.getSearchGroups(ddata, '''document\.write[^'^"]+?['"]([^'^"]+?)['"]''')[0]
+                 data  = ''
+                 tmp   = ddata.split(sp)
+                 ddata = urllib.unquote(tmp[0])
+                 k = urllib.unquote(tmp[1] + modStr)
+                 for idx in range(len(ddata)):
+                    data += chr((int(k[idx % len(k)]) ^ ord(ddata[idx])) + modInt)
+                      
+                 printDBG('host data2: '+data)
+                
+                 if 'rtmp://' in data:
+                    rtmpUrl = self.cm.ph.getDataBeetwenMarkers(data, '&source=', '&', False)[1]
+                    if rtmpUrl == '':
+                       rtmpUrl = self.cm.ph.getSearchGroups(data, r'''['"](rtmp[^"^']+?)['"]''')[0]
+                    return rtmpUrl
+                 elif '.m3u8' in data:
+                    file = self.cm.ph.getSearchGroups(data, r'''['"](http[^"^']+?\.m3u8[^"^']*?)['"]''')[0]
+                    if file == '': file = self.cm.ph.getDataBeetwenMarkers(data, 'src=', '&amp;', False)[1]
+                    return file
+              except Exception:
+                 printExc()
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0] 
+           if not videoUrl:
+              link = self.cm.ph.getSearchGroups(data, '''streamer":['"]([^"^']+?)['"]''')[0].replace(r"\/",r"/")
+              return 'http://www.filmon.com' + link
+           if not videoUrl: return ''
+           sts, data = self.getPage(videoUrl, 'adulttv.cookie', 'adulttv.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data3: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''sources:\[\{file:['"]([^"^']+?)['"]''', 1, True)[0] 
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''source:['"]([^"^']+?)['"]''', 1, True)[0] 
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''file:['"]([^"^']+?)['"]''', 1, True)[0] 
+           return videoUrl
+
+        if parser == 'https://www.balkanjizz.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'balkanjizz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''', 1, True)[0]
+           if videoUrl.startswith('/'): data = 'https://www.balkanjizz.com' + videoUrl
+           return data
+        
+        if parser == 'https://pornorussia.mobi':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornorussia.cookie')
+           for x in range(1, 10): 
+              sts, data = self.getPage(url, 'pornorussia.cookie', 'pornorussia.mobi', self.defaultParams)
+              if not sts: return ''
+              printDBG( 'Adatok: '+data )
+              videoUrl = self.cm.ph.getDataBeetwenMarkers(data, 'file:"', '"', False)[1]
+              printDBG( 'Link: '+videoUrl )
+              if videoUrl: return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent':self.USER_AGENT})
+           return ''
+
+        if parser == 'https://www.letmejerk.com':
+           for x in range(1, 10): 
+              COOKIEFILE = os_path.join(GetCookieDir(), 'letmejerk.cookie')
+              self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+              self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+              self.defaultParams['header']['Referer'] = url
+              sts, data = self.getPage(url, 'letmejerk.cookie', 'letmejerk.com', self.defaultParams)
+              if not sts: return ''
+              #printDBG( 'Host listsItems data1: '+data )
+              file = str(self.cm.ph.getAllItemsBeetwenMarkers(data, '<script', '</script>'))
+              tmp = file.split('|')
+              post = ''
+              for item in tmp:
+                 item = item.strip()
+                 if item.endswith("="): post = item
+                 if item.startswith("eX"): post = item
+                 if 'IWh0dHB' in item: post = item
+              #printDBG( 'Host post:%s' % base64.b64decode(post) )
+              #printDBG( 'Host post:%s' % base64.b64decode(post)[1:] )
+              #printDBG( 'Host post:%s' % base64.b64decode(post)[:len(post)] )
+              postdata = {'id' : url.split('/')[4]} 
+              self.defaultParams['header']['X-Requested-With'] = 'XMLHttpRequest'
+              self.defaultParams['header']['Host'] = 'letmejerk.com'
+              sts, data = self.getPage('https://letmejerk.com/load/video/'+post+'/', 'letmejerk.cookie', 'letmejerk.com', self.defaultParams, postdata)
+              if not sts: return ''
+              printDBG( 'Host listsItems data2: '+data )
+              videoUrl = self.cm.ph.getSearchGroups(data, '''<source\ssrc=['"]([^"^']+?)['"]''', 1, True)[0]
+              poster = self.cm.ph.getSearchGroups(videoUrl, '''(@[^"^']+?#)''', 1, True)[0]
+              videoUrl = videoUrl.replace(poster,'')
+
+              if 'm3u8' in videoUrl: 
+                 videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': url, "Origin": "https://letmejerk.com"})
+                 tmp = getDirectM3U8Playlist(videoUrl, checkContent=True, sortWithMaxBitrate=999999999)
+                 for item in tmp:
+                    return item['url']
+
+              HTTP_HEADER = {'Accept-Encoding': 'gzip, deflate', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36'} 
+              defaultParams = {'header':HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+              defaultParams['header']['Referer'] = url
+              defaultParams['max_data_size'] = 0
+              defaultParams['header']['Host'] = videoUrl.split('/')[2]
+              #defaultParams['header']['User-Agent'] = ua
+              defaultParams['header']['Accept'] = "video/webm,video/ogg,video/*;q=0.9,application/ogg;q=0.7,audio/*;q=0.6,*/*;q=0.5"
+              defaultParams['header']['Range'] = "bytes=0-" 
+              defaultParams['header']['Referer'] = url
+              defaultParams['ignore_http_code_ranges'] = []
+              sts, data = self.getPage(videoUrl, 'letmejerk.cookie', 'letmejerk.com', defaultParams)
+              #if not sts: return ''
+              try:
+                 if data.meta['location']: return self.FullUrl(data.meta['location'])
+              except Exception: 
+                 printExc() 
+           return videoUrl 
+
+        if parser == 'https://www.gotporn.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'gotporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url)
+           baseUrl = self.cm.meta['url']
+           printDBG('MegosztÃ³: ' + baseUrl)
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code:.['"]([^"^']+?)['"],''')[0].strip()
+           if 'eporner' in baseUrl:
+              videoID = self.cm.ph.getSearchGroups(data, '''720p.HD:<a href=['"]([^"^']+?)['"]''')[0]
+              videoUrl = "http://www.eporner.com" + videoID
+           if 'txxx' in baseUrl:
+              videoUrl = re.search('video_url":"([^"]+)', data).group(1)
+              replacemap = {'M':'\u041c', 'A':'\u0410', 'B':'\u0412', 'C':'\u0421', 'E':'\u0415', '=':'~', '+':'.', '/':','}
+              for key in replacemap:
+                  videoUrl = videoUrl.replace(replacemap[key], key)
+              videoUrl = base64.b64decode(videoUrl)
+              if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+              if videoUrl.startswith('/'): videoUrl = 'https://txxx.com' + videoUrl
+              return urlparser.decorateUrl(videoUrl, {'Referer': url})
+           if 'sunporno' in baseUrl:
+              videoUrl = self.cm.ph.getSearchGroups(data, '''video.src=['"]([^"^']+?)['"]''')[0]
+           if not videoUrl:
+              videoUrl = self.cm.ph.getSearchGroups(data, '''href=['"]([^"^']+?)['"].class="video-download.+''')[0]
+           if not videoUrl:
+              videoUrl = self.cm.ph.getSearchGroups(data, '''source src=['"]([^"^']+?)['"]''')[0].replace('\/','/').replace('&amp;','&')
+           if not videoUrl:
+              videoUrl = self.cm.ph.getSearchGroups(data, '''.src=['"]([^"^']+?)['"].?type="video.+''')[0]
+           
+           if not videoUrl:
+              #parser for vikiporn,porndr, fetishrine
+              videoUrl = self.cm.ph.getSearchGroups(data, '''video_url:.['"]([^"^']+?)['"]''')[0].replace('\/','/').replace('&amp;','&').strip()
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           if not videoUrl:
+              videoUrl = self.cm.ph.getSearchGroups(data, '''url":['"]([^"^']+?)['"]}}}''')[0].replace('&amp;','&').replace(r"\/",r"/")
+           if '.m3u8' in videoUrl:
+              if self.cm.isValidUrl(videoUrl): 
+                 tmp = getDirectM3U8Playlist(videoUrl)
+                 for item in tmp:
+                    printDBG( 'Host listsItems valtab: '  +str(item))
+                 return item['url']
+           printDBG( 'Videolink: '+ videoUrl  )
+           if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           return videoUrl
+
+        if parser == 'https://www.3movs.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), '3movs.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url)
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code:.['"]([^"^']+?)['"],''')[0].strip()
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_alt_url:.['"]([^"^']+?)['"]''')[0].replace('\/','/').replace('&amp;','&').strip()
+           if '720p' not in videoUrl or not videoUrl:
+              videoUrl = self.cm.ph.getSearchGroups(data, '''video_url:.['"]([^"^']+?)['"]''')[0].replace('\/','/').replace('&amp;','&').strip()
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           printDBG( 'Videolink: '+ videoUrl  )
+           return videoUrl
+           
+        if parser == 'https://www.deviants.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'deviants.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'deviants.cookie', 'deviants.com', self.defaultParams)
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code:.['"]([^"^']+?)['"],''')[0].strip()
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_alt_url:.['"]([^"^']+?)['"]''')[0]
+           if '720p' not in videoUrl or not videoUrl:
+              videoUrl = self.cm.ph.getSearchGroups(data, '''video_url:.['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Videolink first: '+ videoUrl  )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           printDBG( 'Videolink second: '+ videoUrl  )
+           if videoUrl: return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent':self.USER_AGENT})
+           return ''
+
+        if parser == 'https://www.pornid.xxx':   
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornid.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'pornid.cookie', 'pornid.com', self.defaultParams)
+           data = self.cm.ph.getDataBeetwenMarkers(data, "} else {", "flashvars['js']='1';", False)[1]
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code:.['"]([^"^']+?)['"],''')[0].strip()
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url:.['"]([^"^']+?)['"]''')[0]
+           if not videoUrl:
+              videoUrl = self.cm.ph.getSearchGroups(data, '''video_alt_url:.['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Videolink first: '+ videoUrl  )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           printDBG( 'Videolink second: '+ videoUrl  )
+           if videoUrl: return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent':self.USER_AGENT})
+           return ''
+        
+        if parser == 'https://sextubefun.com/':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sextubefun.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'sextubefun.cookie', 'sextubefun.com', self.defaultParams)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''source.src=['"]([^"^']+?)['"].type='video/mp4'>''')[0]
+           printDBG( 'Videolink: '+ videoUrl  )
+           if videoUrl: return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent':self.USER_AGENT})
+           return ''
+        
+        if parser == 'https://www.analdin.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'analdin.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'analdin.cookie', 'analdin.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url:\s*['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoUrl.startswith('/'): videoUrl = 'https://www.analdin.com' + videoUrl
+           self.defaultParams['max_data_size'] = 0
+           sts, data = self.getPage(videoUrl, 'analdin.cookie', 'analdin.com', self.defaultParams)
+           if not sts: return ''
+           return data.meta['url']
+
+        if parser == 'https://www.perfectgirls.xxx':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'perfectgirls.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'perfectgirls.cookie', 'perfectgirls.com', self.defaultParams)
+           if not sts: return ''
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'type="video/mp4"/>', 'default/>', False)[1]
+           videoUrl = self.cm.ph.getDataBeetwenMarkers(data, '<source src="', '" res', False)[1]
+           if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           return videoUrl
+
+        if parser == 'https://pornopersik.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'p720.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           if 'hdsite.net/embed/' in data:
+              videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0])
+              return self.getResolvedURL(videoUrl)
+           if not 'mp4' in data: SetIPTVPlayerLastHostError('LOGIN REQUIRED')
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent': self.HTTP_HEADER['User-Agent']})
+        
+        if parser == 'https://www.koloporno.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'koloporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'koloporno.cookie', 'koloporno.com', self.defaultParams)
+           if not sts: return ''
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source\ssrc=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return videoUrl
+
+        if parser == 'http://www.sunporno.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sunporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoPage = re.findall('video src="(.*?)"', data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return urlparser.decorateUrl(videoPage[0], {'Referer': url})
+           return ''
+
+        if parser == 'https://mini.zbiornik.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornikmini.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urllib2.unquote(videoUrl)
+
+        if parser == 'https://dato.porn':
+           USER_AGENT = 'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/37.0.2062.120 Chrome/37.0.2062.120 Safari/537.36'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'datoporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'datoporn.cookie', 'datoporn.co', self.defaultParams)
+           if not sts: return ''
+           #license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           allUrl = self.cm.ph.getDataBeetwenMarkers(data, 'Download:', '<div class="block-flagging">', False)[1]
+           printDBG( 'Videok: ' + allUrl)
+           videoUrl = self.cm.ph.getDataBeetwenMarkers(allUrl, '<a href="', '" data', False)[1]
+           printDBG( 'Link: ' + videoUrl)		   
+           return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent': USER_AGENT}) 
+
+        if parser == 'https://sinparty.com':
+           USER_AGENT = 'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/37.0.2062.120 Chrome/37.0.2062.120 Safari/537.36'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sinparty.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'sinparty.cookie', 'sinparty.com,', self.defaultParams)
+           if not sts: return ''
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file_url.+?[:]&quot[;]([^"^]+?)[&]quot''')[0].replace('\/','/')
+           printDBG( 'Link: ' + videoUrl)		   
+           return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent': USER_AGENT}) 
+
+        if parser == 'http://porn720.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porn720.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'porn720.cookie', 'porn720.org', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl:
+              return self.getResolvedURL(self.FullUrl(videoUrl))
+           videoUrl = re.compile('<source src="(.+?)"', re.DOTALL).findall(data)
+           if videoUrl:
+              videoUrl = urlparser.decorateUrl(videoUrl[-1], {'User-Agent': self.USER_AGENT, 'Referer': url}) 
+              self.defaultParams['max_data_size'] = 0
+              sts, data = self.getPage(videoUrl, 'porn720.cookie', 'porn720.org', self.defaultParams)
+              if not sts: return ''
+              return data.meta['url']
+
+           videoUrl = self.cm.ph.getSearchGroups(data, '''720p['"]:['"]([^"^']+?)['"]''')[0] 
+           if videoUrl:
+              return urlparser.decorateUrl(videoUrl, {'User-Agent': self.USER_AGENT, 'Referer': url}) 
+           videoUrl = self.cm.ph.getSearchGroups(data, '''480p['"]:['"]([^"^']+?)['"]''')[0] 
+           if videoUrl:
+              return urlparser.decorateUrl(videoUrl, {'User-Agent': self.USER_AGENT, 'Referer': url}) 
+           return ''
+
+        if parser == 'https://fapset.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fapset.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host  data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return self.getResolvedURL(videoUrl)
+
+        if parser == 'http://www.filmyporno.tv':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'filmyporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           match = re.findall('source src="(.*?)"', data, re.S)
+           if match: return match[0]
+           else: return ''
+
+        if parser == 'https://www.porndroids.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porndroids.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           videoUrl = self.cm.ph.getDataBeetwenMarkers(data, '<source src="', '" type="video/mp4">', False)[1]
+           videoUrl = videoUrl.replace('amp;','')                                                 
+           printDBG( 'Final Url: '+videoUrl )
+           return videoUrl
+
+        if parser == 'https://videobin.co':
+            baseUrl = strwithmeta(url)
+            referer = baseUrl.meta.get('Referer', '')
+            self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+            if referer != '': self.HTTP_HEADER['Referer'] = referer
+            COOKIEFILE = os_path.join(GetCookieDir(), 'videobin.cookie')
+            self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.get_Page(url)
+            if not sts: return ''
+            printDBG( 'Host  data: %s' % data )
+            data = self.cm.ph.getDataBeetwenMarkers(data, 'sources:', ']', False)[1]
+            data = re.compile('"(http[^"]+?)"').findall(data)
+            for videoUrl in data:
+                if videoUrl.split('?')[0].endswith('m3u8'):
+                    printDBG( 'Host  videoUrl: %s' % videoUrl )
+                    #if self.cm.isValidUrl(videoUrl): 
+                    #    videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': referer}) 
+                    #    tmp = getDirectM3U8Playlist(videoUrl, checkContent=True, sortWithMaxBitrate=999999999)
+                    #    for item in tmp:
+                    #        printDBG( 'Host listsItems valtab: '  +str(item))
+                    #        return item['url']
+                elif videoUrl.split('?')[0].endswith('mp4'):
+                    printDBG( 'Host  videoUrl: %s' % videoUrl )
+                    videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': referer, 'User-Agent': self.USER_AGENT}) 
+                    return videoUrl
+            return ''
+
+        if parser == 'https://lovehomeporn.com/':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'lovehomeporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           self.defaultParams['header']['Referer'] = parser
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host  data: '+data )
+           id = self.cm.ph.getSearchGroups(data, '''video_id\s*=\s*['"]([^"^']+?)['"]''')[0] 
+           videoUrl = "https://lovehomeporn.com/media/nuevo/config.php?key=%s" % id
+           sts, data = self.get_Page(videoUrl)
+           if not sts: return ''
+           printDBG( 'Host  data2: '+data )
+           videoUrl = ph.search(data, '''<file>([^>]+?)<''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+
+        if parser == 'http://www.pornrabbit.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornrabbit.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornrabbit.cookie', 'pornrabbit.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host data: '+data )
+           videoUrl = self.cm.ph.getDataBeetwenMarkers(data, 'content="                ', '                      "/>', False) [1]
+           printDBG( 'Ezt talaltam: '+videoUrl )
+           return videoUrl
+           
+
+        if parser == 'https://www.eroprofile.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'eroprofile.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+
+        if parser == 'http://www.absoluporn.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'absoluporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+
+        if parser == 'https://mangovideo':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'mangovideo.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )		   
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent': self.HTTP_HEADER['User-Agent']}) 
+
+        if parser == 'http://anybunny.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anybunny.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anybunny.cookie', 'anybunny.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoPage = self.cm.ph.getAllItemsBeetwenMarkers(data, '<iframe', '</iframe>')
+           for item in videoPage:
+              if 'exoclick' in item: continue
+              printDBG( 'Host  videoPage: '+item )
+              videoUrl = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''')[0] 
+           if ''== videoUrl:
+              videoUrl = self.cm.ph.getSearchGroups(data, '''source src=['"]([^"^']+?)['"]''')[0] 
+              if 'm3u8' in videoUrl:
+                 tmp = getDirectM3U8Playlist(videoUrl, checkContent=True, sortWithMaxBitrate=999999999)
+                 for item in tmp:
+                    return item['url']
+              else:
+                 return strwithmeta(videoUrl, {'Referer': url, 'User-Agent': self.USER_AGENT})
+
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           sts, data = self.get_Page(videoUrl)
+           if not sts: return ''
+           printDBG( 'Host  data2: '+data )
+           self.domains = ['vartuc.com', "azblowjobtube.com"]
+           try:
+              js_link = re.compile("src='(/kt_player/.*?)'", re.DOTALL | re.IGNORECASE).search(data).group(1)
+           except Exception: 
+              printExc()
+              videoUrl = self.cm.ph.getSearchGroups(data, '''source src=['"]([^"^']+?)['"]''')[0] 
+              printDBG( 'Host  videoUrl: '+videoUrl )
+
+           js_path = 'https://' + self.domains[0] + js_link + '&ver=x'
+           sts, data = self.getPage(js_path, 'anybunny.cookie', 'anybunny.com', self.defaultParams)
+           js = data.split(";")
+           js = [line for line in js if (line.startswith("gh") or line.startswith("irue842")) and '=' in line and '(' not in line and ')' not in line]
+           js = "\n".join(js)
+           printDBG( 'Host  js: %s' % js )
+           urls = js_execute( js+ '\nfor (n in this){print(n+"="+this[n]+";");}')
+           videoUrl = self.cm.ph.getSearchGroups(urls['data'], '''src=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return strwithmeta(videoUrl, {'Referer': url, 'User-Agent': self.USER_AGENT})
+           return ''
+
+        if parser == 'https://hqporner.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hqporner.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hqporner.cookie', 'hqporner.com', self.defaultParams)
+           videoUrl = self.cm.ph.getDataBeetwenMarkers(data, "url: '/blocks/altplayer.php?i=", "'", False)[1]
+           if "http:" not in videoUrl:
+               videoUrl = "http:" + videoUrl
+           sts, data = self.getPage(videoUrl, 'hqporner.cookie', 'hqporner.com', self.defaultParams)
+           urls = self.cm.ph.getAllItemsBeetwenMarkers(data, "<a href='", "'", False)
+           for i in urls:
+               if "720.mp4" in i:
+                   videoUrl = i
+           if "http:" not in videoUrl:
+               videoUrl = "http:" + videoUrl
+           if videoUrl:
+              return videoUrl
+           return ''
+
+        if parser == 'https://www.naked.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'naked.cookie')
+           UA = "Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/37.0.2062.120 Chrome/37.0.2062.120 Safari/537.36"
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': False, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'naked.cookie', 'naked.com', self.defaultParams)
+           if not sts: return ''
+           modelname = self.cm.meta['url'].split('=')[-1]
+           id = ''
+           host = ''
+           data = data.replace('\\','')
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<div class="live clearfix')
+           if len(data): del data[0]
+           for item in data:
+              id = self.cm.ph.getSearchGroups(item, '''data-model-id=['"]([^"^']+?)['"]''')[0] 
+              host = self.cm.ph.getSearchGroups(item, '''data-video-host=['"]([^"^']+?)['"]''')[0] 
+              if modelname == self.cm.ph.getSearchGroups(item, '''data-model-seo-name=['"]([^"^']+?)['"]''', 1, True)[0]: 
+                 if 'multi-user-private' in item: 
+                    SetIPTVPlayerLastHostError(_(' Private Show.'))
+                    return []
+                 break
+           videoUrl = 'https://manifest.vscdns.com/manifest.m3u8?key=nil&provider=highwinds&host='+host+'&model_id='+id+'&secure=true&prefix=amlst&youbora-debug=1'
+           PHPSESSID = self.cm.getCookieItem(COOKIEFILE, 'PHPSESSID')
+           videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': self.cm.meta['url'], 'Cookie':'PHPSESSID=%s' % PHPSESSID, 'User-Agent': UA, 'iptv_livestream':True, 'Origin':'https://www.naked.com'})
+           tmp = getDirectM3U8Playlist(videoUrl, checkContent=True, sortWithMaxBitrate=999999999)
+           for item in tmp:
+              return item['url']
+           return ''
+
+        if parser == 'https://www.pornrewind.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornrewind.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url:\s*['"]([^"^']+?)['"]''')[0] 
+           return videoUrl
+
+        if parser == 'https://spankbang.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'spankbang.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'spankbang.cookie', 'spankbang.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoid = self.cm.ph.getSearchGroups(data, '''data-videoid=['"]([^"^']+?)['"]''')[0]
+           streamkey = self.cm.ph.getSearchGroups(data, '''data-streamkey=['"]([^"^']+?)['"]''')[0]
+           sb_csrf_session = self.cm.getCookieItem(COOKIEFILE,'sb_csrf_session')
+           api = 'https://spankbang.com/api/videos/stream'
+           postdata = {'id' : streamkey, 'data': 0, 'sb_csrf_session': sb_csrf_session} 
+           self.defaultParams['header']['X-Requested-With'] = 'XMLHttpRequest'
+           self.defaultParams['header']['X-CSRFToken'] = sb_csrf_session
+           sts, data = self.getPage(api, 'spankbang.cookie', 'spankbang.com', self.defaultParams, postdata)
+           if not sts: return ''
+           printDBG( 'Host listsItems data2: '+data )
+           try:
+              if data.startswith('{'): data = '['+data+']'
+              result = byteify(simplejson.loads(data))
+              for item in result:
+                 try:
+                    if str(item["stream_url_1080p"]) : return self.cm.getFullUrl(str(item["stream_url_1080p"][0]))
+                    if str(item["stream_url_720p"]) : return self.cm.getFullUrl(str(item["stream_url_720p"][0]))
+                    if str(item["stream_url_480p"]) : return self.cm.getFullUrl(str(item["stream_url_480p"][0]))
+                    if str(item["stream_url_320p"]) : return self.cm.getFullUrl(str(item["stream_url_320p"][0]))
+                    if str(item["stream_url_240p"]) : return self.cm.getFullUrl(str(item["stream_url_240p"][0]))
+                 except Exception as e:
+                    printExc()
+                 try:
+                    if str(item["1080p"]) != '[]': return self.cm.getFullUrl(str(item["1080p"][0]))
+                    if str(item["720p"])  != '[]': return self.cm.getFullUrl(str(item["720p"][0]))
+                    if str(item["480p"])  != '[]': return self.cm.getFullUrl(str(item["480p"][0]))
+                    if str(item["320p"])  != '[]': return self.cm.getFullUrl(str(item["320p"][0]))
+                    if str(item["240p"])  != '[]': return self.cm.getFullUrl(str(item["240p"][0]))
+                 except Exception as e:
+                    printExc()
+           except Exception as e:
+              printExc()
+           return ''
+
+        if parser == 'https://prostream.to':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'prostream.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'prostream.cookie', 'prostream.to', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           if "eval(function(p,a,c,k,e,d)" in data:
+              printDBG( 'Host resolveUrl packed' )
+              packed = re.compile('>eval\(function\(p,a,c,k,e,d\)(.+?)</script>', re.DOTALL).findall(data)
+              if packed:
+                 packed = packed[-1]
+              else:
+                 return ''
+              try:
+                 videoPage = unpackJSPlayerParams(packed, TEAMCASTPL_decryptPlayerParams, 0, True, True) 
+              except Exception: pass 
+              printDBG( 'Host videoPage: '+str(videoPage) )
+              videoUrl = ph.search(videoPage, '''file:['"]([^'^"]+?)['"]''')[0]
+              if not videoUrl: videoUrl = ph.search(videoPage, '''sources:\[['"]([^'^"]+?)['"]''')[0]
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return videoUrl 
+           return ''
+
+        if parser == 'https://www.cumlouder.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cumlouder.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'cumlouder.cookie', 'cumlouder.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'https://pornone.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornone.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornone.cookie', 'pornone.com', self.defaultParams)
+           printDBG( 'Elemek: '+data )
+           
+           videoUrl = self.cm.ph.getDataBeetwenMarkers(data, ' /> <source src="', '" type="video/mp4"', False)[1]
+           printDBG( 'Ezt talaltam: '+videoUrl )
+           return videoUrl
+  
+        if parser == 'http://sexu.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sexu.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''downloadUrl":['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urlparser.decorateUrl(videoUrl, {'Referer': 'http://sexu.com/'})
+           videoUrl = re.findall('"file":"(.*?\.mp4)"', data, re.S)
+           if videoUrl:
+              return urlparser.decorateUrl(videoUrl[-1], {'Referer': 'http://sexu.com/'}) 
+           videoUrl = self.cm.ph.getSearchGroups(data, '''"src":['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urlparser.decorateUrl(videoUrl, {'Referer': 'http://sexu.com/'}) 
+ 
+        if parser == 'http://www.amateurporn.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'amateurporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if license_code and videoUrl:
+              if 'function/0/' in videoUrl:
+                 videoUrl = decryptHash(videoUrl, license_code, '16')
+              return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl:
+              return self.getResolvedURL(self.FullUrl(videoUrl))
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source[^>]+?src=['"]([^"^']+?mp4)['"]''')[0] 
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file:\s*?['"]([^"^']+?mp4)['"]''')[0] 
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+           return ''
+
+        if parser == 'http://www.hdporn.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           match = re.findall('source src="(.*?)"', data, re.S)
+           if match: return match[0]
+           else: return ''
+
+        if parser == 'http://pornicom.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornicom.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host data:%s' % data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'var flashvars', '}', False)[1]
+           if data2: 
+              printDBG( 'Host data2:%s' % data2 )
+              return self.cm.ph.getSearchGroups(data2, '''video_url:\s*?['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           videoPage = self.cm.ph.getSearchGroups(data, '''file: ['"]([^"^']+?)['"]''')[0] 
+           if videoPage: 
+              printDBG( 'Host data file:%s' % videoPage )
+              return videoPage
+           return ''
+
+        if parser == 'http://www.porn00.org':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porn00.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porn00.cookie', 'porn00.org', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_alt_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           if 'login' in videoUrl or ''==videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+
+        if parser == 'https://porngo.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porngo.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porngo.cookie', 'porngo.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''<source[^>]+?src=['"]([^"^']+?)['"]''')[0])
+           if videoUrl:
+              return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+           return ''
+
+        if parser == 'https://glavmatures.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'glavmatures.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='iphone_3_0')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'glavmatures.cookie', 'glavmatures.com', self.defaultParams)
+           if not sts: return ''
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'votes)</span></span>', 'PHPSESSID', False)[1]
+           videoUrl = self.cm.ph.getDataBeetwenMarkers(data, '<a href="','" data', False)[1]
+           printDBG( 'KÃ©sz link: '+videoUrl )
+           return videoUrl
+        
+        if parser == 'https://www.pornheed.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornheed.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornheed.cookie', 'pornheed.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Linkek oldala: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<iframe width', 'scrolling=', False)[1]
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, "src='","'", False)[1]
+           sts, data = self.get_Page(data2)
+           videoUrl= self.cm.ph.getSearchGroups(data, '''controls"><source src=['"]([^"^']+?)['"]''', 1, True)[0]
+           return videoUrl
+         
+        if parser == 'https://www.milf300.com/':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'milf300.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'milf300.cookie', 'milf300.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Linkek oldala: '+data )
+           videoUrl= self.cm.ph.getSearchGroups(data, '''video/mp4".src=['"]([^"^']+?)['"]''', 1, True)[0]
+           return videoUrl
+        
+        if parser == 'https://hdsite.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdsite.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent': self.HTTP_HEADER['User-Agent']})
+
+        if parser == 'https://www.porn300.com':
+           sts, data = self.get_Page(url)
+           data = self.cm.ph.getDataBeetwenMarkers(data, '</svg> Resume video', 'html5-video-support/"', False)[1]
+           videoUrl = self.cm.ph.getDataBeetwenMarkers(data, 'src="', '"', False)[1]
+           videoUrl = videoUrl.replace('amp;','')                                                 
+           printDBG( 'Final Url: '+videoUrl )
+           return videoUrl
+
+        if parser == 'https://ruleporn.com':
+           sts, data = self.get_Page(url)
+           videoUrl = self.cm.ph.getDataBeetwenMarkers(data, '<source src="', '"', False)[1]
+           printDBG( 'Final Url: '+videoUrl )
+           return videoUrl
+        
+        if parser == 'https://www.megatube.xxx':
+            COOKIEFILE = os_path.join(GetCookieDir(), 'megatube.cookie')
+            self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+            self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.get_Page(url)
+            if not sts: return ''
+            printDBG( 'VideoPage Data: '+data )
+            videoUrl = self.cm.ph.getDataBeetwenMarkers(data, "video_url: '", "/',", False)[1]
+            printDBG( 'VideoLink: '+videoUrl )
+            return videoUrl
+
+        if parser == 'http://xhamster.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamster.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''1080p['"]:['"]([^'"]+?)['"]''')[0]).replace('&amp;','&').replace(r"\/",r"/")
+           if videoUrl: 
+              return strwithmeta(videoUrl, {'Referer': url})
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''720p['"]:['"]([^'"]+?)['"]''')[0]).replace('&amp;','&').replace(r"\/",r"/")
+           if videoUrl: 
+              return strwithmeta(videoUrl, {'Referer': url})
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''480p['"]:['"]([^'"]+?)['"]''')[0]).replace('&amp;','&').replace(r"\/",r"/")
+           if videoUrl: 
+              return strwithmeta(videoUrl, {'Referer': url})
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''240p['"]:['"]([^'"]+?)['"]''')[0]).replace('&amp;','&').replace(r"\/",r"/")
+           if videoUrl: 
+              return strwithmeta(videoUrl, {'Referer': url})
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''144p['"]:['"]([^'"]+?)['"]''')[0]).replace('&amp;','&').replace(r"\/",r"/")
+           if videoUrl: 
+              return strwithmeta(videoUrl, {'Referer': url})
+           return ''
+
+        if parser == 'https://anyporn.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anyporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anyporn.cookie', 'anyporn.com', self.defaultParams)
+           if not sts: return ''
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<source', '>')
+           for item in data:
+              videoUrl = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           printDBG('Videolink: '+videoUrl)
+           return strwithmeta(videoUrl, {'Referer': url})
+
+        if parser == 'https://anon-v.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anon-v.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anon-v.cookie', 'anon-v.com', self.defaultParams)
+           if not sts: return ''
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'https://www.sleazyneasy.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sleazyneasy.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'sleazyneasy.cookie', 'sleazyneasy.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': self.cm.meta['url']})
+
+        if parser == 'https://www.freeones.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'freeones.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'freeones.cookie', 'freeones.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'FreeOnes Parser Adatok: '+data )
+           videoUrl = self.cm.ph.getDataBeetwenMarkers(data, 'contentUrl":"', '"', False)[1].replace('\/','/')
+           return videoUrl
+
+        if parser == 'https://www.youx.xxx':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youx.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url: ['"]([^"^']+?)['"],''')[0]
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           printDBG( 'KÃ©szlink: '+videoUrl )
+           return videoUrl
+           
+        if parser == 'https://www.yourupload.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'yourupload.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file\s*:\s*['"]([^"^']+?)['"]''')[0] 
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           videoUrl = urlparse.urljoin(url, videoUrl) 
+           self.defaultParams['max_data_size'] = 0
+           sts, data = self.get_Page(videoUrl, self.defaultParams)
+           if not sts: return ''
+           return strwithmeta(self.cm.meta['url'], {'User-Agent': self.HTTP_HEADER['User-Agent'], 'Referer': url})  #
+
+        if parser == 'https://mymilfporn.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'mymilfporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           MainUrl = self.cm.ph.getSearchGroups(data, '''iframe src=["']([^"^']+?)["]''', 1, True)[0] 
+           if MainUrl.startswith('//'): MainUrl = 'https:' + MainUrl
+           sts, data = self.get_Page(MainUrl)
+           if not sts: return '' 
+           videoUrl = self.cm.ph.getSearchGroups(data, '''height="100%"><source src=['"]([^"]+?)['"]''', 1, True)[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           return videoUrl
+        
+        if parser == 'https://familyporn.tv':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'familyporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_alt_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           if videoUrl=='': videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           if url.startswith('https://www.sexvid.xxx'):  
+              videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+              if videoUrl=='': videoUrl = self.cm.ph.getSearchGroups(data, '''video_alt_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent': self.HTTP_HEADER['User-Agent']})
+
+        if parser == 'https://bitporno.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bitporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent': self.HTTP_HEADER['User-Agent'], 'iptv_livestream':True, 'Origin':'https://bitporno.com'})
+           printDBG( 'Ezt talaltam: '+videoUrl )
+           if videoUrl.startswith('/m3u8'): videoUrl = 'https://www.bitporno.com' + videoUrl
+           return videoUrl
+
+##########################################################################################################################
+        query_data = {'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True}
+        try:
+           data = self.cm.getURLRequestData(query_data)
+           printDBG( 'Host getResolvedURL data: '+data )
+        except:
+           printDBG( 'Host getResolvedURL query error' )
+           return videoUrl
+
+        if parser == 'file: ':
+           return self.cm.ph.getSearchGroups(data, '''file: ['"]([^"^']+?)['"]''')[0] 
+
+        if parser == "0p'  : '":
+           videoPage = re.findall("0p'  : '(http.*?)'", data, re.S)   
+           if videoPage:
+              return videoPage[-1]
+           return ''
+
+        if parser == 'source src="':
+           videoPage = re.findall('source src="(http.*?)"', data, re.S)   
+           if videoPage:
+              return videoPage[-1]
+           return ''
+
+        if parser == "video_url: '":
+           videoPage = re.findall("video_url: '(.*?).'", data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return videoPage[0]
+           return ''
+
+        if parser == 'videoFile="':
+           videoPage = re.findall('videoFile="(.*?)"', data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return videoPage[0]
+           return ''
+
+        if parser == 'http://www.ah-me.com':
+           videoUrl = ph.search(data, '''<video\ssrc=['"]([^'^"]+?)['"]''')[0]
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'http://www.nuvid.com':
+           videoUrl = re.search("http://www.nuvid.com/video/(.*?)/.+", url, re.S)
+           if videoUrl:
+              xml = 'http://m.nuvid.com/video/%s' % videoUrl.group(1)
+              try:    data = self.cm.getURLRequestData({'url': xml, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True})
+              except: 
+                 printDBG( 'Host getResolvedURL query error xml' )
+                 return ''
+              #printDBG( 'Host data json: '+data )
+              videoPage = re.findall('source src="(.*?)"', data, re.S)   
+              if videoPage:
+                 return videoPage[0]
+           return ''
+
+        if parser == 'https://alpha.tnaflix.com':
+           videoPage = re.findall('"embedUrl" content="(.*?)"', data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return 'http:'+videoPage[0]
+           return ''
+
+        if parser == 'http://www.faphub.xxx':
+           videoPage = re.findall("url: '(.*?)'", data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return videoPage[0]
+           return ''
+   
+        if parser == 'http://www.proporn.com':
+           videoPage = re.findall('source src="(.*?)"', data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return videoPage[0]
+           return ''
+   
+        if parser == 'http://www.xnxx.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''VideoUrlHigh\(['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''VideoUrlLow\(['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''VideoHLS\(['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = re.search('flv_url=(.*?)&', data, re.S)
+           if videoUrl: return decodeUrl(videoUrl.group(1))
+           return ''
+
+        if parser == 'http://www.xvideos.com':
+           printDBG( 'Adatok: '+data )
+           videoUrl = re.search("setVideoUrlHigh\('(.*?)'", data, re.S)
+           if videoUrl: return decodeUrl(videoUrl.group(1))
+           videoUrl = re.search('flv_url=(.*?)&', data, re.S)
+           if videoUrl: return decodeUrl(videoUrl.group(1))
+           return ''
+
+        if parser == 'http://embed.redtube.com':
+           videoPage = re.findall('sources:.*?":"(.*?)"', data, re.S)
+           if videoPage:
+              link = videoPage[-1].replace(r"\/",r"/")
+              if link.startswith('//'): link = 'http:' + link 
+              return link
+           return ''
+
+        if parser == 'http://www.eporner.com':
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="dloaddivcol">', '</div>', False) [1]
+           printDBG( 'Ez a lista: ' + data)
+           videoID = self.cm.ph.getAllItemsBeetwenMarkers(data, ':<a href="', '" >Download', False)
+           for i in videoID:
+               videoID[videoID.index(i)] = "http://www.eporner.com" + str(i)
+           return videoID[-1]
+               
+        if parser == 'http://www.pornhub.com/embed/':
+           match = re.findall("container.*?src.*?'(.*?)'", data, re.S)
+           if match: return match[0]
+           return ''
+        
+        if parser == 'http://m.tube8.com':
+           match = re.compile('<div class="play_video.+?<a href="(.+?)"', re.DOTALL).findall(data)
+           return match[0]
+
+        if parser == 'http://m.pornhub.com':
+           match = re.compile('<div class="play_video.+?<a href="(.+?)"', re.DOTALL).findall(data)
+           return match[0]
+
+        if parser == 'https://www.pornhat.com/':
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'p</span>', '"PHPSESSID"', False)[1]
+           printDBG('To Link: '+ data)
+           videoUrl = self.cm.ph.getDataBeetwenMarkers(data, 'href="', '" data-attach', False)[1]
+           printDBG('Final: '+ videoUrl)
+           return videoUrl
+
+        if parser == 'http://www.drtuber.com':
+           params = re.findall('params\s\+=\s\'h=(.*?)\'.*?params\s\+=\s\'%26t=(.*?)\'.*?params\s\+=\s\'%26vkey=\'\s\+\s\'(.*?)\'', data, re.S)
+           if params:
+              for (param1, param2, param3) in params:
+                 hash = hashlib.md5(param3 + base64.b64decode('UFQ2bDEzdW1xVjhLODI3')).hexdigest()
+                 url = '%s/player_config/?h=%s&t=%s&vkey=%s&pkey=%s&aid=' % ("http://www.drtuber.com", param1, param2, param3, hash)
+                 query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+                 try:
+                    data = self.cm.getURLRequestData(query_data)
+                 except:
+                    printDBG( 'Host listsItems query error' )
+                    printDBG( 'Host listsItems query error url: '+url )
+                 #printDBG( 'Host listsItems data: '+data )
+                 url = re.findall('video_file>.*?(http.*?)\]\]><\/video_file>', data, re.S)
+                 if url:
+                    url = str(url[0])
+                    url = url.replace("&amp;","&")
+                    printDBG( 'Host listsItems url: '+url )
+                    return url
+           return ''
+
+        if parser == 'http://www.el-ladies.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source[^>]+?src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&') 
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+           videoPage = re.findall(',file:\'(.*?)\'', data, re.S)  
+           if videoPage:
+              return videoPage[0]
+           return ''
+
+        if parser == 'http://sexylies.com':
+           videoPage = re.search('source\stype="video/mp4"\ssrc="(.*?)"', data, re.S) 
+           if videoPage:
+              return videoPage.group(1)
+           return ''
+
+        if parser == 'http://www.eskimotube.com':
+           videoPage = re.search('color=black.*?href=(.*?)>', data, re.S) 
+           if videoPage:
+              return videoPage.group(1)
+           return ''
+
+        if parser == 'http://www.porn5.com':
+           videoPage = re.findall('p",url:"(.*?)"', data, re.S) 
+           if videoPage:
+              return videoPage[-1]
+           return ''
+
+        if parser == 'http://www.pornyeah.com':
+           videoPage = re.findall('settings=(.*?)"', data, re.S)
+           if not videoPage: return ''
+           xml = videoPage[0]
+           printDBG( 'Host getResolvedURL xml: '+xml )
+           try:    data = self.cm.getURLRequestData({'url': xml, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True})
+           except: 
+                   printDBG( 'Host getResolvedURL query error xml' )
+                   return videoUrl
+           videoPage = re.findall('defaultVideo:(.*?);', data, re.S)
+           if videoPage: return videoPage[0]
+           return ''
+
+        if parser == 'http://rusporn.tv':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_alt_url: ['"]([^"^']+?)['"]''')[0] 
+           if videoUrl: return videoUrl
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url: ['"]([^"^']+?)['"]''')[0] 
+           if videoUrl: return videoUrl
+           return ''
+
+        if parser == 'http://www.pornpillow.com':
+           videoPage = re.findall("'file': '(.*?)'", data, re.S)   
+           if videoPage:
+              return videoPage[0]
+           return ''
+
+        if parser == 'http://www.thumbzilla.com':
+           
+           fetchurl = self.cm.ph.getDataBeetwenMarkers(data, 'defaultQuality":false,"format":"hls","videoUrl":"', '","quality"', False) [1]
+           fetchurl = fetchurl.replace(r"\/",r"/")
+           if fetchurl.startswith('//'): fetchurl = 'http:' + fetchurl
+           printDBG( 'Ezt talaltam: '+fetchurl )
+           return fetchurl 
+           
+
+        if parser == 'https://vidlox.tv':
+           parse = re.search('sources.*?"(http.*?)"', data, re.S) 
+           if parse: return parse.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://xxxkingtube.com':
+           parse = re.search("File = '(http.*?)'", data, re.S) 
+           if parse: return parse.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://pornsharing.com':
+           parse = re.search('btoa\("(http.*?)"', data, re.S) 
+           if parse: return parse.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://pornxs.com':
+           parse = re.search('config-final-url="(http.*?)"', data, re.S) 
+           if parse: return parse.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://www.flyflv.com':
+           parse = re.search('fileUrl="(http.*?)"', data, re.S) 
+           if parse: return parse.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://www.yeptube.com':
+           videoUrl = re.search('video_id = "(.*?)"', data, re.S)
+           if videoUrl:
+              xml = 'http://www.yeptube.com/player_config_json/?vid=%s&aid=0&domain_id=0&embed=0&ref=&check_speed=0' % videoUrl.group(1)
+              try:    data = self.cm.getURLRequestData({'url': xml, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True})
+              except: 
+                 printDBG( 'Host getResolvedURL query error xml' )
+                 return ''
+              #printDBG( 'Host data json: '+data )
+              videoPage = re.search('"hq":"(http.*?)"', data, re.S)   
+              if videoPage: return videoPage.group(1).replace('\/','/')
+              videoPage = re.search('"lq":"(http.*?)"', data, re.S)   
+              if videoPage: return videoPage.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://vivatube.com':
+           videoUrl = re.search('video_id = "(.*?)"', data, re.S)
+           if videoUrl:
+              xml = 'http://vivatube.com/player_config_json/?vid=%s&aid=0&domain_id=0&embed=0&ref=&check_speed=0' % videoUrl.group(1)
+              try:    data = self.cm.getURLRequestData({'url': xml, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True})
+              except: 
+                 printDBG( 'Host getResolvedURL query error xml' )
+                 return ''
+              #printDBG( 'Host data json: '+data )
+              videoPage = re.search('"hq":"(http.*?)"', data, re.S)   
+              if videoPage: return videoPage.group(1).replace('\/','/')
+              videoPage = re.search('"lq":"(http.*?)"', data, re.S)   
+              if videoPage: return videoPage.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://www.tubeon.com':
+           videoUrl = re.search('video_id = "(.*?)"', data, re.S)
+           if videoUrl:
+              xml = 'http://www.tubeon.com/player_config_json/?vid=%s&aid=0&domain_id=0&embed=0&ref=&check_speed=0' % videoUrl.group(1)
+              try:    data = self.cm.getURLRequestData({'url': xml, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True})
+              except: 
+                 printDBG( 'Host getResolvedURL query error xml' )
+                 return ''
+              #printDBG( 'Host data json: '+data )
+              videoPage = re.search('"hq":"(http.*?)"', data, re.S)   
+              if videoPage: return videoPage.group(1).replace('\/','/')
+              videoPage = re.search('"lq":"(http.*?)"', data, re.S)   
+              if videoPage: return videoPage.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://www.yuvutu.com':
+           match = re.findall('iframe src="(.*?)"', data, re.S)
+           if match: 
+              url = 'http://www.yuvutu.com'+match[0]
+              query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+              try:
+                 data = self.cm.getURLRequestData(query_data)
+              except:
+                 printDBG( 'Host listsItems query error url: '+url )
+              #printDBG( 'Host listsItems data: '+data )
+              url = re.findall('file: "(.*?)"', data, re.S)
+              if url: 
+                 videoUrl = url[-1]
+                 return videoUrl
+           return ''
+
+        if parser == 'https://motherless.com':
+           videoUrl = self.cm.ph.getDataBeetwenMarkers(data, "fileurl = '", "';", False)[1]
+           printDBG( 'VideoLink: '+videoUrl )
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return videoUrl
+           return ''
+
+        if parser == 'http://dansmovies.com':
+           videoUrl = self.cm.ph.getDataBeetwenMarkers(data, 'source src="', '" type=', False)[1]
+           #if videoUrl.startswith('http://www.porntube.com'):
+              #self.HTTP_HEADER['Origin'] = 'https://www.porntube.com'
+           printDBG( 'VideoLink: '+videoUrl )
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+              return videoUrl
+           return ''
+        
+        if parser == 'https://www.homepornking.com':
+           videoUrl = self.cm.ph.getDataBeetwenMarkers(data, 'source type="video/mp4" src="', '" /></video></div>', False)[1]
+           printDBG( 'VideoLink: '+videoUrl )
+           #if videoUrl:
+           #   if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           #   return videoUrl
+           return videoUrl
+        
+        if parser == 'http://www.homemoviestube.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''value="settings=([^"^']+?)['"]''')[0]
+           if videoUrl:
+              query_data = { 'url': videoUrl, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+              try:
+                 data = self.cm.getURLRequestData(query_data)
+              except:
+                 printDBG( 'Host listsItems query error url: '+url )
+              #printDBG( 'Host listsItems data: '+data )
+              return self.cm.ph.getSearchGroups(data, '''flvMask:([^"^']+?);''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return videoUrl
+           return ''
+
+        if parser == 'https://porndig.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source\ssrc=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           if '.m3u8' in videoUrl:
+              if self.cm.isValidUrl(videoUrl): 
+                 tmp = getDirectM3U8Playlist(videoUrl)
+                 for item in tmp:
+                    printDBG( 'Host listsItems valtab: '  +str(item))
+                 return item['url']
+           if 'sources": ' in data:
+              try:
+                 sources = self.cm.ph.getDataBeetwenMarkers(data, 'sources": ', ']', False)[1]
+                 result = byteify(simplejson.loads(sources+']'))
+                 for item in result:
+                    try:
+                       if str(item["label"])=='720p': return str(item["src"]).replace('\/','/')
+                    except Exception as e:
+                       printExc()
+                    try:
+                       if str(item["label"])=='480p': return str(item["src"]).replace('\/','/')
+                    except Exception as e:
+                       printExc()
+                    try:
+                       if str(item["label"])=='360p': return str(item["src"]).replace('\/','/')
+                    except Exception as e:
+                       printExc()
+                    try:
+                       if str(item["label"])=='240p': return str(item["src"]).replace('\/','/')
+                    except Exception as e:
+                       printExc()
+              except Exception as e:
+                 printExc()
+           return videoUrl
+
+        if parser == 'http://hentaigasm.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file: ['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urllib2.unquote(videoUrl)
+
+        if parser == 'https://www.katestube.com':
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'var flashvars', '}', False)[1]
+           if data2: return self.cm.ph.getSearchGroups(data2, '''['"](https://www.katestube.com/get_file[^"^']+?)['"]''')[0].replace('&amp;','&')
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'sources:', ']', False)[1]
+           if data2: return self.cm.ph.getSearchGroups(data, '''src:\s['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file: ['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''['"](https://www.katestube.com/get_file[^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              return urllib2.unquote(videoUrl)
+           return ''
+
+        if parser == 'https://www.pornoxo.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''"file":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file\':\s['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''filefallback\':\s['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source\ssrc=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file:\s['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+
+        if parser == 'http://sexkino.to':
+           videoUrl = re.findall('<iframe.*?src="(.*?)"', data, re.S)
+           if videoUrl:
+              return self.getResolvedURL(videoUrl[-1])
+
+############################################
+# functions for host
+############################################
+def decodeUrl(text):
+	text = text.replace('%20',' ')
+	text = text.replace('%21','!')
+	text = text.replace('%22','"')
+	text = text.replace('%23','&')
+	text = text.replace('%24','$')
+	text = text.replace('%25','%')
+	text = text.replace('%26','&')
+	text = text.replace('%2B','+')
+	text = text.replace('%2F','/')
+	text = text.replace('%3A',':')
+	text = text.replace('%3B',';')
+	text = text.replace('%3D','=')
+	text = text.replace('&#x3D;','=')
+	text = text.replace('%3F','?')
+	text = text.replace('%40','@')
+	return text
+
+def decodeHtml(text):
+	text = text.replace('&auml;','Ã¤')
+	text = text.replace('\u00e4','Ã¤')
+	text = text.replace('&#228;','Ã¤')
+	text = text.replace('&oacute;','Ã³')
+	text = text.replace('&eacute;','e')
+	text = text.replace('&aacute;','a')
+	text = text.replace('&ntilde;','n')
+
+	text = text.replace('&Auml;','Ã')
+	text = text.replace('\u00c4','Ã')
+	text = text.replace('&#196;','Ã')
+	
+	text = text.replace('&ouml;','Ã¶')
+	text = text.replace('\u00f6','Ã¶')
+	text = text.replace('&#246;','Ã¶')
+	
+	text = text.replace('&ouml;','Ã')
+	text = text.replace('\u00d6','Ã')
+	text = text.replace('&#214;','Ã')
+	
+	text = text.replace('&uuml;','Ã¼')
+	text = text.replace('\u00fc','Ã¼')
+	text = text.replace('&#252;','Ã¼')
+	
+	text = text.replace('&Uuml;','Ã')
+	text = text.replace('\u00dc','Ã')
+	text = text.replace('&#220;','Ã')
+	
+	text = text.replace('&szlig;','Ã')
+	text = text.replace('\u00df','Ã')
+	text = text.replace('&#223;','Ã')
+	
+	text = text.replace('&amp;','&')
+	text = text.replace('&quot;','\"')
+	text = text.replace('&quot_','\"')
+
+	text = text.replace('&gt;','>')
+	text = text.replace('&apos;',"'")
+	text = text.replace('&acute;','\'')
+	text = text.replace('&ndash;','-')
+	text = text.replace('&bdquo;','"')
+	text = text.replace('&rdquo;','"')
+	text = text.replace('&ldquo;','"')
+	text = text.replace('&lsquo;','\'')
+	text = text.replace('&rsquo;','\'')
+	text = text.replace('&#034;','\'')
+	text = text.replace('&#038;','&')
+	text = text.replace('&#039;','\'')
+	text = text.replace('&#39;','\'')
+	text = text.replace('&#160;',' ')
+	text = text.replace('\u00a0',' ')
+	text = text.replace('&#174;','')
+	text = text.replace('&#225;','a')
+	text = text.replace('&#233;','e')
+	text = text.replace('&#243;','o')
+	text = text.replace('&#8211;',"-")
+	text = text.replace('\u2013',"-")
+	text = text.replace('&#8216;',"'")
+	text = text.replace('&#8217;',"'")
+	text = text.replace('#8217;',"'")
+	text = text.replace('&#8220;',"'")
+	text = text.replace('&#8221;','"')
+	text = text.replace('&#8222;',',')
+	text = text.replace('&#x27;',"'")
+	text = text.replace('&#8230;','...')
+	text = text.replace('\u2026','...')
+	text = text.replace('&#41;',')')
+	text = text.replace('&lowbar;','_')
+	text = text.replace('&rsquo;','\'')
+	text = text.replace('&lpar;','(')
+	text = text.replace('&rpar;',')')
+	text = text.replace('&comma;',',')
+	text = text.replace('&period;','.')
+	text = text.replace('&plus;','+')
+	text = text.replace('&num;','#')
+	text = text.replace('&excl;','!')
+	text = text.replace('&#039','\'')
+	text = text.replace('&semi;','')
+	text = text.replace('&lbrack;','[')
+	text = text.replace('&rsqb;',']')
+	text = text.replace('&nbsp;','')
+	text = text.replace('&#133;','')
+	text = text.replace('&#4','')
+	text = text.replace('&#40;','')
+
+	text = text.replace('&atilde;',"'")
+	text = text.replace('&colon;',':')
+	text = text.replace('&sol;','/')
+	text = text.replace('&percnt;','%')
+	text = text.replace('&commmat;',' ')
+	text = text.replace('&#58;',':')
+
+	return text	
+
+############################################
+# functions for pornhub
+############################################
+def decrypt(ciphertext, password, nBits):
+    printDBG( 'decrypt begin ' )
+    blockSize = 16
+    if not nBits in (128, 192, 256): return ""
+    ciphertext = base64.b64decode(ciphertext)
+#    password = password.encode("utf-8")
+
+    nBytes = nBits//8
+    pwBytes = [0] * nBytes
+    for i in range(nBytes): pwBytes[i] = 0 if i>=len(password) else ord(password[i])
+    key = Cipher(pwBytes, KeyExpansion(pwBytes))
+    key += key[:nBytes-16]
+
+    counterBlock = [0] * blockSize
+    ctrTxt = ciphertext[:8]
+    for i in range(8): counterBlock[i] = ord(ctrTxt[i])
+
+    keySchedule = KeyExpansion(key)
+
+    nBlocks = int( math.ceil( float(len(ciphertext)-8) / float(blockSize) ) )
+    ct = [0] * nBlocks
+    for b in range(nBlocks):
+        ct[b] = ciphertext[8+b*blockSize : 8+b*blockSize+blockSize]
+    ciphertext = ct
+
+    plaintxt = [0] * len(ciphertext)
+
+    for b in range(nBlocks):
+        for c in range(4): counterBlock[15-c] = urs(b, c*8) & 0xff
+        for c in range(4): counterBlock[15-c-4] = urs( int( float(b+1)/0x100000000-1 ), c*8) & 0xff
+
+        cipherCntr = Cipher(counterBlock, keySchedule)
+
+        plaintxtByte = [0] * len(ciphertext[b])
+        for i in range(len(ciphertext[b])):
+            plaintxtByte[i] = cipherCntr[i] ^ ord(ciphertext[b][i])
+            plaintxtByte[i] = chr(plaintxtByte[i])
+        plaintxt[b] = "".join(plaintxtByte)
+
+    plaintext = "".join(plaintxt)
+ #   plaintext = plaintext.decode("utf-8")
+    return plaintext
+
+Sbox = [
+    0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
+    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
+    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
+    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
+    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
+    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
+    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
+    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
+    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
+    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
+    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
+    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
+    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
+    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
+    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
+    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
+]
+
+Rcon = [
+    [0x00, 0x00, 0x00, 0x00],
+    [0x01, 0x00, 0x00, 0x00],
+    [0x02, 0x00, 0x00, 0x00],
+    [0x04, 0x00, 0x00, 0x00],
+    [0x08, 0x00, 0x00, 0x00],
+    [0x10, 0x00, 0x00, 0x00],
+    [0x20, 0x00, 0x00, 0x00],
+    [0x40, 0x00, 0x00, 0x00],
+    [0x80, 0x00, 0x00, 0x00],
+    [0x1b, 0x00, 0x00, 0x00],
+    [0x36, 0x00, 0x00, 0x00]
+]
+
+def Cipher(input, w):
+    printDBG( 'cipher begin ' )
+    Nb = 4
+    Nr = len(w)/Nb - 1
+
+    state = [ [0] * Nb, [0] * Nb, [0] * Nb, [0] * Nb ]
+    for i in range(0, 4*Nb): state[i%4][i//4] = input[i]
+
+    state = AddRoundKey(state, w, 0, Nb)
+
+    for round in range(1, Nr):
+        state = SubBytes(state, Nb)
+        state = ShiftRows(state, Nb)
+        state = MixColumns(state, Nb)
+        state = AddRoundKey(state, w, round, Nb)
+
+    state = SubBytes(state, Nb)
+    state = ShiftRows(state, Nb)
+    state = AddRoundKey(state, w, Nr, Nb)
+
+    output = [0] * 4*Nb
+    for i in range(4*Nb): output[i] = state[i%4][i//4]
+    return output
+
+def SubBytes(s, Nb):
+    printDBG( 'subbytes begin ' )
+    for r in range(4):
+        for c in range(Nb):
+            s[r][c] = Sbox[s[r][c]]
+    return s
+
+def ShiftRows(s, Nb):
+    printDBG( 'shiftrows begin ' )
+    t = [0] * 4
+    for r in range (1,4):
+        for c in range(4): t[c] = s[r][(c+r)%Nb]
+        for c in range(4): s[r][c] = t[c]
+    return s
+
+def MixColumns(s, Nb):
+    printDBG( 'mixcolumns begin ' )
+    for c in range(4):
+        a = [0] * 4
+        b = [0] * 4
+        for i in range(4):
+            a[i] = s[i][c]
+            b[i] = s[i][c]<<1 ^ 0x011b if s[i][c]&0x80 else s[i][c]<<1
+        s[0][c] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3]
+        s[1][c] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3]
+        s[2][c] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3]
+        s[3][c] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3]
+    return s
+
+def AddRoundKey(state, w, rnd, Nb):
+    printDBG( 'addroundkey begin ' )
+    for r in range(4):
+        for c in range(Nb):
+            state[r][c] ^= w[rnd*4+c][r]
+    return state
+
+def KeyExpansion(key):
+    printDBG( 'keyexpansion begin ' )
+    Nb = 4
+    Nk = len(key)/4
+    Nr = Nk + 6
+
+    w = [0] * Nb*(Nr+1)
+    temp = [0] * 4
+
+    for i in range(Nk):
+        r = [key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]]
+        w[i] = r
+
+    for i in range(Nk, Nb*(Nr+1)):
+        w[i] = [0] * 4
+        for t in range(4): temp[t] = w[i-1][t]
+        if i%Nk == 0:
+            temp = SubWord(RotWord(temp))
+            for t in range(4): temp[t] ^= Rcon[i/Nk][t]
+        elif Nk>6 and i%Nk == 4:
+            temp = SubWord(temp)
+        for t in range(4): w[i][t] = w[i-Nk][t] ^ temp[t]
+    return w
+
+def SubWord(w):
+    printDBG( 'subword begin ' )
+    for i in range(4): w[i] = Sbox[w[i]]
+    return w
+
+def RotWord(w):
+    printDBG( 'rotword begin ' )
+    tmp = w[0]
+    for i in range(3): w[i] = w[i+1]
+    w[3] = tmp
+    return w
+
+def encrypt(plaintext, password, nBits):
+    printDBG( 'encrypt begin ' )
+    blockSize = 16
+    if not nBits in (128, 192, 256): return ""
+#    plaintext = plaintext.encode("utf-8")
+#    password  = password.encode("utf-8")
+    nBytes = nBits//8
+    pwBytes = [0] * nBytes
+    for i in range(nBytes): pwBytes[i] = 0 if i>=len(password) else ord(password[i])
+    key = Cipher(pwBytes, KeyExpansion(pwBytes))
+    key += key[:nBytes-16]
+
+    counterBlock = [0] * blockSize
+    now = datetime.datetime.now()
+    nonce = time.mktime( now.timetuple() )*1000 + now.microsecond//1000
+    nonceSec = int(nonce // 1000)
+    nonceMs  = int(nonce % 1000)
+
+    for i in range(4): counterBlock[i] = urs(nonceSec, i*8) & 0xff
+    for i in range(4): counterBlock[i+4] = nonceMs & 0xff
+
+    ctrTxt = ""
+    for i in range(8): ctrTxt += chr(counterBlock[i])
+
+    keySchedule = KeyExpansion(key)
+
+    blockCount = int(math.ceil(float(len(plaintext))/float(blockSize)))
+    ciphertxt = [0] * blockCount
+
+    for b in range(blockCount):
+        for c in range(4): counterBlock[15-c] = urs(b, c*8) & 0xff
+        for c in range(4): counterBlock[15-c-4] = urs(b/0x100000000, c*8)
+
+        cipherCntr = Cipher(counterBlock, keySchedule)
+
+        blockLength = blockSize if b<blockCount-1 else (len(plaintext)-1)%blockSize+1
+        cipherChar = [0] * blockLength
+
+        for i in range(blockLength):
+            cipherChar[i] = cipherCntr[i] ^ ord(plaintext[b*blockSize+i])
+            cipherChar[i] = chr( cipherChar[i] )
+        ciphertxt[b] = ''.join(cipherChar)
+
+    ciphertext = ctrTxt + ''.join(ciphertxt)
+    ciphertext = base64.b64encode(ciphertext)
+
+    return ciphertext
+
+def urs(a, b):
+    printDBG( 'urs begin ' )
+    a &= 0xffffffff
+    b &= 0x1f
+    if a&0x80000000 and b>0:
+        a = (a>>1) & 0x7fffffff
+        a = a >> (b-1)
+    else:
+        a = (a >> b)
+    return a
+
+############################################
+# functions for eporner
+############################################
+def calc_hash(s):
+    return ''.join((encode_base_n(int(s[lb:lb + 8], 16), 36) for lb in range(0, 32, 8)))
+
+def encode_base_n(num, n, table=None):
+    FULL_TABLE = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
+    if not table:
+        table = FULL_TABLE[:n]
+
+    if n > len(table):
+        raise ValueError('base %d exceeds table length %d' % (n, len(table)))
+
+    if num == 0:
+        return table[0]
+
+    ret = ''
+    while num:
+        ret = table[num % n] + ret
+        num = num // n
+    return ret
+############################################
+# functions for myfreecam
+############################################
+vs_str={}
+vs_str[0]="PUBLIC"
+vs_str[2]="AWAY"
+vs_str[12]="PVT"
+vs_str[13]="GROUP"
+vs_str[90]="CAM OFF"
+vs_str[127]="OFFLINE"
+vs_str[128]="TRUEPVT"
+
+def fc_decode_json(m):
+	try:
+		m = m.replace('\r', '\\r').replace('\n', '\\n')
+		return simplejson.loads(m[m.find("{"):].decode("utf-8","ignore"))
+	except:
+		return simplejson.loads("{\"lv\":0}")
+
+def read_model_data(m):
+	global CAMGIRLSERVER
+	global CAMGIRLCHANID
+	global CAMGIRLUID
+	printDBG("INFO  - "+str(m))
+	usr = ''
+	msg = fc_decode_json(m)
+	try:
+		sid=msg['sid']
+		level  = msg['lv']
+	except:
+		printDBG ("errr reply ... We're fucked ..")
+		return
+
+	vs     = msg['vs']
+	usr    = msg['nm']
+
+	if vs == 2:
+		printDBG ("%s is %s" % (usr, vs_str[vs]))
+		SetIPTVPlayerLastHostError(_(vs_str[vs]))
+		return []
+	if vs == 12:
+		printDBG ("%s is %s" % (usr, vs_str[vs]))
+		SetIPTVPlayerLastHostError(_(vs_str[vs]))
+		return []
+	if vs == 13:
+		printDBG ("%s is %s" % (usr, vs_str[vs]))
+		SetIPTVPlayerLastHostError(_(vs_str[vs]))
+		return []
+	if vs == 90:
+		printDBG ("%s is %s" % (usr, vs_str[vs]))
+		SetIPTVPlayerLastHostError(_(vs_str[vs]))
+		return []
+	if vs == 127:
+		printDBG ("%s is %s" % (usr, vs_str[vs]))
+		SetIPTVPlayerLastHostError(_(vs_str[vs]))
+		return []
+	if vs == 128:
+		printDBG ("%s is %s" % (usr, vs_str[vs]))
+		SetIPTVPlayerLastHostError(_(vs_str[vs]))
+		return []
+
+	CAMGIRLUID    = msg['uid']
+	CAMGIRLCHANID = msg['uid'] + 100000000
+	camgirlinfo=msg['m']
+	flags  = camgirlinfo['flags']
+	u_info=msg['u']
+
+	try:
+		CAMGIRLSERVER = u_info['camserv']
+		printDBG ("Video Server : %d Channel Id : %d  Model id : %d " %(CAMGIRLSERVER, CAMGIRLCHANID, CAMGIRLUID))
+		SetIPTVPlayerLastHostError(str(CAMGIRLSERVER))
+#		with open('/tmp/title', 'w') as titleFile:  
+#			titleFile.write(str(CAMGIRLSERVER))
+#		if CAMGIRLSERVER >= 3000:
+#			SetIPTVPlayerLastHostError(str(CAMGIRLSERVER))
+#			CAMGIRLSERVER = 0
+#			return []
+#			CAMGIRLSERVER = CAMGIRLSERVER - 1000
+#		elif CAMGIRLSERVER >= 1500:
+#			SetIPTVPlayerLastHostError(str(CAMGIRLSERVER))
+#			CAMGIRLSERVER = 0
+#			return []
+#			CAMGIRLSERVER = CAMGIRLSERVER - 800
+#		elif CAMGIRLSERVER >= 800:
+#			CAMGIRLSERVER = CAMGIRLSERVER - 500
+		if vs != 0:
+			CAMGIRLSERVER = 0
+	except KeyError:
+		CAMGIRLSERVER=0
+
+	truepvt = ((flags & 8) == 8)
+
+	buf=usr+" =>"
+	try:
+		if truepvt == 1:
+			buf+=" (TRUEPVT)"
+		else:
+			buf+=" ("+vs_str[vs]+")"
+	except KeyError:
+		pass
+	printDBG ("%s  Video Server : %d Channel Id : %d  Model id : %d " %(buf, CAMGIRLSERVER, CAMGIRLCHANID, CAMGIRLUID))
+
+def myfreecam_start(url, xchat):
+	global CAMGIRL
+	global CAMGIRLSERVER
+	global CAMGIRLUID
+	global CAMGIRLCHANID
+	CAMGIRL= url
+	CAMGIRLSERVER = 0
+	libsPath = GetPluginDir('libs/')
+	import sys
+	sys.path.insert(1, libsPath)
+	import websocket
+	printDBG("Connecting to Chat Server:")
+	try:
+		host = "ws://"+xchat+".myfreecams.com:8080/fcsl"
+		printDBG("Chat Server..."+host)
+		ws = websocket.create_connection(host)
+		ws.send("hello fcserver\n\0")
+		ws.send("1 0 0 20071025 0 guest:guest\n\0")
+	except:
+		printDBG ("We're fucked ...")
+		return ''
+	rembuf=""
+	quitting = 0
+	try:
+		while quitting == 0:
+			sock_buf =  ws.recv()
+			sock_buf=rembuf+sock_buf
+			rembuf=""
+			while True:
+				hdr=re.search (r"(\w+) (\w+) (\w+) (\w+) (\w+)", sock_buf)
+				if bool(hdr) == 0:
+					break
+				fc = hdr.group(1)
+				mlen   = int(fc[0:4])
+				fc_type = int(fc[4:])
+				msg=sock_buf[4:4+mlen]
+				if len(msg) < mlen:
+					rembuf=''.join(sock_buf)
+					break
+				msg=urllib.unquote(msg)
+				if fc_type == 1:
+					ws.send("10 0 0 20 0 %s\n\0" % CAMGIRL)
+				elif fc_type == 10:
+					read_model_data(msg)
+					quitting=1
+				sock_buf=sock_buf[4+mlen:]
+				if len(sock_buf) == 0:
+					break
+	except:
+		printDBG ("WebSocket Error")
+		return ''
+	ws.close()
+	if CAMGIRLSERVER != 0:
+		#Url="http://video"+str(CAMGIRLSERVER)+".myfreecams.com:1935/NxServer/ngrp:mfc_"+str(CAMGIRLCHANID)+".f4v_mobile/playlist.m3u8" #+'?nc='+str(int(time_time()*1000))  #+str(datetime.now()) #str(time_time()).encode('utf-8')
+		#Url="http://video"+str(CAMGIRLSERVER)+".myfreecams.com:1935/NxServer/mfc_"+str(CAMGIRLCHANID)+".f4v_aac/playlist.m3u8" #320x240
+		Url="https://video"+str(CAMGIRLSERVER)+".myfreecams.com/NxServer/ngrp:mfc_"+str(CAMGIRLCHANID)+".f4v_mobile/playlist.m3u8?nc=0.5863279394620062" #+str(random.random())
+		printDBG("Camgirl - "+CAMGIRL)
+		printDBG("Url  - "+Url)
+		return Url
+	else:
+		printDBG ("No video server ... _|_ ")
+		return ''
+
+# decrypt function/0/
+def decryptHash(videoUrl, licenseCode, hashRange):
+    result = ''
+    videoUrlPart = videoUrl.split('/')
+    hash = videoUrlPart[7][:2*int(hashRange)]
+    nonConvertHash = videoUrlPart[7][2*int(hashRange):]
+    seed = calcSeed(licenseCode, hashRange)
+    if (seed != '' and hash !=''):
+        for k in range(len(hash)-1, -1, -1):
+            l = k
+            for m in range(k,len(hash)):
+                l += int(seed[m])
+            l = l % len(hash)
+            n = ''
+            for o in range(0, len(hash)):
+                n = n + hash[l] if o == k else n + hash[k] if o == l else n + hash[o]
+            hash = n
+        videoUrlPart[7] = hash + nonConvertHash
+        videoUrlPart.pop(0)
+        videoUrlPart.pop(0)        
+        result = '/'.join(videoUrlPart)   
+    return result        
+
+
+def calcSeed(licenseCode, hashRange):
+    f = licenseCode.replace('$', '').replace('0', '1')
+    j = int(len(f) / 2)
+    k = int(f[:len(f)-j])
+    l = int(f[j:])
+    g = abs(l - k)
+    fi = 4*g
+    i = int(int(hashRange) / 2 + 2)
+    m = ''
+    for g2 in range (0,j+1):
+        for h in range (1,5):
+            n =  int(licenseCode[g2 + h]) + int(str(fi)[g2])
+            if n>=i:
+                n -= i	
+            m = m + str(n)
+    return m 
\ Ð ÐºÐ¾Ð½ÑÐµ ÑÐ°Ð¹Ð»Ð° Ð½ÐµÑ Ð½Ð¾Ð²Ð¾Ð¹ ÑÑÑÐ¾ÐºÐ¸
diff -ruN o/IPTVPlayer/hosts/hostyoutube.py pc/IPTVPlayer/hosts/hostyoutube.py
--- o/IPTVPlayer/hosts/hostyoutube.py	2023-05-03 17:15:44.540162632 +0300
+++ pc/IPTVPlayer/hosts/hostyoutube.py	2023-05-03 17:16:32.666022691 +0300
@@ -26,7 +26,7 @@
 ###################################################
 # Config options for HOST
 ###################################################
-config.plugins.iptvplayer.Sciezkaurllist = ConfigDirectory(default="/hdd/")
+config.plugins.iptvplayer.Sciezkaurllist = ConfigDirectory(default="/media/hdd/")
 
 
 def GetConfigList():
diff -ruN o/IPTVPlayer/hosts/list.txt pc/IPTVPlayer/hosts/list.txt
--- o/IPTVPlayer/hosts/list.txt	2023-04-03 13:25:47.506164855 +0300
+++ pc/IPTVPlayer/hosts/list.txt	2023-05-03 17:16:32.666022691 +0300
@@ -172,3 +172,4 @@
 hostyoutube
 hostzaluknijcc
 hostzdfmediathek
+hostXXX
diff -ruN o/IPTVPlayer/iptvdm/iptvdh.py pc/IPTVPlayer/iptvdm/iptvdh.py
--- o/IPTVPlayer/iptvdm/iptvdh.py	2022-07-03 14:10:10.873103406 +0300
+++ pc/IPTVPlayer/iptvdm/iptvdh.py	2023-05-03 17:16:32.666022691 +0300
@@ -104,7 +104,7 @@
 
     @staticmethod
     def GET_FFMPEG_PATH():
-        altFFMPEGPath = '/iptvplayer_rootfs/usr/bin/ffmpeg'
+        altFFMPEGPath = '/bin/ffmpeg'
         if IsExecutable(altFFMPEGPath):
             return altFFMPEGPath
         return "ffmpeg"
diff -ruN o/IPTVPlayer/iptvupdate/custom/xxx.sh pc/IPTVPlayer/iptvupdate/custom/xxx.sh
--- o/IPTVPlayer/iptvupdate/custom/xxx.sh	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/iptvupdate/custom/xxx.sh	2023-05-03 17:16:32.666022691 +0300
@@ -0,0 +1,40 @@
+#!/bin/sh
+cp $1/iptvupdate/custom/xxx.sh $2/iptvupdate/custom/xxx.sh
+status=$?
+if [ $status -ne 0 ]; then
+	echo "BÅÄd krytyczny. Plik $0 nie moÅ¼e zostaÄ skopiowany, error[$status]."
+	exit 1
+fi
+cp $1/hosts/hostXXX.py $2/hosts/
+cp $1/icons/logos/XXXlogo.png $2/icons/logos/
+cp $1/icons/PlayerSelector/XXX*.png $2/icons/PlayerSelector/ 
+status=$?
+if [ $status -ne 0 ]; then
+	echo "Uwaga, Nie udaÅo siÄ skopiowaÄ XXX, error[$status]."
+else
+	echo "Kopiowanie XXX OK"
+fi
+if [ -x /usr/bin/fullwget ] ; then
+	/usr/bin/fullwget --no-check-certificate https://gitlab.com/iptv-host-xxx/iptv-host-xxx/repository/master/archive.tar.gz -q -O /tmp/iptv-host-xxx.tar.gz
+else
+	wget --no-check-certificate https://gitlab.com/iptv-host-xxx/iptv-host-xxx/repository/master/archive.tar.gz -q -O /tmp/iptv-host-xxx.tar.gz
+fi
+	if [ -s /tmp/iptv-host-xxx.tar.gz ] ; then
+		tar -xzf /tmp/iptv-host-xxx.tar.gz -C /tmp 
+		cp -r -f /tmp/iptv-host-xxx-master*/IPTVPlayer/icons/PlayerSelector/* $2/icons/PlayerSelector/
+		cp -r -f /tmp/iptv-host-xxx-master*/IPTVPlayer/icons/logos/* $2/icons/logos/
+		cp -r -f /tmp/iptv-host-xxx-master*/IPTVPlayer/iptvupdate/custom/* $2/iptvupdate/custom/
+		cp -r -f /tmp/iptv-host-xxx-master*/IPTVPlayer/hosts/* $2/hosts/
+		rm -r -f /tmp/iptv-host-xxx*
+		if [ -e $2/icons/PlayerSelector/XXX100 ] ; then
+			mv $2/icons/PlayerSelector/XXX100 $2/icons/PlayerSelector/XXX100.png
+			mv $2/icons/PlayerSelector/XXX120 $2/icons/PlayerSelector/XXX120.png
+			mv $2/icons/PlayerSelector/XXX135 $2/icons/PlayerSelector/XXX135.png
+			echo "Rename file png OK"
+		fi
+		echo "Download XXX tar.gz OK"
+	else
+		echo "Uwaga, Nie udaÅ siÄ Download XXX tar.gz"
+	fi
+echo "Wykonywanie $0 zakoÅczone sukcesem."
+exit 0
diff -ruN o/IPTVPlayer/iptvupdate/updatemainwindow.py pc/IPTVPlayer/iptvupdate/updatemainwindow.py
--- o/IPTVPlayer/iptvupdate/updatemainwindow.py	2022-09-20 15:40:06.858776949 +0300
+++ pc/IPTVPlayer/iptvupdate/updatemainwindow.py	2023-05-03 17:16:32.666022691 +0300
@@ -312,7 +312,7 @@
         if os_path.isfile(newVerFile):
             verPattern = self.VERSION_PATTERN
         else:
-            newVerFile = os_path.join(newVerPath, 'version.pyo')
+            newVerFile = os_path.join(newVerPath, 'version.pyc')
             verPattern = '([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)'
 
         try:
diff -ruN o/IPTVPlayer/locale/ru/LC_MESSAGES/IPTVPlayer.po pc/IPTVPlayer/locale/ru/LC_MESSAGES/IPTVPlayer.po
--- o/IPTVPlayer/locale/ru/LC_MESSAGES/IPTVPlayer.po	2023-01-29 15:16:27.233092939 +0300
+++ pc/IPTVPlayer/locale/ru/LC_MESSAGES/IPTVPlayer.po	2023-05-03 17:16:32.670022845 +0300
@@ -4,13 +4,13 @@
 "Report-Msgid-Bugs-To: \n"
 "POT-Creation-Date: 2023-01-28 14:29+0100\n"
 "PO-Revision-Date: \n"
-"Last-Translator: krutoj2010 <krutoj2010@gmail.com>\n"
+"Last-Translator: ÐÐ»ÐµÐºÑÐ°Ð½Ð´Ñ ÐÐ¾Ð»ÑÑÐ¾Ð² <a.g.prosat@gmail.com>\n"
 "Language-Team: IPTVPlayer\n"
 "Language: ru\n"
 "MIME-Version: 1.0\n"
 "Content-Type: text/plain; charset=UTF-8\n"
 "Content-Transfer-Encoding: 8bit\n"
-"X-Generator: Poedit 1.6.10\n"
+"X-Generator: Poedit 3.0\n"
 "X-Poedit-Basepath: .\n"
 "Plural-Forms: nplurals=3; plural=(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
 "X-Poedit-SearchPath-0: ../plugin\n"
@@ -18,45 +18,53 @@
 #: ../components/iptvplayerwidget.py:1781
 #, python-format
 msgid "\tDisk space available: %s"
-msgstr ""
+msgstr "\tÐÐ¾ÑÑÑÐ¿Ð½Ð¾Ðµ  Ð´Ð¸ÑÐºÐ¾Ð²Ð¾Ðµ Ð¿ÑÐ¾ÑÑÑÐ°Ð½ÑÑÐ²Ð¾: %s"
 
 #: ../components/iptvplayerwidget.py:1780
 #, python-format
 msgid "\tDisk space required: %s"
-msgstr ""
+msgstr "\tÐÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼Ð¾Ðµ Ð´Ð¸ÑÐºÐ¾Ð²Ð¾Ðµ Ð¿ÑÐ¾ÑÑÑÐ°Ð½ÑÑÐ²Ð¾: %s"
 
 #: ../hosts/hostbbcsport.py:466
 msgid ""
 "\n"
 "Error[1]."
 msgstr ""
+"\n"
+"ÐÑÐ¸Ð±ÐºÐ°[1]."
 
 #: ../hosts/hostbbcsport.py:477
 msgid ""
 "\n"
 "Error[2]."
 msgstr ""
+"\n"
+"ÐÑÐ¸Ð±ÐºÐ°[2]."
 
 #: ../hosts/hostbbcsport.py:485
 msgid ""
 "\n"
 "Error[3]."
 msgstr ""
+"\n"
+"ÐÑÐ¸Ð±ÐºÐ°[3]."
 
 #: ../hosts/hostbbcsport.py:518
 msgid ""
 "\n"
 "Error[4]."
 msgstr ""
+"\n"
+"ÐÑÐ¸Ð±ÐºÐ°[4]."
 
 #: ../setup/iptvsetupimpl.py:839
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "\n"
 "For more info please ask %s "
 msgstr ""
 "\n"
-"ÐÐ»Ñ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¸Ñ Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½Ð¾Ð¹ Ð¸Ð½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ð¸, Ð¿Ð¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ° ÑÐ¿ÑÐ¾ÑÐ¸ÑÐµ  Ñ samsamsam@o2.pl"
+"ÐÐ»Ñ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¸Ñ Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½Ð¾Ð¹ Ð¸Ð½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ð¸ Ð¾Ð±ÑÐ°ÑÐ¸ÑÐµÑÑ Ðº %s "
 
 #: ../setup/iptvsetupimpl.py:905 ../setup/iptvsetupimpl.py:966
 msgid ""
@@ -64,7 +72,7 @@
 "For more info please ask samsamsam@o2.pl"
 msgstr ""
 "\n"
-"ÐÐ»Ñ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¸Ñ Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½Ð¾Ð¹ Ð¸Ð½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ð¸, Ð¿Ð¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ° ÑÐ¿ÑÐ¾ÑÐ¸ÑÐµ  Ñ samsamsam@o2.pl"
+"ÐÐ»Ñ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¸Ñ Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½Ð¾Ð¹ Ð¸Ð½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ð¸ Ð¾Ð±ÑÐ°ÑÐ¸ÑÐµÑÑ Ðº samsamsam@o2.pl"
 
 #: ../setup/iptvsetupimpl.py:776 ../setup/iptvsetupimpl.py:1316
 msgid ""
@@ -72,7 +80,7 @@
 "For more info please ask the author samsamsam@o2.pl"
 msgstr ""
 "\n"
-"ÐÐ»Ñ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¸Ñ Ð±Ð¾Ð»ÐµÐµ Ð¿Ð¾Ð´ÑÐ¾Ð±Ð½Ð¾Ð¹ Ð¸Ð½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ð¸, Ð¿Ð¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, ÑÐ¿ÑÐ¾ÑÐ¸ÑÐµ Ð°Ð²ÑÐ¾ÑÐ° samsamsam@o2.pl"
+"ÐÐ»Ñ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¸Ñ Ð±Ð¾Ð»ÐµÐµ Ð¿Ð¾Ð´ÑÐ¾Ð±Ð½Ð¾Ð¹ Ð¸Ð½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ð¸ Ð¾Ð±ÑÐ°ÑÐ¸ÑÐµÑÑ Ðº Ð°Ð²ÑÐ¾ÑÑ samsamsam@o2.pl"
 
 #: ../setup/iptvsetupimpl.py:1264
 msgid ""
@@ -80,7 +88,7 @@
 "For more info please visit http://fluendo.com/"
 msgstr ""
 "\n"
-"ÐÐ»Ñ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¸Ñ Ð±Ð¾Ð»ÐµÐµ Ð¿Ð¾Ð´ÑÐ¾Ð±Ð½Ð¾Ð¹ Ð¸Ð½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ð¸, Ð¿Ð¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾ÑÐµÑÐ¸ÑÐµ http://fluendo.com/"
+"ÐÐ»Ñ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¸Ñ Ð¿Ð¾Ð´ÑÐ¾Ð±Ð½Ð¾Ð¹ Ð¸Ð½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ð¸, Ð¿Ð¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾ÑÐµÑÐ¸ÑÐµ http://fluendo.com/"
 
 #: ../components/iptvplayerwidget.py:507 ../components/iptvsubdownloader.py:381
 msgid ""
@@ -88,7 +96,7 @@
 "Make sure you are using the latest version of the plugin."
 msgstr ""
 "\n"
-"Ð£Ð±ÐµÐ´Ð¸ÑÐµÑÑ, ÑÑÐ¾ Ð²Ñ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÐµ Ð¿Ð¾ÑÐ»ÐµÐ´Ð½ÑÑ Ð²ÐµÑÑÐ¸Ñ Ð¿Ð»Ð°Ð³Ð¸Ð½Ð°."
+"Ð£Ð±ÐµÐ´Ð¸ÑÐµÑÑ, ÑÑÐ¾ ÐÑ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÐµ Ð¿Ð¾ÑÐ»ÐµÐ´Ð½ÑÑ Ð²ÐµÑÑÐ¸Ñ Ð¿Ð»Ð°Ð³Ð¸Ð½Ð°."
 
 #: ../setup/iptvsetupimpl.py:1031
 msgid ""
@@ -99,7 +107,6 @@
 "ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾ÑÐµÑÐ¸ÑÐµ http://duktape.org/"
 
 #: ../components/iptvplayerwidget.py:502
-#, fuzzy
 msgid ""
 "\n"
 "This host is not integral part of the E2iPlayer plugin.\n"
@@ -127,57 +134,56 @@
 #: ../components/iptvdirbrowser.py:325 ../iptvdm/iptvdmui.py:444
 #: ../setup/iptvsetupwidget.py:47 ../setup/iptvsetupwidget.py:48
 msgid " "
-msgstr ""
+msgstr " "
 
 #: ../components/iptvconfigmenu.py:403
 msgid "    Allowed formats of thumbnails"
-msgstr "Ð Ð°Ð·ÑÐµÑÐµÐ½Ð½ÑÐ¹ ÑÐ¾ÑÐ¼Ð°Ñ ÑÑÐºÐ¸Ð·Ð¾Ð²"
+msgstr "    Ð Ð°Ð·ÑÐµÑÑÐ½Ð½ÑÐ¹ ÑÐ¾ÑÐ¼Ð°Ñ ÑÑÐºÐ¸Ð·Ð¾Ð²"
 
 #: ../components/iptvconfigmenu.py:436
 msgid "    Audio buffer size [KB]"
-msgstr "Ð Ð°Ð·Ð¼ÐµÑ Ð±ÑÑÐµÑÐ° ÐÑÐ´Ð¸Ð¾ [KB]"
+msgstr "    Ð Ð°Ð·Ð¼ÐµÑ Ð°ÑÐ´Ð¸Ð¾Ð±ÑÑÐµÑÐ° [ÐÐ]"
 
 #: ../components/iptvconfigmenu.py:385
 msgid "    Background color"
-msgstr ""
+msgstr "    Ð¤Ð¾Ð½ Ð·Ð°Ð´Ð½ÐµÐ³Ð¾ Ð¿Ð»Ð°Ð½Ð°"
 
 #: ../components/iptvconfigmenu.py:387
-#, fuzzy
 msgid "    Default suggestions provider"
-msgstr "ÐÑÐ±Ð¾Ñ Ð¿ÑÐ¾Ð²Ð°Ð¹Ð´ÐµÑÐ° ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²:"
+msgstr "    ÐÐ¾ÑÑÐ°Ð²ÑÐ¸Ðº Ð¿ÑÐµÐ´Ð»Ð¾Ð¶ÐµÐ½Ð¸Ð¹ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ"
 
 #: ../components/iptvconfigmenu.py:408
 msgid "    Enable hosts groups"
-msgstr ""
+msgstr "    ÐÐºÐ»ÑÑÐ¸ÑÑ Ð³ÑÑÐ¿Ð¿Ñ ÑÐ¾ÑÑÐ¾Ð²"
 
 #: ../components/iptvconfigmenu.py:411
 msgid "    Number of columns"
-msgstr "ÐÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ ÐºÐ¾Ð»Ð¾Ð½Ð¾Ðº"
+msgstr "    ÐÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ ÐºÐ¾Ð»Ð¾Ð½Ð¾Ðº"
 
 #: ../components/iptvconfigmenu.py:410
 msgid "    Number of rows"
-msgstr "ÐÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ ÑÑÑÐ¾Ðº"
+msgstr "    ÐÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ ÑÑÑÐ¾Ðº"
 
 #: ../components/iptvconfigmenu.py:404
 msgid "    Remove thumbnails"
-msgstr "Ð£Ð´Ð°Ð»Ð¸ÑÑ ÑÑÐºÐ¸Ð·Ñ"
+msgstr "    Ð£Ð´Ð°Ð»Ð¸ÑÑ ÑÑÐºÐ¸Ð·Ñ"
 
 #: ../components/iptvconfigmenu.py:409
 msgid "    Service icon size"
-msgstr "Ð Ð°Ð·Ð¼ÐµÑ Ð¸ÐºÐ¾Ð½ÐºÐ¸ ÑÐµÑÐ²Ð¸ÑÐ°"
+msgstr "    Ð Ð°Ð·Ð¼ÐµÑ Ð¸ÐºÐ¾Ð½ÐºÐ¸ ÑÐµÑÐ²Ð¸ÑÐ°"
 
 #: ../components/iptvconfigmenu.py:386
 msgid "    Show suggestions"
-msgstr ""
+msgstr "    ÐÐ¾ÐºÐ°Ð·Ð°ÑÑ Ð¿ÑÐµÐ´Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ"
 
 #: ../components/iptvconfigmenu.py:435
 msgid "    Video buffer size [MB]"
-msgstr "Ð Ð°Ð·Ð¼ÐµÑ Ð±ÑÑÐµÑÐ° ÐÐ¸Ð´ÐµÐ¾ [MB]"
+msgstr "    Ð Ð°Ð·Ð¼ÐµÑ Ð²Ð¸Ð´ÐµÐ¾Ð±ÑÑÐµÑÐ° [ÐÐ]"
 
 #: ../hosts/hostsportdeutschland.py:146
 #, python-format
 msgid " (planned %s)"
-msgstr ""
+msgstr " (Ð¿Ð»Ð°Ð½Ð¸ÑÐ¾Ð²Ð°Ð»Ð¾ÑÑ %s)"
 
 #: ../setup/iptvsetupimpl.py:780 ../setup/iptvsetupimpl.py:843
 #: ../setup/iptvsetupimpl.py:909 ../setup/iptvsetupimpl.py:970
@@ -188,7 +194,7 @@
 "Do you want to install it? "
 msgstr ""
 " Ð­ÑÐ¾ Ð½Ðµ Ð±ÑÐ»Ð¾ Ð¾Ð±Ð½Ð°ÑÑÐ¶ÐµÐ½Ð¾. \n"
-"ÐÑ ÑÐ¾ÑÐ¸ÑÐµ, ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ ÐµÐ³Ð¾? "
+"ÐÑ ÑÐ¾ÑÐ¸ÑÐµ ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ ÐµÐ³Ð¾? "
 
 #: ../setup/iptvsetupimpl.py:781 ../setup/iptvsetupimpl.py:844
 #: ../setup/iptvsetupimpl.py:910 ../setup/iptvsetupimpl.py:971
@@ -199,121 +205,121 @@
 "Do you want to install new one? "
 msgstr ""
 " Ð½Ðµ ÑÐµÐºÐ¾Ð¼ÐµÐ½Ð´ÑÐµÑÑÑ. \n"
-"ÐÑ ÑÐ¾ÑÐ¸ÑÐµ, ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ Ð½Ð¾Ð²ÑÐ¹? "
+"ÐÑ ÑÐ¾ÑÐ¸ÑÐµ ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ Ð½Ð¾Ð²ÑÐ¹? "
 
 #: ../hosts/hoststreaminghdfun.py:284
 msgid " main link"
-msgstr ""
+msgstr " Ð³Ð»Ð°Ð²Ð½Ð°Ñ ÑÑÑÐ»ÐºÐ°"
 
 #: ../components/captcha_helper.py:66
 msgid " or "
-msgstr ""
+msgstr " Ð¸Ð»Ð¸ "
 
 #: ../components/e2ivk.py:659
 #, python-format
 msgid "\"%s\" Virtual Keyboard layout not available."
-msgstr ""
+msgstr "\"%s\" ÐÐ¸ÑÑÑÐ°Ð»ÑÐ½Ð°Ñ ÑÐ°ÑÐºÐ»Ð°Ð´ÐºÐ° ÐºÐ»Ð°Ð²Ð¸Ð°ÑÑÑÑ Ð½ÐµÐ´Ð¾ÑÑÑÐ¿Ð½Ð°."
 
 #: ../libs/wagasworld.py:117
 #, python-format
 msgid "\"%s\" login failed! Please check your login and password."
-msgstr ""
+msgstr "ÐÑÐ¾Ð´ Ð² \"%s\" Ð½Ðµ ÑÐ´Ð°Ð»ÑÑ! ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿ÑÐ¾Ð²ÐµÑÑÑÐµ ÐÐ°Ñ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ."
 
 #: ../hosts/hostwebstream.py:172
 msgid "\"Web\" streams player"
-msgstr "\"Ð¡ÐµÑÑ\" ÐÐ¾ÑÐ¾ÐºÐ¾Ð²ÑÐ¹ Ð¿Ð»ÐµÐµÑ"
+msgstr "ÐÐ¾ÑÐ¾ÐºÐ¾Ð²ÑÐ¹ \"Web\" Ð¿Ð»ÐµÐµÑ"
 
 #: ../hosts/hostplayrtsiw.py:492
 #, python-format
 msgid "%s "
-msgstr ""
+msgstr "%s "
 
 #: ../hosts/hostiptvplayerinfo.py:56
 #, python-format
 msgid "%s - service overview"
-msgstr ""
+msgstr "%s - Ð¾Ð±Ð·Ð¾Ñ ÑÐµÑÐ²Ð¸ÑÐ¾Ð²"
 
 #: ../hosts/hostiptvplayerinfo.py:59
-#, fuzzy, python-format
+#, python-format
 msgid "%s - subtitles provider"
-msgstr "ÐÑÐ±Ð¾Ñ Ð¿ÑÐ¾Ð²Ð°Ð¹Ð´ÐµÑÐ° ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²:"
+msgstr "%s - Ð¿ÑÐ¾Ð²Ð°Ð¹Ð´ÐµÑ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
 
 #: ../hosts/hostmythewatchseries.py:282 ../hosts/hosteskago.py:264
-#, fuzzy, python-format
+#, python-format
 msgid "%s - trailer"
-msgstr "Ð¢ÑÐµÐ¹Ð»ÐµÑ"
+msgstr "%s - ÑÑÐµÐ¹Ð»ÐµÑ"
 
 #: ../components/iptvconfigmenu.py:453 ../components/iptvconfigmenu.py:454
 #: ../hosts/hostmrpiracy.py:57 ../hosts/hostmrpiracy.py:59
 #: ../hosts/hostbsto.py:43 ../hosts/hostbsto.py:45
 #, python-format
 msgid "%s API KEY"
-msgstr ""
+msgstr "%s API ÐÐÐ®Ð§"
 
 #: ../components/iptvconfigmenu.py:448
 #, python-format
 msgid "%s device name"
-msgstr ""
+msgstr "%s Ð¸Ð¼Ñ ÑÑÑÑÐ¾Ð¹ÑÑÐ²Ð°"
 
 #: ../iptvdm/iptvdmui.py:60
-#, fuzzy, python-format
+#, python-format
 msgid "%s download manager"
-msgstr "ÐÐµÐ½ÐµÐ´Ð¶ÐµÑ Ð·Ð°Ð³ÑÑÐ·Ð¾Ðº"
+msgstr "ÐÐµÐ½ÐµÐ´Ð¶ÐµÑ Ð·Ð°Ð³ÑÑÐ·Ð¾Ðº %s"
 
 #: ../components/iptvconfigmenu.py:446
 #, python-format
 msgid "%s e-mail"
-msgstr ""
+msgstr "%s e-mail"
 
 #: ../hosts/hostplayrtsiw.py:340
-#, fuzzy, python-format
+#, python-format
 msgid "%s episodes"
-msgstr "ÐÐ¾Ð²ÑÐµ ÑÐµÑÐ¸Ð¸"
+msgstr "%s Ð½Ð¾Ð²ÑÐµ ÑÐ¿Ð¸Ð·Ð¾Ð´Ñ"
 
 #: ../Web/webParts.py:132
 #, python-format
 msgid "%s file is %d KB in size. Last %d lines are:"
-msgstr ""
+msgstr "Ð¤Ð°Ð¹Ð» %s Ð¸Ð¼ÐµÐµÑ ÑÐ°Ð·Ð¼ÐµÑ %d ÐÐ. ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ðµ %d ÑÑÑÐ¾Ðº:"
 
 #: ../Web/webParts.py:129
 #, python-format
 msgid "%s file is %d MB in size. Last %d lines are:"
-msgstr ""
+msgstr "Ð¤Ð°Ð¹Ð» %s Ð¸Ð¼ÐµÐµÑ ÑÐ°Ð·Ð¼ÐµÑ %d ÐÐ. ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ðµ %d ÑÑÑÐ¾Ðº:"
 
 #: ../hosts/hosttwitchtv.py:439 ../hosts/hosttwitchtv.py:460
 #, python-format
 msgid "%s followers"
-msgstr ""
+msgstr "%s Ð¿Ð¾Ð´Ð¿Ð¸ÑÑÐ¸ÐºÐ¾Ð²"
 
 #: ../subproviders/subprov_opensubtitlesorg2.py:77
 #, python-format
 msgid "%s has been protected with google recaptcha v2. You can try to use API version."
-msgstr ""
+msgstr "%s Ð±ÑÐ» Ð·Ð°ÑÐ¸ÑÐµÐ½ Ñ Ð¿Ð¾Ð¼Ð¾ÑÑÑ Google recaptcha v2. ÐÑ Ð¼Ð¾Ð¶ÐµÑÐµ Ð¿Ð¾Ð¿ÑÐ¾Ð±Ð¾Ð²Ð°ÑÑ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð²ÐµÑÑÐ¸Ñ API."
 
 #: ../libs/urlparser.py:9473
 #, python-format
 msgid "%s link extractor error."
-msgstr ""
+msgstr "ÐÑÐ¸Ð±ÐºÐ° ÑÐºÑÑÑÐ°ÐºÑÐ¾ÑÐ° ÑÑÑÐ»ÐºÐ¸ %s."
 
 #: ../components/iptvconfigmenu.py:378
-#, fuzzy, python-format
+#, python-format
 msgid "%s login"
-msgstr "ÐÐ¾Ð¹ÑÐ¸"
+msgstr "%s Ð»Ð¾Ð³Ð¸Ð½"
 
 #: ../hosts/hostdixmax.py:216
 #, python-format
 msgid "%s minutes"
-msgstr ""
+msgstr "%s Ð¼Ð¸Ð½ÑÑ"
 
 #: ../components/iptvconfigmenu.py:379 ../components/iptvconfigmenu.py:447
-#, fuzzy, python-format
+#, python-format
 msgid "%s password"
-msgstr "ÐÐ°ÑÐ¾Ð»Ñ"
+msgstr "%s Ð¿Ð°ÑÐ¾Ð»Ñ"
 
 #: ../iptvdm/iptvbuffui.py:587
 #, python-format
 msgid "%s returned %s: %s"
-msgstr ""
+msgstr "%s Ð²ÐµÑÐ½ÑÐ» %s: %s"
 
 #: ../hosts/hostserialeco.py:194 ../hosts/hostserialeco.py:230
 #, python-format
@@ -323,28 +329,28 @@
 #: ../libs/youtube_dl/extractor/vevo.py:99
 #, python-format
 msgid "%s said: This page is currently unavailable in your region"
-msgstr ""
+msgstr "%s ÑÐºÐ°Ð·Ð°Ð»: ÑÑÐ° ÑÑÑÐ°Ð½Ð¸ÑÐ° Ð² Ð½Ð°ÑÑÐ¾ÑÑÐµÐµ Ð²ÑÐµÐ¼Ñ Ð½ÐµÐ´Ð¾ÑÑÑÐ¿Ð½Ð° Ð² ÐÐ°ÑÐµÐ¼ ÑÐµÐ³Ð¸Ð¾Ð½Ðµ"
 
 #: ../components/confighost.py:84
-#, fuzzy, python-format
+#, python-format
 msgid "%s services configuration"
-msgstr "ÐÑÐ±Ð¾Ñ ÑÐµÑÐ²Ð¸ÑÐ¾Ð²-ÑÐ¾ÑÑÐ¾Ð² (ÐÐ°Ð¶Ð¼Ð¸ÑÐµ OK)"
+msgstr "ÐÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ñ ÑÐ»ÑÐ¶Ð± %s (ÐÐ°Ð¶Ð¼Ð¸ÑÐµ OK)"
 
 #: ../hosts/hostplayrtsiw.py:475
-#, fuzzy, python-format
+#, python-format
 msgid "%s shows"
-msgstr "Ð¢Ð ÑÐ¾Ñ"
+msgstr "%s Ð¢Ð ÑÐ¾Ñ"
 
 #: ../hosts/hostiptvplayerinfo.py:57 ../hosts/hostiptvplayerinfo.py:58
-#, fuzzy, python-format
+#, python-format
 msgid "%s subtitles download - how to"
-msgstr "ÐÐ°Ð³ÑÑÐ·Ð¸ÑÑ ÑÑÐ±ÑÐ¸ÑÑÑ"
+msgstr "ÐÐ°Ð³ÑÑÐ·ÐºÐ° %s ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð² - Ð¿Ð¾Ð¼Ð¾ÑÑ"
 
 #: ../libs/hcaptcha_2captcha.py:77 ../libs/recaptcha_v2_2captcha.py:77
 #: ../libs/recaptcha_v3_2captcha.py:77 ../libs/recaptcha_v2_9kw.py:77
 #, python-format
 msgid "%s timeout."
-msgstr ""
+msgstr "Ð¢Ð°Ð¹Ð¼-Ð°ÑÑ %s."
 
 #: ../components/ihost.py:706
 #, python-format
@@ -356,46 +362,46 @@
 #: ../hosts/hosttwitchtv.py:174 ../hosts/hosttwitchtv.py:222
 #: ../hosts/hosttwitchtv.py:272 ../hosts/hosttwitchtv.py:308
 #: ../hosts/hosttwitchtv.py:370 ../hosts/hosttwitchtv.py:499
-#, fuzzy, python-format
+#, python-format
 msgid "%s viewers"
-msgstr "ÐÐ¾Ð·ÑÐ°ÑÑ Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑÐ°:"
+msgstr "%s Ð·ÑÐ¸ÑÐµÐ»ÐµÐ¹"
 
 #: ../hosts/hostmediasetplay.py:199 ../hosts/hostmediasetplay.py:270
 #: ../hosts/hostcimaclubcom.py:261 ../hosts/hosttwitchtv.py:438
 #: ../hosts/hosttwitchtv.py:459
-#, fuzzy, python-format
+#, python-format
 msgid "%s views"
-msgstr "ÐÑÐ¾ÑÐ¼Ð¾ÑÑÑ"
+msgstr "%s Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑÐ¾Ð²"
 
 #: ../hosts/hostcimaclubcom.py:267
 #, python-format
 msgid "%s/10"
-msgstr ""
+msgstr "%s/10"
 
 #: ../components/iptvpictureplayer.py:265
 #: ../components/iptvpictureplayer.py:343
 msgid "++"
-msgstr ""
+msgstr "++"
 
 #: ../components/iptvpictureplayer.py:260
 msgid "--"
-msgstr ""
+msgstr "--"
 
 #: ../components/iptvconfigmenu.py:371
 msgid "----- BASIC CONFIGURATION (OK) -----"
-msgstr ""
+msgstr "----- ÐÐÐÐÐÐÐ¯ ÐÐÐÐ¤ÐÐÐ£Ð ÐÐ¦ÐÐ¯ (OK) -----"
 
 #: ../components/iptvconfigmenu.py:428
 msgid "----- BUFFERING CONFIGURATION (OK) -----"
-msgstr ""
+msgstr "----- ÐÐÐÐ¤ÐÐÐ£Ð ÐÐ¦ÐÐ¯ ÐÐ£Ð¤ÐÐ Ð (OK) -----"
 
 #: ../components/iptvconfigmenu.py:450
 msgid "----- CAPTCHA CONFIGURATION (OK) -----"
-msgstr ""
+msgstr "----- ÐÐÐÐ¤ÐÐÐ£Ð ÐÐ¦ÐÐ¯ ÐÐÐÐ§Ð (OK) -----"
 
 #: ../components/iptvconfigmenu.py:439
 msgid "----- DOWNLOADING CONFIGURATION (OK) -----"
-msgstr ""
+msgstr "----- ÐÐÐÐ¤ÐÐÐ£Ð ÐÐ¦ÐÐ¯ ÐÐÐÐ Ð£ÐÐÐ (OK) -----"
 
 #: ../components/iptvconfigmenu.py:349
 msgid "----- HIDDEN OPTIONS -----"
@@ -403,19 +409,19 @@
 
 #: ../components/iptvconfigmenu.py:535
 msgid "----- OTHER SETTINGS (OK) -----"
-msgstr ""
+msgstr "----- Ð¡ÐÐ Ð«Ð¢Ð«Ð ÐÐÐ¦ÐÐ -----"
 
 #: ../components/iptvconfigmenu.py:470
 msgid "----- PLAYERS CONFIGURATION (OK) -----"
-msgstr ""
+msgstr "----- ÐÐÐÐ¤ÐÐÐ£Ð ÐÐ¦ÐÐ¯ ÐÐÐÐÐ Ð (OK) -----"
 
 #: ../components/iptvconfigmenu.py:416
 msgid "----- PROXIES CONFIGURATION (OK) -----"
-msgstr ""
+msgstr "----- ÐÐÐÐ¤ÐÐÐ£Ð ÐÐ¦ÐÐ¯ ÐÐ ÐÐÐ¡Ð (OK) -----"
 
 #: ../components/iptvconfigmenu.py:456
 msgid "----- SUBTITLES CONFIGURATION (OK) -----"
-msgstr ""
+msgstr "----- ÐÐÐÐ¤ÐÐÐ£Ð ÐÐ¦ÐÐ¯ Ð¡Ð£ÐÐ¢ÐÐ¢Ð ÐÐ (OK) -----"
 
 #: ../components/configextmovieplayer.py:315
 msgid "----------------- External exteplayer3 options -----------------"
@@ -426,9 +432,8 @@
 msgstr "----------ÐÑÑÐ³Ð¾Ðµ----------"
 
 #: ../hosts/hostfilmpalast.py:57
-#, fuzzy
 msgid "--All Episodes--"
-msgstr "Ð­Ð¿Ð¸Ð·Ð¾Ð´Ñ"
+msgstr "--ÐÑÐµ ÑÐ¿Ð¸Ð·Ð¾Ð´Ñ--"
 
 #: ../libs/webcamera.py:226 ../libs/livetvhdnet.py:75
 #: ../hosts/hostplayrtsiw.py:246 ../hosts/hostplayrtsiw.py:260
@@ -458,54 +463,51 @@
 #: ../hosts/hostted.py:125 ../hosts/hostted.py:143 ../hosts/hostted.py:149
 #: ../hosts/hostted.py:154
 msgid "--Any--"
-msgstr ""
+msgstr "--ÐÑÐ±ÑÐµ--"
 
 #: ../hosts/hostyoutube.py:114
 msgid "--Other--"
-msgstr "--ÐÑÑÐ³Ð¾Ð¹-"
+msgstr "--ÐÑÑÐ³Ð¾Ðµ-"
 
 #: ../components/configextmovieplayer.py:78
 msgid "12 hour format "
-msgstr ""
+msgstr "12-ÑÐ¸ ÑÐ°ÑÐ¾Ð²Ð¾Ð¹ ÑÐ¾ÑÐ¼Ð°Ñ "
 
 #: ../components/iptvconfigmenu.py:242
-#, fuzzy
 msgid "16:10 Letterbox"
-msgstr "Ð ÐµÐ¶Ð¸Ð¼ ÑÑÐ¸ÐºÐ°"
+msgstr "16:10 Letterbox"
 
 #: ../components/iptvconfigmenu.py:242
 msgid "16:10 PanScan"
-msgstr ""
+msgstr "16:10 PanScan"
 
 #: ../components/iptvconfigmenu.py:242
 msgid "16:9"
-msgstr ""
+msgstr "16:9"
 
 #: ../components/iptvconfigmenu.py:242
-#, fuzzy
 msgid "16:9 Letterbox"
-msgstr "Ð ÐµÐ¶Ð¸Ð¼ ÑÑÐ¸ÐºÐ°"
+msgstr "16:9 Letterbox"
 
 #: ../components/iptvconfigmenu.py:242
 msgid "16:9 always"
-msgstr ""
+msgstr "16:9 Ð²ÑÐµÐ³Ð´Ð°"
 
 #: ../components/configextmovieplayer.py:78
 msgid "24 hour format "
-msgstr ""
+msgstr "24-Ñ ÑÐ°ÑÐ¾Ð²Ð¾Ð¹ ÑÐ¾ÑÐ¼Ð°Ñ "
 
 #: ../components/iptvconfigmenu.py:242
-#, fuzzy
 msgid "4:3 Letterbox"
-msgstr "Ð ÐµÐ¶Ð¸Ð¼ ÑÑÐ¸ÐºÐ°"
+msgstr "4:3 Letterbox"
 
 #: ../components/iptvconfigmenu.py:242
 msgid "4:3 PanScan"
-msgstr ""
+msgstr "4:3 PanScan"
 
 #: ../Web/webParts.py:103
 msgid "<font color=\"#FE642E\">REMEMBER:</font></b> E2iPlayer <b>IS ONLY</b> specialized Web browser. It does <b>NOT</b> host any materials!!!</font>"
-msgstr ""
+msgstr "<font color=\"#FE642E\">ÐÐÐÐÐÐ¢Ð:</font></b> E2iPlayer <b>Ð¢ÐÐÐ¬ÐÐ</b> ÑÐ¿ÐµÑÐ¸Ð°Ð»Ð¸Ð·Ð¸ÑÐ¾Ð²Ð°Ð½Ð½ÑÐ¹ Ð²ÐµÐ±-Ð±ÑÐ°ÑÐ·ÐµÑ. ÐÐ½ <b>ÐÐ</b> ÑÐ°Ð·Ð¼ÐµÑÐ°ÐµÑ ÐºÐ°ÐºÐ¸Ðµ-Ð»Ð¸Ð±Ð¾ Ð¼Ð°ÑÐµÑÐ¸Ð°Ð»Ñ!</font>"
 
 #: ../iptvupdate/updatemainwindow.py:71
 msgid "> Press OK to start <"
@@ -513,49 +515,45 @@
 
 #: ../hosts/hostbbcsport.py:514
 msgid "A TV License is required to watch BBC iPlayer streams, see the BBC website for more information: https://www.bbc.co.uk/iplayer/help/tvlicence"
-msgstr ""
+msgstr "ÐÐ»Ñ Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑÐ° Ð¿Ð¾ÑÐ¾ÐºÐ¾Ð² BBC iPlayer ÑÑÐµÐ±ÑÐµÑÑÑ ÑÐµÐ»ÐµÐ²Ð¸Ð·Ð¸Ð¾Ð½Ð½Ð°Ñ Ð»Ð¸ÑÐµÐ½Ð·Ð¸Ñ. ÐÐ»Ñ Ð´Ð¾Ð¿. Ð¸Ð½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ð¸: https://www.bbc.co.uk/iplayer/help/tvlicence"
 
 #: ../hosts/host3player.py:59 ../hosts/hostgledalica.py:263
 #: ../hosts/hostbbciplayer.py:60 ../hosts/hostbbciplayer.py:196
 #: ../hosts/hosttvnowde.py:62 ../hosts/hostserienstreamto.py:79
-#, fuzzy
 msgid "A-Z"
-msgstr "ÐÑÐµ A-Z"
+msgstr "A-Z"
 
 #: ../hosts/host9anime.py:50
-#, fuzzy
 msgid "A-Z List"
-msgstr "ÐÐ½Ð¸Ð¼Ðµ Ð¡Ð¿Ð¸ÑÐ¾Ðº"
+msgstr "Ð¡Ð¿Ð¸ÑÐ¾Ðº A-Z"
 
 #: ../components/configextmovieplayer.py:331
-#, fuzzy
 msgid "AAC downmix mode"
-msgstr "    ÐÑÐ±Ð¾Ñ ÑÐµÐ¶Ð¸Ð¼Ð° AAC"
+msgstr "    ÐÑÐ±Ð¾Ñ ÑÐµÐ¶Ð¸Ð¼Ð° Ð¼Ð¸ÐºÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ AAC"
 
 #: ../Web/webParts.py:332 ../iptvdm/iptvlist.py:127
 msgid "ABORTED"
 msgstr "ÐÐ ÐÐ ÐÐÐÐ"
 
 #: ../components/configextmovieplayer.py:329
-#, fuzzy
 msgid "AC3 downmix mode"
-msgstr "    ÐÑÐ±Ð¾Ñ ÑÐµÐ¶Ð¸Ð¼Ð° AC3"
+msgstr "    ÐÑÐ±Ð¾Ñ ÑÐµÐ¶Ð¸Ð¼Ð° Ð¼Ð¸ÐºÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ AC3"
 
 #: ../hosts/hostmusicmp3ru.py:357
 msgid "ALBUMS"
-msgstr ""
+msgstr "ÐÐÐ¬ÐÐÐÐ«"
 
 #: ../hosts/hostmediasetplay.py:97
 msgid "API initialization failed!"
-msgstr ""
+msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¸Ð½Ð¸ÑÐ¸Ð°Ð»Ð¸Ð·Ð¸ÑÐ¾Ð²Ð°ÑÑ API!"
 
 #: ../hosts/hostmusicmp3ru.py:358 ../hosts/hostdancetrippin.py:37
 msgid "ARTISTS"
-msgstr ""
+msgstr "ÐÐ Ð¢ÐÐ¡Ð¢Ð«"
 
 #: ../hosts/hostplayrtsiw.py:203
 msgid "AZ"
-msgstr ""
+msgstr "AZ"
 
 #: ../iptvupdate/updatemainwindow.py:172 ../iptvupdate/updatemainwindow.py:349
 msgid "Aborted"
@@ -563,33 +561,32 @@
 
 #: ../components/VirtualKeyBoard.py:105
 msgid "Accept"
-msgstr ""
+msgstr "ÐÐ´Ð¾Ð±ÑÐµÐ½Ð¾"
 
 #: ../components/recaptcha_mye2i_widget.py:134
 #: ../components/recaptcha_v2myjd_widget.py:134
 msgid "Access denied. Please check password."
-msgstr ""
+msgstr "ÐÐ¾ÑÑÑÐ¿ Ð·Ð°ÐºÑÑÑ. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿ÑÐ¾Ð²ÐµÑÑÑÐµ Ð¿Ð°ÑÐ¾Ð»Ñ."
 
 #: ../Web/webParts.py:67
 msgid "Active host"
-msgstr ""
+msgstr "ÐÐºÑÐ¸Ð²Ð½ÑÐ¹ ÑÐ¾ÑÑ"
 
 #: ../hosts/hostddl.py:590
 msgid "Actor:"
-msgstr ""
+msgstr "ÐÐºÑÐµÑ:"
 
 #: ../hosts/hostappletrailers.py:104 ../hosts/hostddl.py:592
 msgid "Actors:"
-msgstr ""
+msgstr "ÐÐºÑÐµÑÑ:"
 
-#: ../components/playerselector.py:473
-#, fuzzy, python-format
+#, python-format
 msgid "Add host %s to group"
-msgstr "ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ Ð² Ð³ÑÑÐ¿Ð¿Ñ"
+msgstr "ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ ÑÐ¾ÑÑ %s  Ð² Ð³ÑÑÐ¿Ð¿Ñ"
 
 #: ../components/iptvplayerwidget.py:625
 msgid "Add item to favourites"
-msgstr "ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ Ðº Ð¸Ð·Ð±ÑÐ°Ð½Ð½Ð¾Ð¼Ñ"
+msgstr "ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ Ð¿ÑÐ½ÐºÑ Ð² Ð¸Ð·Ð±ÑÐ°Ð½Ð½ÑÐµ"
 
 #: ../components/iptvfavouriteswidgets.py:328
 msgid "Add item to group"
@@ -607,25 +604,24 @@
 
 #: ../iptvupdate/updatemainwindow.py:392
 msgid "Add repository last version."
-msgstr ""
+msgstr "ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ ÑÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÐ¸Ð¹ Ð¿Ð¾ÑÐ»ÐµÐ´Ð½ÐµÐ¹ Ð²ÐµÑÑÐ¸Ð¸."
 
 #: ../Web/webParts.py:438
-#, fuzzy
 msgid "Add to downloader"
-msgstr "hlsdl Ð·Ð°Ð³ÑÑÐ·ÑÐ¸Ðº"
+msgstr "ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ Ð² Ð·Ð°Ð³ÑÑÐ·ÑÐ¸Ðº"
 
 #: ../components/iptvconfigmenu.py:376
 msgid "Add update from GitLab repository"
-msgstr ""
+msgstr "ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ Ð°Ð¿Ð´ÐµÐ¹Ñ Ð¸Ð· GitLab ÑÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÐ¸Ñ"
 
 #: ../hosts/hostfreediscpl.py:261
-#, fuzzy, python-format
+#, python-format
 msgid "Added by: %s, directory: %s"
-msgstr "Ð¡Ð¾Ð·Ð´Ð°ÑÑ ÐºÐ°ÑÐ°Ð»Ð¾Ð³ [%s]"
+msgstr "ÐÐ¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¾: %s, ÐºÐ°ÑÐ°Ð»Ð¾Ð³: %s"
 
 #: ../hosts/hostyoutube.py:39
 msgid "Age-gate bypass:"
-msgstr ""
+msgstr "ÐÐ±ÑÐ¾Ð´ Ð²Ð¾Ð·ÑÐ°ÑÑÐ½ÑÑ Ð¾Ð³ÑÐ°Ð½Ð¸ÑÐµÐ½Ð¸Ð¹:"
 
 #: ../libs/skylinewebcamscom.py:136 ../components/iptvplayerwidget.py:1201
 #: ../hosts/hostplayrtsiw.py:380 ../hosts/hostsolarmovie.py:164
@@ -655,54 +651,48 @@
 msgstr "ÐÑÐµ ÐÐ¸Ð³Ð¸"
 
 #: ../hosts/hosttwitchtv.py:56
-#, fuzzy
 msgid "All Platforms"
-msgstr "ÐÐ»Ð°ÑÑÐ¾ÑÐ¼Ð°"
+msgstr "ÐÑÐµ Ð¿Ð»Ð°ÑÑÐ¾ÑÐ¼Ñ"
 
 #: ../hosts/hosteurosportplayer.py:111
-#, fuzzy
 msgid "All Sports"
-msgstr "Ð¡Ð¿Ð¾ÑÑ"
+msgstr "ÐÑÐµ ÑÐ¿Ð¾ÑÑÐ¸Ð²Ð½ÑÐµ"
 
 #: ../hosts/hosturllist.py:52
 msgid "All in one"
-msgstr "ÐÑÐµ ÑÐ°Ð¹Ð»Ñ, Ð±ÐµÐ· ÑÐ°Ð·Ð´ÐµÐ»ÐµÐ½Ð¸Ñ Ð½Ð° ÐºÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð¸"
+msgstr "ÐÑÑ Ð² Ð¾Ð´Ð½Ð¾Ð¼"
 
 #: ../Web/webParts.py:501
-#, fuzzy
 msgid "All materials"
-msgstr "ÐÑÐµ ÑÐ¸Ð»ÑÐ¼Ñ"
+msgstr "ÐÑÐµ Ð¼Ð°ÑÐµÑÐ¸Ð°Ð»Ñ"
 
 #: ../hosts/hosttwitchtv.py:122
-#, fuzzy
 msgid "All time"
-msgstr "ÐÑÐµ ÑÐ°Ð¹Ð»Ñ, Ð±ÐµÐ· ÑÐ°Ð·Ð´ÐµÐ»ÐµÐ½Ð¸Ñ Ð½Ð° ÐºÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð¸"
+msgstr "ÐÐ° Ð²ÑÑ Ð²ÑÐµÐ¼Ñ"
 
 #: ../hosts/hostyoutube.py:45
 msgid "Allow VP9 codec:"
-msgstr ""
+msgstr "Ð Ð°Ð·ÑÐµÑÐ¸ÑÑ VP9 ÐºÐ¾Ð´ÐµÐº"
 
 #: ../hosts/hostyoutube.py:43
 msgid "Allow dash format:"
-msgstr "Ð Ð°Ð·ÑÐµÑÐ¸ÑÑ ÑÐ¾ÑÐ¼Ð°Ñ ÑÐ°Ð·Ð½ÑÑ ÑÐ¸Ð¿Ð¾Ð²:"
+msgstr "Ð Ð°Ð·ÑÐµÑÐ¸ÑÑ dash-ÑÐ¾ÑÐ¼Ð°Ñ:"
 
 #: ../components/iptvconfigmenu.py:546
 msgid "Allow downgrade"
-msgstr "Ð Ð°Ð·ÑÐµÑÐ¸ÑÑ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¸Ðµ Ð±Ð¾Ð»ÐµÐµ ÑÐ°Ð½Ð½Ð¸Ñ Ð²ÐµÑÑÐ¸Ð¹"
+msgstr "Ð Ð°Ð·ÑÐµÑÐ¸ÑÑ Ð±Ð¾Ð»ÐµÐµ ÑÐ°Ð½Ð½Ð¸Ðµ Ð²ÐµÑÑÐ¸Ð¸"
 
 #: ../hosts/hostvevo.py:32
 msgid "Allow hls format"
 msgstr "Ð Ð°Ð·ÑÐµÑÐ¸ÑÑ ÑÐ¾ÑÐ¼Ð°Ñ hls"
 
 #: ../hosts/hostfavourites.py:34
-#, fuzzy
 msgid "Allow watched flag to be set"
-msgstr "Ð Ð°Ð·ÑÐµÑÐ¸ÑÑ Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑ ÑÑÑÐ°Ð½Ð¾Ð²Ð»ÐµÐ½Ð½Ð¾Ð³Ð¾ ÑÐ»Ð°Ð³Ð° (ÑÐºÑÐ¿ÐµÑÐ¸Ð¼ÐµÐ½ÑÐ°Ð»ÑÐ½ÑÐ¹)"
+msgstr "Ð Ð°Ð·ÑÐµÑÐ¸ÑÑ Ð²Ð¸Ð´Ð¸Ð¼Ð¾ÑÑÑ ÑÑÑÐ°Ð½Ð¾Ð²Ð»ÐµÐ½Ð½Ð¾Ð³Ð¾ ÑÐ»Ð°Ð³Ð°"
 
 #: ../hosts/hostdancetrippin.py:44
-#, fuzzy
 msgid "Alphabetical "
-msgstr "Ð Ð°Ð»ÑÐ°Ð²Ð¸ÑÐ½Ð¾Ð¼ Ð¿Ð¾ÑÑÐ´ÐºÐµ"
+msgstr "ÐÐ»ÑÐ°Ð²Ð¸ÑÐ½ÑÐ¹ Ð¿Ð¾ÑÑÐ´Ð¾Ðº "
 
 #: ../hosts/hostkisscartoonme.py:218 ../hosts/hostlocalmedia.py:41
 #: ../hosts/hostfilmpalast.py:54 ../hosts/hostfilmpalast.py:58
@@ -710,9 +700,8 @@
 msgstr "Ð Ð°Ð»ÑÐ°Ð²Ð¸ÑÐ½Ð¾Ð¼ Ð¿Ð¾ÑÑÐ´ÐºÐµ"
 
 #: ../hosts/hosthoofootcom.py:247
-#, fuzzy
 msgid "Alternative"
-msgstr "ÐÐ»ÑÑÐµÑÐ½Ð°ÑÐ¸Ð²Ð½ÑÐ¹ Ð´Ð¾Ð¼ÐµÐ½:"
+msgstr "ÐÐ»ÑÑÐµÑÐ½Ð°ÑÐ¸Ð²Ð°"
 
 #: ../hosts/hostustvgo.py:42 ../hosts/hosticefilmsinfo.py:37
 #: ../hosts/hostsolarmovie.py:38 ../hosts/hostseriesonline.py:36
@@ -740,7 +729,7 @@
 #: ../hosts/hostkkiste.py:26 ../hosts/hostddl.py:29
 #: ../hosts/hostfilmstreamvkcom.py:27 ../hosts/hostkinox.py:28
 msgid "Alternative proxy server (1)"
-msgstr "ÐÐ»ÑÑÐµÑÐ½Ð°ÑÐ¸Ð²Ð½ÑÐ¹ Ð¿ÑÐ¾ÐºÑÐ¸ - ÑÐµÑÐ²ÐµÑ (1)"
+msgstr "ÐÐ»ÑÑÐµÑÐ½Ð°ÑÐ¸Ð²Ð½ÑÐ¹ Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐµÑÐ²ÐµÑ (1)"
 
 #: ../components/iptvconfigmenu.py:419 ../hosts/hosticefilmsinfo.py:29
 #: ../hosts/hostsolarmovie.py:31 ../hosts/hostseriesonline.py:28
@@ -751,12 +740,11 @@
 #: ../hosts/hostkkiste.py:27 ../hosts/hostddl.py:30
 #: ../hosts/hostfilmstreamvkcom.py:28 ../hosts/hostkinox.py:29
 msgid "Alternative proxy server (2)"
-msgstr "ÐÐ»ÑÑÐµÑÐ½Ð°ÑÐ¸Ð²Ð½ÑÐ¹ Ð¿ÑÐ¾ÐºÑÐ¸ - ÑÐµÑÐ²ÐµÑ (2)"
+msgstr "ÐÐ»ÑÑÐµÑÐ½Ð°ÑÐ¸Ð²Ð½ÑÐ¹ Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐµÑÐ²ÐµÑ (2)"
 
 #: ../hosts/hostthewatchseriesto.py:25
-#, fuzzy
 msgid "Always"
-msgstr "Ð¢Ð¾Ð¿ 100 ÐÑÐµÐ³Ð´Ð°"
+msgstr "ÐÑÐµÐ³Ð´Ð°"
 
 #: ../libs/ustvnow.py:120
 #, python-format
@@ -765,7 +753,7 @@
 "Please check your login credentials and try again later...\""
 msgstr ""
 "ÐÑÐ¾Ð¸Ð·Ð¾ÑÐ»Ð° Ð¾ÑÐ¸Ð±ÐºÐ° Ð¿ÑÐ¸ Ð¿Ð¾Ð¿ÑÑÐºÐµ Ð²Ð¾Ð¹ÑÐ¸ Ðº Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ \"%s.\n"
-"ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿ÑÐ¾Ð²ÐµÑÑÑÐµ Ð²Ð°ÑÐ¸ ÑÑÐµÑÐ½ÑÐµ Ð´Ð°Ð½Ð½ÑÐµ Ð¸ Ð¿Ð¾Ð¿ÑÐ¾Ð±ÑÐ¹ÑÐµ ÐµÑÐµ ÑÐ°Ð· Ð¿Ð¾Ð·Ð¶Ðµ...\""
+"ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿ÑÐ¾Ð²ÐµÑÑÑÐµ ÐÐ°ÑÐ¸ ÑÑÐµÑÐ½ÑÐµ Ð´Ð°Ð½Ð½ÑÐµ Ð¸ Ð¿Ð¾Ð¿ÑÐ¾Ð±ÑÐ¹ÑÐµ ÐµÑÐµ ÑÐ°Ð· Ð¿Ð¾Ð·Ð¶Ðµ...\""
 
 #: ../components/iptvextmovieplayer.py:997
 #, python-format
@@ -782,9 +770,8 @@
 msgstr "ÐÐ½Ð¸Ð¼Ðµ"
 
 #: ../hosts/hostwatchcartoononline.py:363
-#, fuzzy
 msgid "Anime Search"
-msgstr "ÐÐ¾Ð¸ÑÐº"
+msgstr "ÐÐ¾Ð¸ÑÐº Ð°Ð½Ð¸Ð¼Ðµ"
 
 #: ../hosts/hostshahiidanimenet.py:45 ../hosts/hostanimeodcinki.py:45
 msgid "Anime list"
@@ -816,9 +803,8 @@
 msgstr "ÐÑÑÐ¸Ð²"
 
 #: ../hosts/hostwatchwrestling.py:59
-#, fuzzy
 msgid "Archives"
-msgstr "ÐÑÑÐ¸Ð²"
+msgstr "ÐÑÑÐ¸Ð²Ñ"
 
 #: ../hosts/hostlocalmedia.py:640
 #, python-format
@@ -826,26 +812,24 @@
 msgstr "ÐÑ ÑÐ²ÐµÑÐµÐ½Ñ, ÑÑÐ¾ ÑÐ¾ÑÐ¸ÑÐµ ÑÐ´Ð°Ð»Ð¸ÑÑ ÑÐ°Ð¹Ð» \"%s\"?"
 
 #: ../hosts/hostvevo.py:415
-#, fuzzy
 msgid "Artists"
-msgstr "ÐÐ¾Ð¿ÑÐ»ÑÑÐ½ÑÐµ Ð¸ÑÐ¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»Ð¸"
+msgstr "ÐÑÑÐ¸ÑÑÑ"
 
 #: ../hosts/hostekstraklasatv.py:33
 msgid "Ask"
-msgstr ""
+msgstr "ÐÐ°Ð¿ÑÐ¾Ñ"
 
 #: ../components/iptvextmovieplayer.py:683
 msgid "Aspect"
-msgstr "ÐÑÐ¿ÐµÐºÑ"
+msgstr "Ð Ð°Ð·ÑÐµÑÐµÐ½Ð¸Ðµ"
 
 #: ../hosts/hostdancetrippin.py:244 ../hosts/hostrtbfbe.py:749
 msgid "Audio"
 msgstr "ÐÑÐ´Ð¸Ð¾"
 
 #: ../components/iptvextmovieplayer.py:538
-#, fuzzy
 msgid "Audio tracks"
-msgstr "ÐÑÐ±Ð¾Ñ Ð°ÑÐ´Ð¸Ð¾ Ð´Ð¾ÑÐ¾Ð¶ÐºÐ¸"
+msgstr "ÐÑÐ´Ð¸Ð¾Ð´Ð¾ÑÐ¾Ð¶ÐºÐ¸"
 
 #: ../libs/youtubeparser.py:36 ../components/iptvconfigmenu.py:102
 #: ../components/iptvconfigmenu.py:105 ../components/iptvconfigmenu.py:217
@@ -855,7 +839,7 @@
 
 #: ../components/iptvconfigmenu.py:373
 msgid "Auto check for plugin update"
-msgstr "ÐÐ²ÑÐ¾Ð¼Ð°ÑÐ¸ÑÐµÑÐºÐ°Ñ Ð¿ÑÐ¾Ð²ÐµÑÐºÐ° Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ð¹ Ð¿Ð»Ð°Ð³Ð¸Ð½Ð°"
+msgstr "ÐÐ²ÑÐ¾Ð¿ÑÐ¾Ð²ÐµÑÐºÐ° Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ð¹ Ð¿Ð»Ð°Ð³Ð¸Ð½Ð°"
 
 #: ../components/iptvplayerwidget.py:753
 msgid "Auto selection based on the settings"
@@ -863,88 +847,81 @@
 
 #: ../subproviders/subprov_youtubecom.py:65
 msgid "Auto-translate"
-msgstr ""
+msgstr "ÐÐ²ÑÐ¾Ð¿ÐµÑÐµÐ²Ð¾Ð´"
 
 #: ../components/configextmovieplayer.py:342
 msgid "Automatically turn on external subtitles"
-msgstr ""
+msgstr "ÐÐ²ÑÐ¾Ð¼Ð°ÑÐ¸ÑÐµÑÐºÐ¸ Ð²ÐºÐ»ÑÑÐ°ÑÑ Ð²Ð½ÐµÑÐ½Ð¸Ðµ ÑÑÐ±ÑÐ¸ÑÑÑ"
 
 #: ../components/iptvconfigmenu.py:537
 msgid "Autoplay start delay"
-msgstr "ÐÐ²ÑÐ¾Ð·Ð°Ð¿ÑÑÐº Ð·Ð°Ð´ÐµÑÐ¶ÐºÐ¸ Ð¿ÑÑÐºÐ°"
+msgstr "ÐÐ°Ð´ÐµÑÐ¶ÐºÐ° Ð°Ð²ÑÐ¾Ð·Ð°Ð¿ÑÑÐºÐ°"
 
 #: ../hosts/host3player.py:58
 msgid "BY DAY"
-msgstr ""
+msgstr "ÐÐÐÐ"
 
 #: ../hosts/hostpinkbike.py:45
 msgid "Best Pinkbike Videos"
-msgstr ""
+msgstr "ÐÑÑÑÐ¸Ðµ Ð²Ð¸Ð´ÐµÐ¾ Pinkbike"
 
 #: ../hosts/hostshoutcast.py:134
-#, fuzzy, python-format
+#, python-format
 msgid "Bitrate: %s"
-msgstr "ÐÐ¸ÑÑÐµÐ¹Ñ: Ð½Ð°Ð¸ÑÑÐ´ÑÐ¸Ð¹"
+msgstr "ÐÐ¸ÑÑÐµÐ¹Ñ: %s"
 
 #: ../components/iptvconfigmenu.py:106 ../components/configextmovieplayer.py:63
 msgid "Black"
-msgstr "Ð§ÐµÑÐ½ÑÐ¹"
+msgstr "Ð§ÑÑÐ½ÑÐ¹"
 
 #: ../components/configextmovieplayer.py:378
-#, fuzzy
 msgid "Black iframe file"
-msgstr "Ð Ð°ÑÐ¿Ð¾Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ Ð¾ÑÐ¸ÑÑÐ¸ÑÑ Ð·Ð°ÑÑÐ°Ð²ÐºÐ¸"
+msgstr "Ð§ÑÑÐ½ÑÐ¹ ÑÐ°Ð¹Ð» iframe"
 
 #: ../components/iptvconfigmenu.py:539
 msgid "Block wmv files"
 msgstr "ÐÐ»Ð¾ÐºÐ¸ÑÐ¾Ð²Ð°ÑÑ WMV ÑÐ°Ð¹Ð»Ñ"
 
 #: ../hosts/hostmediasetplay.py:616
-#, fuzzy
 msgid "Brand"
-msgstr "Ð¡Ð»ÑÑÐ°Ð¹Ð½ÑÐ¹"
+msgstr "ÐÑÑÐ½Ð´"
 
 #: ../hosts/hosttwitchtv.py:500
-#, fuzzy, python-format
+#, python-format
 msgid "Broadcaster: %s"
-msgstr "Ð¢ÑÐ°Ð½ÑÐ»ÑÑÐ¸Ð¸"
+msgstr "ÐÐµÑÐ°ÑÐµÐ»Ñ: %s"
 
 #: ../hosts/hostdixmax.py:125 ../hosts/hosttwitchtv.py:141
 msgid "Browse"
-msgstr "Ð¡Ð¼Ð¾ÑÑÐµÑÑ"
+msgstr "ÐÐ±Ð·Ð¾Ñ"
 
 #: ../hosts/hostvumedicom.py:83
-#, fuzzy
 msgid "Browse videos"
-msgstr "ÐÐ·Ð±ÑÐ°Ð½Ð½ÑÐµ Ð²Ð¸Ð´ÐµÐ¾"
+msgstr "ÐÐ±Ð·Ð¾Ñ Ð²Ð¸Ð´ÐµÐ¾"
 
 #: ../hosts/hostyoutube.py:64
 msgid "Browse youtube trending feeds"
-msgstr ""
+msgstr "ÐÑÐ¾ÑÐ¼Ð¾ÑÑ Ð¿Ð¾Ð¿ÑÐ»ÑÑÐ½ÑÑ ÐºÐ°Ð½Ð°Ð»Ð¾Ð² YouTube"
 
 #: ../components/iptvconfigmenu.py:437
-#, fuzzy
 msgid "Buffering location"
-msgstr "ÐÐ°ÑÐ°Ð»Ð¾Ð³ Ð±ÑÑÐµÑÐ° Ð¾Ð±Ð¼ÐµÐ½Ð°"
+msgstr "Ð Ð°ÑÐ¿Ð¾Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ Ð±ÑÑÐµÑÐ°"
 
 #: ../subproviders/subprov_subscenecom.py:121
-#, fuzzy
 msgid "By media title"
-msgstr "ÐÐ¾ Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ñ"
+msgstr "ÐÐ¾ Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ñ Ð¼ÐµÐ´Ð¸Ð°"
 
 #: ../subproviders/subprov_subscenecom.py:122
-#, fuzzy
 msgid "By release name"
-msgstr "ÐÐ°ÑÐ° Ð²ÑÐ¿ÑÑÐºÐ°"
+msgstr "ÐÐ¾ Ð¸Ð¼ÐµÐ½Ð¸ ÑÐµÐ»Ð¸Ð·Ð°"
 
 #: ../hosts/hostcimaclubcom.py:143
 msgid "By year"
 msgstr "ÐÐ¾ Ð³Ð¾Ð´Ð°Ð¼"
 
 #: ../hosts/hostitvcom.py:33
-#, fuzzy
 msgid "Bypass geo-blocking for VODs (it may be illegal):"
-msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¸Ðµ Ð²ÐµÐ±-Ð¿ÑÐ¾ÐºÑÐ¸ (ÑÑÐ¾ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð½ÐµÐ·Ð°ÐºÐ¾Ð½Ð½Ð¾):"
+msgstr "ÐÐ±ÑÐ¾Ð´ Ð³ÐµÐ¾Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²ÐºÐ¸ VOD (Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð½ÐµÐ·Ð°ÐºÐ¾Ð½Ð½Ð¾):"
 
 #: ../setup/iptvsetupimpl.py:775
 msgid "C subtitle parser"
@@ -952,21 +929,20 @@
 
 #: ../hosts/hostdancetrippin.py:36
 msgid "CHANNELS "
-msgstr ""
+msgstr "ÐÐÐÐÐÐ« "
 
 #: ../hosts/hostmythewatchseries.py:67
 msgid "CINEMA MOVIES"
-msgstr ""
+msgstr "ÐÐÐÐÐ¤ÐÐÐ¬ÐÐ«"
 
 #: ../hosts/hostwatchwrestlinguno.py:52 ../hosts/hostwatchwrestlinguno.py:308
 #: ../hosts/hostwatchwrestling.py:68 ../hosts/hostwatchwrestling.py:317
 msgid "COMMENTS"
-msgstr ""
+msgstr "ÐÐÐÐÐÐÐ¢ÐÐ ÐÐ"
 
 #: ../hosts/hostredbull.py:54
-#, fuzzy
 msgid "Calendar"
-msgstr "Ð¡ÑÐ°Ð½Ð´Ð°ÑÑ"
+msgstr "ÐÐ°Ð»ÐµÐ½Ð´Ð°ÑÑ"
 
 #: ../hosts/hostlocalmedia.py:260
 #, python-format
@@ -987,12 +963,12 @@
 #: ../components/iptvdirbrowser.py:324 ../components/iptvsubdownloader.py:106
 #: ../components/VirtualKeyBoard.py:107
 msgid "Cancel"
-msgstr "ÐÑÐ¼ÐµÐ½Ð¸ÑÑ"
+msgstr "ÐÑÐ¼ÐµÐ½Ð°"
 
 #: ../hosts/hostfreediscpl.py:108 ../hosts/hostefilmytv.py:603
 #: ../hosts/hostserienstreamto.py:559
 msgid "Captcha"
-msgstr ""
+msgstr "ÐÐ°ÑÐ¸ÑÐ½ÑÐ¹ ÐºÐ¾Ð´"
 
 #: ../components/recaptcha_mye2i_widget.py:127
 #: ../components/recaptcha_v2myjd_widget.py:127
@@ -1000,19 +976,20 @@
 "Captcha solved.\n"
 "Waiting for notification."
 msgstr ""
+"ÐÐ°Ð¿ÑÐ° ÑÐµÑÐµÐ½Ð°.\n"
+"ÐÐ´ÑÐ¼ ÑÐ²ÐµÐ´Ð¾Ð¼Ð»ÐµÐ½Ð¸Ðµ."
 
 #: ../hosts/hostmrpiracy.py:55 ../hosts/hostbsto.py:41
 msgid "Captcha solving service"
-msgstr ""
+msgstr "Ð¡Ð»ÑÐ¶Ð±Ð° ÑÐµÑÐµÐ½Ð¸Ñ ÐºÐ°Ð¿ÑÐ¸"
 
 #: ../hosts/hostmozicsillag.py:44
-#, fuzzy
 msgid "Catalog"
-msgstr "ÐÐ°ÑÐ°Ð»Ð¾Ð³ A-Z"
+msgstr "ÐÐ°ÑÐ°Ð»Ð¾Ð³"
 
 #: ../hosts/hostbbcsport.py:189
 msgid "Catch up"
-msgstr ""
+msgstr "ÐÐ¾Ð³Ð¾Ð½ÑÑÑÐ¸Ðµ"
 
 #: ../hosts/hostplayrtsiw.py:183 ../hosts/hostmooviecc.py:56
 #: ../hosts/hostmooviecc.py:61 ../hosts/hostmovizlandcom.py:34
@@ -1032,14 +1009,12 @@
 msgstr "ÐÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð¸"
 
 #: ../hosts/hostfilmstreamhdit.py:188
-#, fuzzy
 msgid "Categories:"
-msgstr "ÐÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð¸"
+msgstr "ÐÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð¸:"
 
 #: ../libs/iklubnet.py:32
-#, fuzzy
 msgid "Categorization"
-msgstr "ÐÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð·Ð°ÑÐ¸Ð¸:"
+msgstr "ÐÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð·Ð°ÑÐ¸Ñ"
 
 #: ../hosts/hostkisscartoonme.py:49
 msgid "Catrtoon list"
@@ -1055,9 +1030,9 @@
 msgstr "ÐÐ°Ð½Ð°Ð»"
 
 #: ../hosts/hostuktvplay.py:152 ../hosts/hostuktvplay.py:223
-#, fuzzy, python-format
+#, python-format
 msgid "Channel: %s"
-msgstr "ÐÐ°Ð½Ð°Ð»Ñ"
+msgstr "ÐÐ°Ð½Ð°Ð»: %s"
 
 #: ../libs/showsporttvcom.py:155 ../hosts/hostitvcom.py:60
 #: ../hosts/hostbbciplayer.py:58 ../hosts/hostsvtplayse.py:82
@@ -1069,7 +1044,6 @@
 msgstr "ÐÐ°Ð½Ð°Ð»Ñ"
 
 #: ../hosts/hosttwitchtv.py:658
-#, fuzzy
 msgid "Channles"
 msgstr "ÐÐ°Ð½Ð°Ð»Ñ"
 
@@ -1080,9 +1054,8 @@
 #: ../hosts/hostzdfmediathek.py:89 ../hosts/hostogladajto.py:93
 #: ../hosts/hostvizjerpl.py:73 ../hosts/hostfilman.py:88
 #: ../hosts/hosthdseanspl.py:67
-#, fuzzy
 msgid "Children"
-msgstr "ÐÐ»Ñ Ð´ÐµÑÐµÐ¹"
+msgstr "ÐÐµÑÑÐºÐ¸Ðµ"
 
 #: ../hosts/hostkinox.py:93
 msgid "Cinema movies"
@@ -1090,33 +1063,32 @@
 
 #: ../components/e2ivk.py:443
 msgid "Clear"
-msgstr ""
+msgstr "ÐÑÐ¸ÑÑÐ¸ÑÑ"
 
 #: ../Web/webSite.py:74
 msgid "Click"
-msgstr ""
+msgstr "ÐÐ°Ð¶Ð¼Ð¸ÑÐµ"
 
 #: ../hosts/hostmediasetplay.py:617
 msgid "Clip"
-msgstr ""
+msgstr "ÐÐ»Ð¸Ð¿"
 
 #: ../hosts/hostkijknl.py:63 ../hosts/hosttwitchtv.py:126
 #: ../hosts/hosttwitchtv.py:296
 msgid "Clips"
-msgstr ""
+msgstr "ÐÐ»Ð¸Ð¿Ñ"
 
 #: ../components/iptvextmovieplayer.py:1357
 msgid "Closing. Please wait..."
-msgstr "ÐÐ°ÐºÑÑÑÐ¸Ðµ. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ° , Ð¿Ð¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ ..."
+msgstr "ÐÐ°ÐºÑÑÑÐ¸Ðµ. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ..."
 
 #: ../hosts/hostbbcsport.py:189
-#, fuzzy
 msgid "Coming up"
-msgstr "Ð¡ÐºÐ¾ÑÐ¾"
+msgstr "ÐÐ° Ð¿Ð¾Ð´ÑÐ¾Ð´Ðµ"
 
 #: ../hosts/hostiptvplayerinfo.py:51
 msgid "Commits"
-msgstr ""
+msgstr "ÐÐ¾Ð¼Ð¼Ð¸ÑÑ"
 
 #: ../iptvupdate/updatemainwindow.py:298
 msgid "Completed."
@@ -1133,14 +1105,14 @@
 msgstr "ÐÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ñ"
 
 #: ../components/confighost.py:33
-#, fuzzy, python-format
+#, python-format
 msgid "Configuration [%s] service"
-msgstr "ÐÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ñ ÑÐ»ÑÐ¶Ð±Ñ[%s]"
+msgstr "ÐÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ñ [%s] ÑÐµÑÐ²Ð¸ÑÐ°"
 
 #: ../plugin.py:91
-#, fuzzy, python-format
+#, python-format
 msgid "Configure %s"
-msgstr "ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ° ÑÐ¾ÑÑÐ°"
+msgstr "ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ° %s"
 
 #: ../components/iptvplayerwidget.py:643
 msgid "Configure host"
@@ -1181,82 +1153,79 @@
 
 #: ../iptvupdate/updatemainwindow.py:905
 msgid "Copy all graphics."
-msgstr ""
+msgstr "ÐÐ¾Ð¿Ð¸ÑÐ¾Ð²Ð°ÑÑ Ð²ÑÑ Ð³ÑÐ°ÑÐ¸ÐºÑ."
 
 #: ../iptvupdate/updatemainwindow.py:897 ../iptvupdate/updatemainwindow.py:907
 msgid "Copy graphics without icons."
-msgstr ""
+msgstr "ÐÐ¾Ð¿Ð¸ÑÐ¾Ð²Ð°ÑÑ Ð³ÑÐ°ÑÐ¸ÐºÑ Ð±ÐµÐ· Ð·Ð½Ð°ÑÐºÐ¾Ð²."
 
 #: ../iptvupdate/updatemainwindow.py:909
 msgid "Copy icons."
-msgstr ""
+msgstr "ÐÐ¾Ð¿Ð¸ÑÐ¾Ð²Ð°ÑÑ Ð¸ÐºÐ¾Ð½ÐºÐ¸."
 
 #: ../iptvupdate/updatemainwindow.py:396
 msgid "Copy post installed binaries."
 msgstr "ÐÐ¾Ð¿Ð¸ÑÐ¾Ð²Ð°ÑÑ Ð¿Ð¾ÑÐ»Ðµ ÑÑÑÐ°Ð½Ð¾Ð²ÐºÐ¸ Ð´Ð²Ð¾Ð¸ÑÐ½ÑÑ ÑÐ°Ð¹Ð»Ð¾Ð²."
 
 #: ../iptvupdate/updatemainwindow.py:309
-#, fuzzy
 msgid "Correct version."
-msgstr "ÐÑÐ¾Ð²ÐµÑÐºÐ° Ð²ÐµÑÑÐ¸Ð¸."
+msgstr "ÐÑÐ°Ð²Ð¸Ð»ÑÐ½Ð°Ñ Ð²ÐµÑÑÐ¸Ñ."
 
 #: ../hosts/hostvevo.py:410
-#, fuzzy, python-format
+#, python-format
 msgid "Count: %s"
-msgstr "Ð¡ÑÑÐ°Ð½Ñ"
+msgstr "ÐÑÐ¾Ð´Ð¾Ð»Ð¶ÐµÐ½Ð¸Ðµ: %s"
 
 #: ../hosts/hostmediayou.py:73
 msgid "Countries"
 msgstr "Ð¡ÑÑÐ°Ð½Ñ"
 
 #: ../hosts/hostplayzcc.py:241
-#, fuzzy
 msgid "Country"
 msgstr "Ð¡ÑÑÐ°Ð½Ñ"
 
 #: ../components/configextmovieplayer.py:313
 msgid "Create LCD/VFD summary screen"
-msgstr ""
+msgstr "Ð¡Ð¾Ð·Ð´Ð°ÑÑ ÑÐ²Ð¾Ð´Ð½ÑÐ¹ ÑÐºÑÐ°Ð½ LCD/VFD"
 
 #: ../setup/iptvsetupimpl.py:431
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Create OpenSSL symlinks failed with following error \"%s\".\n"
 "Some functions may not work correctly."
 msgstr ""
-"OpenSSL Ð² Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ð¸ Ð½Ðµ Ð¿Ð¾Ð´Ð´ÐµÑÐ¶Ð¸Ð²Ð°ÐµÑÑÑ.\n"
-"ÐÐµÐºÐ¾ÑÐ¾ÑÑÐµ ÑÑÐ½ÐºÑÐ¸Ð¸ Ð¼Ð¾Ð³ÑÑ ÑÐ°Ð±Ð¾ÑÐ°ÑÑ Ð½ÐµÐºÐ¾ÑÑÐµÐºÑÐ½Ð¾."
+"Ð¡Ð¾Ð·Ð´Ð°Ð½Ð¸Ðµ ÑÐ¸Ð¼Ð²Ð¾Ð»ÑÐ½ÑÑ ÑÑÑÐ»Ð¾Ðº OpenSSL Ñ Ð¾ÑÐ¸Ð±ÐºÐ¾Ð¹ \"%s\".\n"
+"ÐÐµÐºÐ¾ÑÐ¾ÑÑÐµ ÑÑÐ½ÐºÑÐ¸Ð¸ Ð¼Ð¾Ð³ÑÑ ÑÐ°Ð±Ð¾ÑÐ°ÑÑ Ð½ÐµÐ¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¾."
 
 #: ../components/iptvplayerwidget.py:350
 msgid "Critical Error - cookie can't be saved!"
-msgstr ""
+msgstr "ÐÑÐ¸ÑÐ¸ÑÐµÑÐºÐ°Ñ Ð¾ÑÐ¸Ð±ÐºÐ°: ÐºÑÐºÐ¸ Ð½Ðµ Ð¼Ð¾Ð³ÑÑ Ð±ÑÑÑ ÑÐ¾ÑÑÐ°Ð½ÐµÐ½Ñ!"
 
 #: ../libs/pCommon.py:1416
 msgid "Critical Error â Content-Encoding gzip cannot be handled!"
-msgstr ""
+msgstr "ÐÑÐ¸ÑÐ¸ÑÐµÑÐºÐ°Ñ Ð¾ÑÐ¸Ð±ÐºÐ°: gzip Ñ ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐ¾Ð¹ ÑÐ¾Ð´ÐµÑÐ¶Ð¸Ð¼Ð¾Ð³Ð¾ Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐ°Ð½!"
 
 #: ../hosts/hostted.py:383
-#, fuzzy
 msgid "Curator"
-msgstr "ÐÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ñ"
+msgstr "ÐÑÑÐ°ÑÐ¾Ñ"
 
 #: ../iptvupdate/updatemainwindow.py:364
 #, python-format
 msgid "Currently you have version [%s]."
-msgstr "Ð Ð½Ð°ÑÑÐ¾ÑÑÐµÐµ Ð²ÑÐµÐ¼Ñ Ñ Ð²Ð°Ñ Ð²ÐµÑÑÐ¸Ñ [%s]."
+msgstr "Ð Ð½Ð°ÑÑÐ¾ÑÑÐµÐµ Ð²ÑÐµÐ¼Ñ Ñ ÐÐ°Ñ Ð²ÐµÑÑÐ¸Ñ [%s]."
 
 #: ../hosts/hostlocalmedia.py:627
 msgid "Cut"
-msgstr "ÐÐµÑÐµÐ¼ÐµÑÑÐ¸ÑÑ"
+msgstr "ÐÐ±ÑÐµÐ·Ð°ÑÑ"
 
 #: ../libs/sportstream365.py:31
 msgid "Cyrillic Latin Converter"
-msgstr ""
+msgstr "ÐÐ¸ÑÐ¸Ð»Ð»Ð¸ÑÐµ-Ð»Ð°ÑÐ¸Ð½ÑÐºÐ¸Ð¹ ÐºÐ¾Ð½Ð²ÐµÑÑÐµÑ"
 
 #: ../libs/youtube_dl/extractor/bbc.py:27 ../hosts/hostsvtplayse.py:40
 #: ../hosts/hosttvnowde.py:29
 msgid "DASH/mpd"
-msgstr ""
+msgstr "DASH/mpd"
 
 #: ../hosts/hostwatchwrestlinguno.py:49 ../hosts/hostwatchwrestlinguno.py:305
 #: ../hosts/hostwatchwrestling.py:65 ../hosts/hostwatchwrestling.py:314
@@ -1276,18 +1245,16 @@
 msgstr "ÐÐÐÐ Ð£ÐÐÐ"
 
 #: ../hosts/hosttvplayercom.py:243
-#, fuzzy
 msgid "DRM protected streams are not supported."
-msgstr "ÐÐ¾ÑÐ¾Ðº Silverlight Ð½Ðµ Ð¿Ð¾Ð´Ð´ÐµÑÐ¶Ð¸Ð²Ð°ÐµÑÑÑ."
+msgstr "DRM-Ð·Ð°ÑÐ¸ÑÑÐ½Ð½ÑÐµ Ð¿Ð¾ÑÐ¾ÐºÐ¸ Ð½Ðµ Ð¿Ð¾Ð´Ð´ÐµÑÐ¶Ð¸Ð²Ð°ÑÑÑÑ."
 
 #: ../hosts/hostkijknl.py:272
-#, fuzzy
 msgid "DRM protection detected."
-msgstr "Ð­Ð»ÐµÐ¼ÐµÐ½ÑÑ Ñ Ð·Ð°ÑÐ¸ÑÐ¾Ð¹ DRM."
+msgstr "ÐÐ±Ð½Ð°ÑÑÐ¶ÐµÐ½Ð° Ð·Ð°ÑÐ¸ÑÐ° DRM."
 
 #: ../components/iptvconfigmenu.py:106 ../components/configextmovieplayer.py:63
 msgid "Darkgray"
-msgstr "Ð¢ÐµÐ¼Ð½Ð¾-ÑÐµÑÑÐ¹"
+msgstr "Ð¢ÑÐ¼Ð½Ð¾-ÑÐµÑÑÐ¹"
 
 #: ../libs/beinmatch.py:56
 #, python-format
@@ -1295,102 +1262,99 @@
 "Data for link generation could not be found.\n"
 "Please report this problem to %s"
 msgstr ""
+"ÐÐ°Ð½Ð½ÑÐµ Ð´Ð»Ñ Ð³ÐµÐ½ÐµÑÐ°ÑÐ¸Ð¸ ÑÑÑÐ»ÐºÐ¸ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ñ.\n"
+"ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, ÑÐ¾Ð¾Ð±ÑÐ¸ÑÐµ Ð¾Ð± ÑÑÐ¾Ð¹ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ðµ Ð² %s"
 
 #: ../hosts/hostbbcsport.py:440
 msgid "Data mismatch."
-msgstr ""
+msgstr "ÐÐµÑÐ¾Ð¾ÑÐ²ÐµÑÑÑÐ²Ð¸Ðµ Ð´Ð°Ð½Ð½ÑÑ."
 
 #: ../Web/webParts.py:118
 msgid "Debug file does not exist - nothing to delete"
-msgstr ""
+msgstr "Ð¤Ð°Ð¹Ð» Ð¾ÑÐ»Ð°Ð´ÐºÐ¸ Ð½Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ. ÐÐµÑÐµÐ³Ð¾ ÑÐ´Ð°Ð»ÑÑÑ."
 
 #: ../Web/webSite.py:274
 msgid "Debug file does not exist - nothing to download"
-msgstr ""
+msgstr "Ð¤Ð°Ð¹Ð» Ð¾ÑÐ»Ð°Ð´ÐºÐ¸ Ð½Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ. ÐÐµÑÐµÐ³Ð¾ ÑÐºÐ°ÑÐ°ÑÑ."
 
 #: ../Web/webParts.py:114
 msgid "Debug file has been deleted"
-msgstr ""
+msgstr "Ð¤Ð°Ð¹Ð» Ð¾ÑÐ»Ð°Ð´ÐºÐ¸ ÑÐ´Ð°Ð»ÐµÐ½."
 
 #: ../components/iptvconfigmenu.py:544
 msgid "Debug logs"
-msgstr "ÐÐºÐ»ÑÑÐ¸ÑÑ Ð¶ÑÑÐ½Ð°Ð» Ð´Ð¸Ð°Ð³Ð½Ð¾ÑÑÐ¸ÐºÐ¸"
+msgstr "ÐÑÑÐµÑ Ð¾Ð± Ð¾ÑÐ¸Ð±ÐºÐ°Ñ"
 
 #: ../Web/webParts.py:120
 msgid "Debug option is disabled - nothing to display"
-msgstr ""
+msgstr "ÐÐ¿ÑÐ¸Ñ Ð¾ÑÐ»Ð°Ð´ÐºÐ¸ Ð¾ÑÐºÐ»ÑÑÐµÐ½Ð°. ÐÐµÑÐµÐ³Ð¾ Ð¾ÑÐ¾Ð±ÑÐ°Ð·Ð¸ÑÑ."
 
 #: ../Web/webParts.py:122
 msgid "Debug option set to console - nothing to display"
-msgstr ""
+msgstr "ÐÐ°ÑÐ°Ð¼ÐµÑÑ Ð¾ÑÐ»Ð°Ð´ÐºÐ¸ ÑÑÑÐ°Ð½Ð¾Ð²Ð»ÐµÐ½ Ð² ÐºÐ¾Ð½ÑÐ¾Ð»Ð¸. ÐÐµÑÐµÐ³Ð¾ Ð¾ÑÐ¾Ð±ÑÐ°Ð·Ð¸ÑÑ."
 
 #: ../Web/webParts.py:124
 msgid "Debug option set to debugfile, but file does not exist - nothing to display"
-msgstr ""
+msgstr "ÐÐ¿ÑÐ¸Ñ Ð¾ÑÐ»Ð°Ð´ÐºÐ¸ ÑÑÑÐ°Ð½Ð¾Ð²Ð»ÐµÐ½Ð° Ð² Ð¾ÑÐ»Ð°Ð´Ð¾ÑÐ½ÑÐ¹ ÑÐ°Ð¹Ð», Ð½Ð¾ ÑÐ°Ð¹Ð» Ð½Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ. ÐÐµÑÐµÐ³Ð¾ Ð¾ÑÐ¾Ð±ÑÐ°Ð·Ð¸ÑÑ."
 
 #: ../components/iptvpictureplayer.py:355
 #, python-format
 msgid "Decode file [%s] problem."
-msgstr "Ð Ð°ÑÐºÐ¾Ð´Ð¸ÑÐ¾Ð²Ð°ÑÑ ÑÐ°Ð¹Ð» [%s] Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ð°."
+msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° ÑÐ°ÑÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐ¸ ÑÐ°Ð¹Ð»Ð° [%s]."
 
 #: ../libs/youtube_dl/extractor/youtube.py:616
 msgid "Decrypt Signatures Error"
-msgstr ""
+msgstr "ÐÑÐ¸Ð±ÐºÐ° ÑÐ°ÑÑÐ¸ÑÑÐ¾Ð²ÐºÐ¸ Ð¿Ð¾Ð´Ð¿Ð¸ÑÐµÐ¹"
 
 #: ../iptvupdate/updatemainwindow.py:917
 msgid "Decrypt archive."
-msgstr ""
+msgstr "Ð Ð°ÑÑÐ¸ÑÑÐ¾Ð²Ð°ÑÑ Ð°ÑÑÐ¸Ð²."
 
 #: ../iptvupdate/updatemainwindow.py:1018
-#, fuzzy
 msgid "Decryption the archive completed successfully."
-msgstr "Ð Ð°ÑÐ¿Ð°ÐºÐ¾Ð²ÐºÐ° Ð°ÑÑÐ¸Ð²Ð° ÑÑÐ¿ÐµÑÐ½Ð¾ Ð·Ð°Ð²ÐµÑÑÐµÐ½Ð°."
+msgstr "Ð Ð°ÑÑÐ¸ÑÑÐ¾Ð²ÐºÐ° Ð°ÑÑÐ¸Ð²Ð° Ð·Ð°Ð²ÐµÑÑÐµÐ½Ð° ÑÑÐ¿ÐµÑÐ½Ð¾."
 
 #: ../libs/sportstream365.py:23 ../components/iptvconfigmenu.py:99
 #: ../components/iptvconfigmenu.py:101 ../components/iptvconfigmenu.py:106
 #: ../hosts/hosthdstreams.py:156 ../hosts/hostfilmehdnet.py:81
 #: ../hosts/hostfenixsite.py:272 ../hosts/hosttvjworg.py:30
-#, fuzzy
 msgid "Default"
 msgstr "ÐÐ¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ"
 
 #: ../components/iptvconfigmenu.py:452
 msgid "Default captcha bypass"
-msgstr ""
+msgstr "ÐÐ±ÑÐ¾Ð´ ÐºÐ°Ð¿ÑÐ¸ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ"
 
 #: ../components/configextmovieplayer.py:336
 msgid "Default video aspect ratio"
-msgstr "    ÐÐ¸Ð´ÐµÐ¾ Ð¿ÑÐ¾Ð¿Ð¾ÑÑÐ¸Ð¸ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ"
+msgstr "    Ð¡Ð¾Ð¾ÑÐ½Ð¾ÑÐµÐ½Ð¸Ðµ ÑÑÐ¾ÑÐ¾Ð½ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ"
 
 #: ../components/configextmovieplayer.py:338
-#, fuzzy
 msgid "Default video policy for 16:9"
-msgstr "    ÐÐ¸Ð´ÐµÐ¾ ÑÐ¾Ð¾ÑÐ½Ð¾ÑÐµÐ½Ð¸Ðµ ÑÑÐ¾ÑÐ¾Ð½ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ"
+msgstr "    ÐÐ¾Ð»Ð¸ÑÐ¸ÐºÐ° Ð²Ð¸Ð´ÐµÐ¾ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ Ð´Ð»Ñ 16:9"
 
 #: ../components/configextmovieplayer.py:340
-#, fuzzy
 msgid "Default video policy for 4:3"
-msgstr "    ÐÐ¸Ð´ÐµÐ¾ ÑÐ¾Ð¾ÑÐ½Ð¾ÑÐµÐ½Ð¸Ðµ ÑÑÐ¾ÑÐ¾Ð½ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ"
+msgstr "    ÐÐ¾Ð»Ð¸ÑÐ¸ÐºÐ° Ð²Ð¸Ð´ÐµÐ¾ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ Ð´Ð»Ñ 4:3"
 
 #: ../hosts/hosttvjworg.py:44
 msgid "Default video quality"
-msgstr "ÐÐ¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ ÐºÐ°ÑÐµÑÑÐ²Ð¾ Ð²Ð¸Ð´ÐµÐ¾"
+msgstr "ÐÐ°ÑÐµÑÑÐ²Ð¾ Ð²Ð¸Ð´ÐµÐ¾ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ"
 
 #: ../hosts/hostkisscartoonme.py:30 ../hosts/hostbbcsport.py:40
 #: ../hosts/hostvevo.py:30 ../hosts/hostyoutube.py:37
 #: ../hosts/hostbbciplayer.py:32 ../hosts/hostsvtplayse.py:46
 msgid "Default video quality:"
-msgstr "Ð¤Ð¾ÑÐ¼Ð°Ñ Ð²Ð¸Ð´ÐµÐ¾-Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ:"
+msgstr "ÐÐ°ÑÐµÑÑÐ²Ð¾ Ð²Ð¸Ð´ÐµÐ¾ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ:"
 
 #: ../Web/webParts.py:321 ../Web/webParts.py:330 ../Web/webParts.py:338
 #: ../Web/webParts.py:345
 msgid "Delete"
-msgstr ""
+msgstr "Ð£Ð´Ð°Ð»Ð¸ÑÑ"
 
 #: ../Web/webParts.py:130
-#, fuzzy
 msgid "Delete log file"
-msgstr "ÐÑÐ±Ð¾Ñ ÑÐ°Ð¹Ð»Ð° Ñ ÑÑÐ±ÑÐ¸ÑÑÐ°Ð¼Ð¸"
+msgstr "Ð£Ð´Ð°Ð»Ð¸ÑÑ ÑÐ°Ð¹Ð» Ð¶ÑÑÐ½Ð°Ð»Ð°"
 
 #: ../components/iptvfavouriteswidgets.py:45
 msgid "Description:"
@@ -1398,16 +1362,16 @@
 
 #: ../setup/iptvsetupimpl.py:254
 msgid "Detection of MIPSEL FPU ABI."
-msgstr ""
+msgstr "ÐÐ±Ð½Ð°ÑÑÐ¶ÐµÐ½Ð¸Ðµ MIPSEL FPU ABI."
 
 #: ../setup/iptvsetupimpl.py:170
 msgid "Detection of glibc version."
-msgstr "ÐÐ±Ð½Ð°ÑÑÐ¶ÐµÐ½Ð¸Ðµ glibc Ð²ÐµÑÑÐ¸Ð¸."
+msgstr "ÐÐ±Ð½Ð°ÑÑÐ¶ÐµÐ½Ð¸Ðµ Ð²ÐµÑÑÐ¸Ð¸ glibc."
 
 #: ../setup/iptvsetuphelper.py:130
 #, python-format
 msgid "Detection of the \"%s\" utility."
-msgstr "Ð¡ÑÐµÐ´ÑÑÐ²Ð° Ð¾Ð±Ð½Ð°ÑÑÐ¶ÐµÐ½Ð¸Ñ \"%s\" ÑÑÐ¸Ð»Ð¸ÑÐ°."
+msgstr "ÐÐ±Ð½Ð°ÑÑÐ¶ÐµÐ½Ð¸Ðµ ÑÑÐ¸Ð»Ð¸ÑÑ \"%s\"."
 
 #: ../setup/iptvsetupimpl.py:366
 msgid "Detection of the OpenSSL 1.0.0 version."
@@ -1419,11 +1383,11 @@
 
 #: ../setup/iptvsetupimpl.py:479
 msgid "Detection of the ffmpeg version."
-msgstr "ÐÐ±Ð½Ð°ÑÑÐ¶ÐµÐ½Ð¸Ðµ FFmpeg Ð²ÐµÑÑÐ¸Ð¸."
+msgstr "ÐÐ±Ð½Ð°ÑÑÐ¶ÐµÐ½Ð¸Ðµ Ð²ÐµÑÑÐ¸Ð¸ FFmpeg."
 
 #: ../setup/iptvsetupimpl.py:441
 msgid "Detection of the gstreamer version."
-msgstr "ÐÐ±Ð½Ð°ÑÑÐ¶ÐµÐ½Ð¸Ðµ GStreamer Ð²ÐµÑÑÐ¸Ð¸."
+msgstr "ÐÐ±Ð½Ð°ÑÑÐ¶ÐµÐ½Ð¸Ðµ Ð²ÐµÑÑÐ¸Ð¸ GStreamer."
 
 #: ../setup/iptvsetupimpl.py:195
 msgid "Detection of the platform."
@@ -1443,33 +1407,32 @@
 
 #: ../hosts/hostappletrailers.py:104 ../hosts/hostddl.py:580
 msgid "Director:"
-msgstr ""
+msgstr "Ð ÐµÐ¶Ð¸ÑÑÐµÑ:"
 
 #: ../hosts/hostappletrailers.py:104 ../hosts/hostddl.py:582
 msgid "Directors:"
-msgstr ""
+msgstr "Ð ÐµÐ¶Ð¸ÑÑÐµÑÑ:"
 
 #: ../components/iptvplayerwidget.py:1773
 #, python-format
 msgid "Directory \"%s\" does not exists."
-msgstr ""
+msgstr "ÐÐ°ÑÐ°Ð»Ð¾Ð³ \"%s\" Ð½Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ."
 
 #: ../Web/webThreads.py:213
 msgid "Disable"
-msgstr ""
+msgstr "ÐÐ°Ð¿ÑÐµÑÐ¸ÑÑ"
 
 #: ../components/iptvconfigmenu.py:394
 msgid "Disable live at plugin start"
 msgstr "ÐÑÐºÐ»ÑÑÐ¸ÑÑ Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑ ÐºÐ°Ð½Ð°Ð»Ð¾Ð² Ð¿ÑÐ¸ ÑÑÐ°ÑÑÐµ Ð¿Ð»Ð°Ð³Ð¸Ð½Ð°"
 
 #: ../components/playerselector.py:505
-#, fuzzy
 msgid "Disable not used services"
-msgstr "Ð£Ð´Ð°Ð»Ð¸ÑÑ ÑÐµÑÐ²Ð¸ÑÑ ÐºÐ¾ÑÐ¾ÑÑÐµ Ð½Ðµ ÑÐ°Ð±Ð¾ÑÐ°ÑÑ"
+msgstr "ÐÑÐºÐ»ÑÑÐ¸ÑÑ Ð½ÐµÐ¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÐ¼ÑÐµ ÑÐµÑÐ²Ð¸ÑÑ"
 
 #: ../components/iptvfavouriteswidgets.py:194
 msgid "Disable reordering"
-msgstr "ÐÑÐºÐ»ÑÑÐ¸ÑÑ Ð¿ÐµÑÐµÐ¼ÐµÑÐµÐ½Ð¸Ñ"
+msgstr "ÐÑÐºÐ»ÑÑÐ¸ÑÑ Ð¿ÐµÑÐµÐ¼ÐµÑÐµÐ½Ð¸Ðµ"
 
 #: ../components/playerselector.py:478 ../components/confighost.py:155
 msgid "Disable reordering mode"
@@ -1477,17 +1440,15 @@
 
 #: ../components/playerselector.py:483
 msgid "Disable/Enable groups"
-msgstr ""
+msgstr "ÐÑÐºÐ»ÑÑÐ¸ÑÑ/Ð²ÐºÐ»ÑÑÐ¸ÑÑ Ð³ÑÑÐ¿Ð¿Ñ"
 
 #: ../components/playerselector.py:481
-#, fuzzy
 msgid "Disable/Enable services"
-msgstr "Ð£Ð´Ð°Ð»Ð¸ÑÑ ÑÐµÑÐ²Ð¸ÑÑ ÐºÐ¾ÑÐ¾ÑÑÐµ Ð½Ðµ ÑÐ°Ð±Ð¾ÑÐ°ÑÑ"
+msgstr "ÐÑÐºÐ»ÑÑÐ¸ÑÑ/Ð²ÐºÐ»ÑÑÐ¸ÑÑ ÑÐµÑÐ²Ð¸ÑÑ"
 
 #: ../hosts/hostredbull.py:51
-#, fuzzy
 msgid "Discover"
-msgstr "ÐÐ±Ð»Ð¾Ð¶ÐºÐ°"
+msgstr "ÐÐ±Ð½Ð°ÑÑÐ¶ÐµÐ½Ð¸Ðµ"
 
 #: ../components/iptvconfigmenu.py:401
 msgid "Display thumbnails"
@@ -1495,44 +1456,42 @@
 
 #: ../hosts/hostdixmax.py:59
 msgid "DixMax Suggestions"
-msgstr ""
+msgstr "DixMax ÑÐµÐºÐ¾Ð¼ÐµÐ½Ð´Ð°ÑÐ¸Ð¸"
 
 #: ../setup/iptvsetupimpl.py:54 ../setup/iptvsetupimpl.py:64
 #: ../setup/iptvsetupimpl.py:67 ../setup/iptvsetupimpl.py:74
 #: ../setup/iptvsetupimpl.py:77 ../setup/iptvsetupimpl.py:83
 #: ../setup/iptvsetupimpl.py:89
 msgid "Do not install (not recommended)"
-msgstr "ÐÐµ ÑÑÑÐ°Ð½Ð°Ð²Ð»Ð¸Ð²Ð°Ð¹ÑÐµ (Ð½Ðµ ÑÐµÐºÐ¾Ð¼ÐµÐ½Ð´ÑÐµÑÑÑ)"
+msgstr "ÐÐµ ÑÑÑÐ°Ð½Ð°Ð²Ð»Ð¸Ð²Ð°ÑÑ (Ð½Ðµ ÑÐµÐºÐ¾Ð¼ÐµÐ½Ð´ÑÐµÑÑÑ)"
 
 #: ../components/e2ivk.py:665
 #, python-format
 msgid "Do you want to download \"%s\" Virtual Keyboard layout now?"
-msgstr ""
+msgstr "Ð¥Ð¾ÑÐ¸ÑÐµ ÑÐºÐ°ÑÐ°ÑÑ ÑÐ°ÑÐºÐ»Ð°Ð´ÐºÑ Ð²Ð¸ÑÑÑÐ°Ð»ÑÐ½Ð¾Ð¹ ÐºÐ»Ð°Ð²Ð¸Ð°ÑÑÑÑ \"%s\" ÑÐµÐ¹ÑÐ°Ñ?"
 
 #: ../components/iptvsubdownloader.py:539
 msgid "Do you want to finish?"
-msgstr "ÐÑ ÑÐ¾ÑÐ¸ÑÐµ, Ð²ÐºÐ»ÑÑÐ¸ÑÑ ÑÑÐ±ÑÐ¸ÑÑÑ?"
+msgstr "ÐÑ ÑÐ¾ÑÐ¸ÑÐµ Ð·Ð°ÐºÐ¾Ð½ÑÐ¸ÑÑ?"
 
 #: ../components/e2ivk.py:667
 #, python-format
 msgid "Do you want to try to re-download \"%s\" Virtual Keyboard layout?"
-msgstr ""
+msgstr "ÐÑ ÑÐ¾ÑÐ¸ÑÐµ Ð¿Ð¾Ð¿ÑÐ¾Ð±Ð¾Ð²Ð°ÑÑ Ð¿Ð¾Ð²ÑÐ¾ÑÐ½Ð¾ Ð·Ð°Ð³ÑÑÐ·Ð¸ÑÑ \"%s\" Ð²Ð¸ÑÑÑÐ°Ð»ÑÐ½ÑÑ ÑÐ°ÑÐºÐ»Ð°Ð´ÐºÑ ÐºÐ»Ð°Ð²Ð¸Ð°ÑÑÑÑ?"
 
 #: ../hosts/hostkinox.py:95
-#, fuzzy
 msgid "Documentaries"
-msgstr "ÐÐ¾ÐºÑÐ¼ÐµÐ½ÑÑ"
+msgstr "ÐÐ¾ÐºÑÐ¼ÐµÐ½ÑÐ°Ð»ÑÐ½Ð¾Ðµ"
 
 #: ../components/iptvplayerwidget.py:185
 #: ../components/iptvextmovieplayer.py:848
-#, fuzzy
 msgid "Download"
-msgstr "ÐÐ°Ð³ÑÑÐ·Ð¸ÑÑ"
+msgstr "ÐÐ°Ð³ÑÑÐ·ÐºÐ°"
 
 #: ../hosts/hostplayrtsiw.py:547 ../hosts/hostplayrtsiw.py:549
-#, fuzzy, python-format
+#, python-format
 msgid "Download %s"
-msgstr "ÐÐ°Ð³ÑÑÐ·Ð¸ÑÑ"
+msgstr "ÐÐ°Ð³ÑÑÐ·ÐºÐ° %s"
 
 #: ../libs/urlparser.py:10611 ../Web/webParts.py:329 ../Web/webParts.py:337
 #: ../Web/webParts.py:344 ../iptvdm/iptvdmui.py:279
@@ -1549,7 +1508,7 @@
 " ÐÐµÐ¿ÑÐ°Ð²Ð¸Ð»ÑÐ½ÑÐ¹ Ð°Ð´ÑÐµÑ ('%r')."
 
 #: ../components/e2isimpledownloader.py:109
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Download can not be started.\n"
 "Downloader %s not working correctly.\n"
@@ -1557,7 +1516,7 @@
 msgstr ""
 "ÐÐ°Ð³ÑÑÐ·ÐºÐ° Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð½Ð°ÑÐ°ÑÐ°.\n"
 "ÐÐ°Ð³ÑÑÐ·ÑÐ¸Ðº %s ÑÐ°Ð±Ð¾ÑÐ°ÐµÑ Ð½ÐµÐ¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¾.\n"
-"Ð¡ÑÐ°ÑÑÑ[%s]"
+"ÐÐ¾ÑÐ»ÐµÐ´Ð½ÑÑ Ð¾ÑÐ¸Ð±ÐºÐ° \"%s (%s)\"."
 
 #: ../components/iptvsubsimpledownloader.py:139
 #, python-format
@@ -1571,7 +1530,7 @@
 "Ð¡ÑÐ°ÑÑÑ[%s]"
 
 #: ../components/e2isimpledownloader.py:100
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Download can not be started.\n"
 "Incorrect address \"%r\"."
@@ -1580,13 +1539,13 @@
 " ÐÐµÐ¿ÑÐ°Ð²Ð¸Ð»ÑÐ½ÑÐ¹ Ð°Ð´ÑÐµÑ ('%r')."
 
 #: ../components/e2isimpledownloader.py:114
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Download failed.\n"
 "Last error \"%s (%s)\"."
 msgstr ""
 "ÐÑÐ¸Ð±ÐºÐ° Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸.\n"
-"Ð¡ÑÐ°ÑÑÑ[%s]"
+"ÐÐ¾ÑÐ»ÐµÐ´Ð½ÑÑ Ð¾ÑÐ¸Ð±ÐºÐ° \"%s (%s)\"."
 
 #: ../components/iptvsubsimpledownloader.py:143
 #, python-format
@@ -1598,29 +1557,26 @@
 "Ð¡ÑÐ°ÑÑÑ[%s]"
 
 #: ../Web/webParts.py:126 ../Web/webParts.py:141
-#, fuzzy
 msgid "Download log file"
-msgstr "ÐÐ°Ð³ÑÑÐ·Ð¸ÑÑ ÑÐ½Ð¾Ð²Ð°"
+msgstr "Ð¡ÐºÐ°ÑÐ°ÑÑ ÑÐ°Ð¹Ð» Ð¶ÑÑÐ½Ð°Ð»Ð°"
 
 #: ../Web/webParts.py:67 ../Web/webParts.py:84
 #: ../components/playerselector.py:466 ../components/playerselector.py:479
 #: ../components/iptvplayerwidget.py:647
-#, fuzzy
 msgid "Download manager"
 msgstr "ÐÐµÐ½ÐµÐ´Ð¶ÐµÑ Ð·Ð°Ð³ÑÑÐ·Ð¾Ðº"
 
 #: ../Web/webParts.py:251
 msgid "Download manager is not initialized"
-msgstr ""
+msgstr "ÐÐµÐ½ÐµÐ´Ð¶ÐµÑ Ð·Ð°Ð³ÑÑÐ·Ð¾Ðº Ð½Ðµ Ð¸Ð½Ð¸ÑÐ¸Ð°Ð»Ð¸Ð·Ð¸ÑÐ¾Ð²Ð°Ð½."
 
 #: ../components/iptvsubdownloader.py:527
-#, fuzzy
 msgid "Download subtiles failed."
-msgstr "ÐÐ°Ð³ÑÑÐ·Ð¸ÑÑ ÑÑÐ±ÑÐ¸ÑÑÑ %s"
+msgstr "ÐÐ°Ð³ÑÑÐ·ÐºÐ° ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð² Ð½Ðµ ÑÐ´Ð°Ð»Ð°ÑÑ."
 
 #: ../components/iptvextmovieplayer.py:845
 msgid "Download suggested"
-msgstr "ÐÐ¾Ð¶Ð½Ð¾ Ð·Ð°Ð³ÑÑÐ¶Ð°ÑÑ"
+msgstr "ÐÑÐµÐ´Ð»Ð°Ð³Ð°ÐµÑÑÑ ÑÐºÐ°ÑÐ°ÑÑ"
 
 #: ../components/iptvplayerwidget.py:1915
 #: ../components/iptvsubdownloader.py:484
@@ -1634,12 +1590,12 @@
 "Do you want to retry?"
 msgstr ""
 "ÐÐ°Ð³ÑÑÐ·ÐºÐ° \"%s\" Ð½Ðµ ÑÐ´Ð°Ð»Ð¾ÑÑ. \n"
-"ÐÑ ÑÐ¾ÑÐ¸ÑÐµ, Ð¿Ð¾Ð²ÑÐ¾ÑÐ¸ÑÑ Ð¿Ð¾Ð¿ÑÑÐºÑ?"
+"ÐÑ ÑÐ¾ÑÐ¸ÑÐµ Ð¿Ð¾Ð²ÑÐ¾ÑÐ¸ÑÑ Ð¿Ð¾Ð¿ÑÑÐºÑ?"
 
 #: ../setup/iptvsetuphelper.py:131
-#, fuzzy, python-format
+#, python-format
 msgid "Downloading \"%s\"."
-msgstr "ÐÐ°Ð³ÑÑÐ·ÐºÐ° \"%s\" ."
+msgstr "ÐÐ°Ð³ÑÑÐ·ÐºÐ° \"%s\"."
 
 #: ../iptvupdate/updatemainwindow.py:394
 msgid "Downloading an update packet."
@@ -1663,7 +1619,7 @@
 " The address ('%r') is incorrect."
 msgstr ""
 "ÐÐ°Ð³ÑÑÐ·ÐºÐ° Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð½Ð°ÑÐ°ÑÐ°.\n"
-" ÐÐ´ÑÐµÑÑ ('%r') Ð½ÐµÐ²ÐµÑÐµÐ½."
+"ÐÐ´ÑÐµÑ ('%r') Ð½ÐµÐ²ÐµÑÐ½ÑÐ¹."
 
 #: ../components/iptvarticlerichvisualizer.py:218
 #: ../components/iptvpictureplayer.py:293
@@ -1674,7 +1630,7 @@
 " Status[%s]"
 msgstr ""
 "ÐÐ°Ð³ÑÑÐ·ÐºÐ° Ð½ÐµÐ²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð°.\n"
-"ÐÐ°Ð³ÑÑÐ·ÑÐ¸Ðº [%s] Ð½Ðµ ÑÐ°Ð±Ð¾ÑÐ°ÐµÑ Ð´Ð¾Ð»Ð¶Ð½ÑÐ¼ Ð¾Ð±ÑÐ°Ð·Ð¾Ð¼.\n"
+"ÐÐ°Ð³ÑÑÐ·ÑÐ¸Ðº [%s] ÑÐ°Ð±Ð¾ÑÐ°ÐµÑ Ð½ÐµÐ¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¾.\n"
 "Ð¡ÑÐ°ÑÑÑ[%s]"
 
 #: ../components/iptvarticlerichvisualizer.py:209
@@ -1695,21 +1651,21 @@
 msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¾Ð¹ ÑÐ°Ð¹Ð»Ð° [%s]."
 
 #: ../components/e2isimpledownloader.py:94
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Downloading file:\n"
 "%r."
-msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¾Ð¹ ÑÐ°Ð¹Ð»Ð° [%s]."
+msgstr ""
+"ÐÐ°Ð³ÑÑÐ·ÐºÐ° ÑÐ°Ð¹Ð»Ð°:\n"
+"%r."
 
 #: ../iptvupdate/updatemainwindow.py:888
-#, fuzzy
 msgid "Downloading graphics package."
-msgstr "ÐÐ°Ð³ÑÑÐ·ÐºÐ° Ð¿Ð°ÐºÐµÑÐ° Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ñ."
+msgstr "ÐÐ°Ð³ÑÑÐ·ÐºÐ° Ð³ÑÐ°ÑÐ¸ÑÐµÑÐºÐ¾Ð³Ð¾ Ð¿Ð°ÐºÐµÑÐ°."
 
 #: ../iptvupdate/updatemainwindow.py:900
-#, fuzzy
 msgid "Downloading icons package."
-msgstr "ÐÐ°Ð³ÑÑÐ·ÐºÐ° Ð¿Ð°ÐºÐµÑÐ° Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ñ."
+msgstr "ÐÐ°Ð³ÑÑÐ·ÐºÐ° Ð¿Ð°ÐºÐµÑÐ° Ð¸ÐºÐ¾Ð½Ð¾Ðº."
 
 #: ../components/iptvsubsimpledownloader.py:125
 #, python-format
@@ -1723,34 +1679,31 @@
 #: ../Web/webParts.py:266 ../hosts/hostlocalmedia.py:131
 #: ../iptvdm/iptvdmui.py:79
 msgid "Downloads"
-msgstr "ÐÐ°Ð³ÑÑÐ·Ð¸ÑÑ"
+msgstr "ÐÐ°Ð³ÑÑÐ·ÐºÐ¸"
 
 #: ../components/iptvconfigmenu.py:441
-#, fuzzy
 msgid "Downloads location"
-msgstr "ÐÐ°Ð³ÑÑÐ·Ð¸ÑÑ ÑÐ½Ð¾Ð²Ð°"
+msgstr "ÐÐ°Ð¿ÐºÐ° Ð·Ð°Ð³ÑÑÐ·Ð¾Ðº"
 
 #: ../setup/iptvsetupimpl.py:1032
 msgid "Duktape is an embeddable Javascript engine, with a focus on portability and compact footprint.\n"
-msgstr "Duktape - ÑÑÐ¾ Ð²ÑÑÑÐ°Ð¸Ð²Ð°ÐµÐ¼ÑÐ¹ Ð´Ð²Ð¸Ð¶Ð¾Ðº Javascript Ñ Ð°ÐºÑÐµÐ½ÑÐ¾Ð¼ Ð½Ð° Ð¿Ð¾ÑÑÐ°ÑÐ¸Ð²Ð½Ð¾ÑÑÑ Ð¸ ÐºÐ¾Ð¼Ð¿Ð°ÐºÑÐ½Ð¾ÑÑÑ.\n"
+msgstr "Duktape ÑÑÐ¾ Ð²ÑÑÑÐ°Ð¸Ð²Ð°ÐµÐ¼ÑÐ¹ Ð´Ð²Ð¸Ð¶Ð¾Ðº Javascript Ñ Ð°ÐºÑÐµÐ½ÑÐ¾Ð¼ Ð½Ð° Ð¿Ð¾ÑÑÐ°ÑÐ¸Ð²Ð½Ð¾ÑÑÑ Ð¸ ÐºÐ¾Ð¼Ð¿Ð°ÐºÑÐ½Ð¾ÑÑÑ.\n"
 
 #: ../hosts/hostplayzcc.py:240 ../hosts/hosteurosportplayer.py:269
 #: ../hosts/hostcartoonhd.py:535 ../hosts/hostted.py:382
 #: ../hosts/hosthdseanspl.py:310 ../hosts/hostekstraklasatv.py:161
-#, fuzzy
 msgid "Duration"
-msgstr "ÐÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ñ"
+msgstr "ÐÐ»Ð¸ÑÐµÐ»ÑÐ½Ð¾ÑÑÑ"
 
 #: ../hosts/hostfilma24io.py:247 ../hosts/hostyoutube.py:172
 #: ../hosts/hostofficialfilmillimite.py:271
-#, fuzzy
 msgid "Duration:"
-msgstr "ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ:"
+msgstr "ÐÐ»Ð¸ÑÐµÐ»ÑÐ½Ð¾ÑÑÑ:"
 
 #: ../libs/youtubeparser.py:305 ../hosts/hostuktvplay.py:221
-#, fuzzy, python-format
+#, python-format
 msgid "Duration: %s"
-msgstr "Ð¡ÑÐ°Ð½ÑÐ¸Ð¸"
+msgstr "ÐÐ»Ð¸ÑÐµÐ»ÑÐ½Ð¾ÑÑÑ: %s"
 
 #: ../iptvupdate/updatemainwindow.py:85
 msgid "During processing, please do not interrupt."
@@ -1758,12 +1711,11 @@
 
 #: ../iptvupdate/updatemainwindow.py:86
 msgid "During processing, please wait."
-msgstr "ÐÐ´ÐµÑ Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÐ°, Ð¿Ð¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ."
+msgstr "ÐÐ´ÐµÑ Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÐ°. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ."
 
 #: ../components/iptvplayerwidget.py:727
-#, fuzzy
 msgid "E-mail: "
-msgstr "Ð­Ð». Ð°Ð´ÑÐµÑ"
+msgstr "Ð­Ð». Ð°Ð´ÑÐµÑ: "
 
 #: ../iptvupdate/updatemainwindow.py:340
 #, python-format
@@ -1771,35 +1723,33 @@
 "E2 GUI restart after IPTVPlayer update to version[%s].\n"
 "\n"
 msgstr ""
-"ÐÐµÑÐµÐ·Ð°Ð³ÑÑÐ·Ð¸ÑÑ eÐ½Ð¸Ð³Ð¼Ñ Ð¿Ð¾ÑÐ»Ðµ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ñ IPTV ÐÐ»ÐµÐµÑÐ° Ð´Ð¾ Ð²ÐµÑÑÐ¸Ð¸[%s].\n"
+"ÐÐµÑÐµÐ·Ð°Ð³ÑÑÐ·Ð¸ÑÑ Enigma Ð¿Ð¾ÑÐ»Ðµ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ñ IPTV-Ð¿Ð»ÐµÐµÑÐ° Ð´Ð¾ Ð²ÐµÑÑÐ¸Ð¸[%s].\n"
 "\n"
 
 #: ../components/iptvconfigmenu.py:343 ../components/configbase.py:82
 #: ../components/configbase.py:131
-#, fuzzy
 msgid "E2iPlayer - settings"
-msgstr "IPTV ÐÐ»ÐµÐµÑ - ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ¸"
+msgstr "E2iPlayer - Ð½Ð°ÑÑÑÐ¾Ð¹ÐºÐ¸"
 
 #: ../components/configgroups.py:37
 msgid "E2iPlayer enable/disabled groups"
-msgstr ""
+msgstr "E2iPlayer - Ð²ÐºÐ»ÑÑÐ¸ÑÑ/Ð¾ÑÐºÐ»ÑÑÐ¸ÑÑ Ð³ÑÑÐ¿Ð¿Ñ"
 
 #: ../Web/webParts.py:479 ../Web/webParts.py:521
-#, fuzzy
 msgid "ERROR:"
-msgstr "ÐÐ¨ÐÐÐÐ"
+msgstr "ÐÐ¨ÐÐÐÐ:"
 
 #: ../components/iptvextmovieplayer.py:1506
 msgid ""
 "ERROR: pipeline could not be constructed: no element \"playbin2\" \n"
 "Please check if gstreamer plugins are available in your system."
 msgstr ""
-"ÐÐ¨ÐÐÐÐ: ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ ÑÐ¾Ð·Ð´Ð°ÑÑ:, Ð¾ÑÑÑÑÑÑÐ²Ð¸Ðµ ÐºÐ¾Ð½ÑÑÐ¾Ð»Ñ: Ð¾ÑÑÑÑÑÑÐ²Ð¸Ðµ ÑÐ»ÐµÐ¼ÐµÐ½ÑÐ° \"playbin2 \" \n"
-"ÐÑÐ¾Ð²ÐµÑÑÑÐµ ÑÑÑÐ°Ð½Ð¾Ð²Ð»ÐµÐ½Ñ GStreamer Ð¿Ð»Ð°Ð³Ð¸Ð½Ñ Ð² Ð²Ð°ÑÐµÐ¹ ÑÐ¸ÑÑÐµÐ¼Ðµ."
+"ÐÐ¨ÐÐÐÐ: ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ ÑÐ¾Ð·Ð´Ð°ÑÑ:, Ð¾ÑÑÑÑÑÑÐ²Ð¸Ðµ ÐºÐ¾Ð½ÑÑÐ¾Ð»Ñ: Ð¾ÑÑÑÑÑÑÐ²Ð¸Ðµ ÑÐ»ÐµÐ¼ÐµÐ½ÑÐ° \"playbin2\".\n"
+"ÐÑÐ¾Ð²ÐµÑÑÑÐµ, ÑÑÑÐ°Ð½Ð¾Ð²Ð»ÐµÐ½ Ð»Ð¸ GStreamer Ð¿Ð»Ð°Ð³Ð¸Ð½ Ð² ÐÐ°ÑÐµÐ¹ ÑÐ¸ÑÑÐµÐ¼Ðµ."
 
 #: ../components/iptvplayerwidget.py:626 ../components/iptvplayerwidget.py:628
 msgid "Edit favourites"
-msgstr "Ð ÐµÐ´Ð°ÐºÑÐ¸ÑÐ¾Ð²Ð°ÑÑ Ð¸Ð·Ð±ÑÐ°Ð½Ð½Ð¾Ðµ"
+msgstr "Ð ÐµÐ´Ð°ÐºÑÐ¾Ñ Ð¸Ð·Ð±ÑÐ°Ð½Ð½Ð¾Ð³Ð¾"
 
 #: ../libs/ustvnow.py:40 ../libs/edemtv.py:42 ../hosts/hostrtlmost.py:49
 msgid "Email"
@@ -1807,7 +1757,7 @@
 
 #: ../Web/webThreads.py:215
 msgid "Enable"
-msgstr ""
+msgstr "ÐÐºÐ»ÑÑÐ¸ÑÑ"
 
 #: ../components/iptvfavouriteswidgets.py:193
 msgid "Enable reordering"
@@ -1823,6 +1773,8 @@
 "Encryption function body extraction failed!\n"
 "Please report the problem to %s"
 msgstr ""
+"ÐÑÐ¸Ð±ÐºÐ° Ð¸Ð·Ð²Ð»ÐµÑÐµÐ½Ð¸Ñ ÑÐµÐ»Ð° ÑÑÐ½ÐºÑÐ¸Ð¸ ÑÐ¸ÑÑÐ¾Ð²Ð°Ð½Ð¸Ñ!\n"
+"ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, ÑÐ¾Ð¾Ð±ÑÐ¸ÑÐµ Ð¾ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ðµ Ð² %s"
 
 #: ../libs/youtube_dl/extractor/youtube.py:131
 #, python-format
@@ -1830,17 +1782,18 @@
 "Encryption function name extraction failed!\n"
 "Please report the problem to %s"
 msgstr ""
+"ÐÑÐ¸Ð±ÐºÐ° Ð¸Ð·Ð²Ð»ÐµÑÐµÐ½Ð¸Ñ Ð¸Ð¼ÐµÐ½Ð¸ ÑÑÐ½ÐºÑÐ¸Ð¸ ÑÐ¸ÑÑÐ¾Ð²Ð°Ð½Ð¸Ñ!!\n"
+"ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, ÑÐ¾Ð¾Ð±ÑÐ¸ÑÐµ Ð¾ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ðµ Ð² %s"
 
 #: ../iptvupdate/updatemainwindow.py:978
-#, fuzzy
 msgid "Encryption key was downloaded successfully."
-msgstr "ÐÐ±Ð½Ð¾Ð²Ð»ÐµÐ½Ð½ÑÐ¹ Ð¿Ð°ÐºÐµÑ Ð±ÑÐ» ÑÑÐ¿ÐµÑÐ½Ð¾ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½."
+msgstr "ÐÐ»ÑÑ ÑÐ¸ÑÑÐ¾Ð²Ð°Ð½Ð¸Ñ Ð±ÑÐ» ÑÑÐ¿ÐµÑÐ½Ð¾ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½."
 
 #: ../hosts/hosthdfull.py:34 ../hosts/hostmediayou.py:28
 #: ../hosts/hostlaola1tv.py:31 ../hosts/hosttvjworg.py:30
 #: ../hosts/hostngolos.py:26
 msgid "English"
-msgstr "ÐÐ½Ð³Ð»Ð¸Ð¹ÑÐºÐ¸Ð¹"
+msgstr "ÐÐ½Ð³Ð»Ð¸Ð¹ÑÐºÐ¸Ðµ"
 
 #: ../components/configbase.py:291
 msgid "Enter a value"
@@ -1848,7 +1801,7 @@
 
 #: ../components/iptvdirbrowser.py:284
 msgid "Enter name"
-msgstr "ÐÐ²ÐµÐ´Ð¸ÑÐµ ÐºÐ¾Ð´"
+msgstr "ÐÐ²ÐµÐ´Ð¸ÑÐµ Ð¸Ð¼Ñ"
 
 #: ../components/iptvconfigmenu.py:740
 msgid "Enter new pin"
@@ -1867,61 +1820,58 @@
 
 #: ../components/e2ivk.py:327
 msgid "Enter the text"
-msgstr ""
+msgstr "ÐÐ²ÐµÐ´Ð¸ÑÐµ ÑÐµÐºÑÑ"
 
 #: ../hosts/hostkijknl.py:285
 msgid "Entitlement parsing error."
-msgstr ""
+msgstr "ÐÑÐ¸Ð±ÐºÐ° ÑÐ¸Ð½ÑÐ°ÐºÑÐ¸ÑÐµÑÐºÐ¾Ð³Ð¾ Ð°Ð½Ð°Ð»Ð¸Ð·Ð° Ð¿ÑÐ°Ð²."
 
 #: ../libs/moonwalkcc.py:302 ../libs/moonwalkcc.py:313
 #: ../hosts/hostdixmax.py:313 ../hosts/hostmediasetplay.py:618
 #: ../hosts/hostdplayit.py:249 ../subproviders/subprov_napiprojektpl.py:261
-#, fuzzy
 msgid "Episode"
-msgstr "Ð­Ð¿Ð¸Ð·Ð¾Ð´Ñ"
+msgstr "Ð­Ð¿Ð¸Ð·Ð¾Ð´"
 
 #: ../hosts/hostwatchcartoononline.py:364
-#, fuzzy
 msgid "Episode Search"
-msgstr "Ð­Ð¿Ð¸Ð·Ð¾Ð´Ñ"
+msgstr "ÐÐ¾Ð¸ÑÐº ÑÐ¿Ð¸Ð·Ð¾Ð´Ð°"
 
 #: ../hosts/hostcartoonhd.py:531
-#, fuzzy
 msgid "Episode title"
-msgstr "Ð­Ð¿Ð¸Ð·Ð¾Ð´Ñ"
+msgstr "ÐÐ°Ð·Ð²Ð°Ð½Ð¸Ðµ ÑÐ¿Ð¸Ð·Ð¾Ð´Ð°"
 
 #: ../hosts/hostgledalica.py:264 ../hosts/hostkijknl.py:62
 msgid "Episodes"
 msgstr "Ð­Ð¿Ð¸Ð·Ð¾Ð´Ñ"
 
 #: ../hosts/hostlocalmedia.py:695
-#, fuzzy, python-format
+#, python-format
 msgid "Error code: %s\n"
-msgstr "Ð Ð°ÑÐ¿Ð°ÐºÑÐ¹ÑÐµ ÐºÐ¾Ð´ Ð¾ÑÐ¸Ð±ÐºÐ¸[%s]."
+msgstr "ÐÐ¾Ð´ Ð¾ÑÐ¸Ð±ÐºÐ¸: %s\n"
 
 #: ../components/recaptcha_mye2i_widget.py:136
 #: ../components/recaptcha_v2myjd_widget.py:136
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Error code: %s\n"
 "Error message: %s"
 msgstr ""
-"Ð¡Ð¾Ð¾Ð±ÑÐµÐ½Ð¸Ðµ Ð¾Ð± Ð¾ÑÐ¸Ð±ÐºÐµ: \"%s\".\n"
-"ÐÐ¾Ð´ Ð¾ÑÐ¸Ð±ÐºÐ¸: \"%s\"."
+"ÐÐ¾Ð´ Ð¾ÑÐ¸Ð±ÐºÐ¸: %s\n"
+"Ð¡Ð¾Ð¾Ð±ÑÐµÐ½Ð¸Ðµ Ð¾Ð± Ð¾ÑÐ¸Ð±ÐºÐµ: %s"
 
 #: ../hosts/hosteurosportplayer.py:510 ../hosts/hostfilmynadzis.py:77
 #: ../hosts/hostbbcsport.py:439
 msgid "Error communicating with the server."
-msgstr ""
+msgstr "ÐÑÐ¸Ð±ÐºÐ° ÑÐ¾ÐµÐ´Ð¸Ð½ÐµÐ½Ð¸Ñ Ñ ÑÐµÑÐ²ÐµÑÐ¾Ð¼."
 
 #: ../tools/iptvfavourites.py:245
-#, fuzzy, python-format
+#, python-format
 msgid "Error deleting file \"%s\".\n"
-msgstr "ÐÑÐ¸Ð±ÐºÐ° ÑÐ´Ð°Ð»ÐµÐ½Ð¸Ñ ÑÐ°Ð¹Ð»Ð¾Ð² \"%s\" .\n"
+msgstr "ÐÑÐ¸Ð±ÐºÐ° ÑÐ´Ð°Ð»ÐµÐ½Ð¸Ñ ÑÐ°Ð¹Ð»Ð° \"%s\".\n"
 
 #: ../Web/webParts.py:116
 msgid "Error during deletion of the debug file."
-msgstr ""
+msgstr "ÐÑÐ¸Ð±ÐºÐ° Ð²Ð¾ Ð²ÑÐµÐ¼Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸."
 
 #: ../subproviders/subprov_opensubtitlesorg.py:209
 #: ../subproviders/subprov_opensubtitlesorg.py:211
@@ -1934,33 +1884,28 @@
 "ÐÐ¾Ð´ Ð¾ÑÐ¸Ð±ÐºÐ¸: \"%s\"."
 
 #: ../hosts/hostlocalmedia.py:695
-#, fuzzy, python-format
+#, python-format
 msgid "Error message: %s\n"
-msgstr ""
-"Ð¡Ð¾Ð¾Ð±ÑÐµÐ½Ð¸Ðµ Ð¾Ð± Ð¾ÑÐ¸Ð±ÐºÐµ: \"%s\".\n"
-"ÐÐ¾Ð´ Ð¾ÑÐ¸Ð±ÐºÐ¸: \"%s\"."
+msgstr "Ð¡Ð¾Ð¾Ð±ÑÐµÐ½Ð¸Ðµ Ð¾Ð± Ð¾ÑÐ¸Ð±ÐºÐµ: %s\n"
 
 #: ../components/e2ivksuggestion.py:101
-#, fuzzy
 msgid "Error occurs"
-msgstr ""
-"ÐÑÐ¾Ð¸Ð·Ð¾ÑÐ»Ð° Ð¾ÑÐ¸Ð±ÐºÐ°.\n"
-"[%s]"
+msgstr "ÐÑÐ¾Ð¸Ð·Ð¾ÑÐ»Ð° Ð¾ÑÐ¸Ð±ÐºÐ°"
 
 #: ../iptvdm/iptvbuffui.py:258 ../iptvdm/iptvbuffui.py:584
 msgid "Error occurs during download."
-msgstr "ÐÑÐ¸Ð±ÐºÐ° Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸."
+msgstr "ÐÑÐ¸Ð±ÐºÐ° Ð²Ð¾ Ð²ÑÐµÐ¼Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸."
 
 #: ../tools/iptvfavourites.py:214 ../tools/iptvfavourites.py:231
-#, fuzzy, python-format
+#, python-format
 msgid "Error reading file \"%s\".\n"
-msgstr "ÐÑÐ¸Ð±ÐºÐ° ÑÑÐµÐ½Ð¸Ñ ÑÐ°Ð¹Ð»Ð° \"%s\" .\n"
+msgstr "ÐÑÐ¸Ð±ÐºÐ° ÑÑÐµÐ½Ð¸Ñ ÑÐ°Ð¹Ð»Ð° \"%s\".\n"
 
 #: ../tools/iptvfavourites.py:262 ../tools/iptvfavourites.py:277
 #: ../tools/iptvhostgroups.py:209 ../tools/iptvhostgroups.py:294
-#, fuzzy, python-format
+#, python-format
 msgid "Error writing file \"%s\".\n"
-msgstr "ÐÑÐ¸Ð±ÐºÐ° Ð·Ð°Ð¿Ð¸ÑÐ¸ ÑÐ°Ð¹Ð»Ð° \"%s\" .\n"
+msgstr "ÐÑÐ¸Ð±ÐºÐ° Ð·Ð°Ð¿Ð¸ÑÐ¸ ÑÐ°Ð¹Ð»Ð° \"%s\".\n"
 
 #: ../iptvupdate/updatemainwindow.py:1030
 #, python-format
@@ -1968,10 +1913,12 @@
 "Error. Return code [%d]\n"
 "%s."
 msgstr ""
+"ÐÑÐ¸Ð±ÐºÐ°. ÐÐ¾Ð´ Ð²Ð¾Ð·Ð²ÑÐ°ÑÐ° [%d]\n"
+"%s."
 
 #: ../components/iptvdirbrowser.py:293
 msgid "Exception occurs"
-msgstr ""
+msgstr "ÐÑÐ¾Ð¸Ð·Ð¾Ð»Ð¾ Ð¸ÑÐºÐ»ÑÑÐµÐ½Ð¸Ðµ"
 
 #: ../iptvupdate/updatemainwindow.py:397
 msgid "Executing user scripts."
@@ -1983,29 +1930,27 @@
 
 #: ../components/iptvconfigmenu.py:533
 msgid "External movie player config"
-msgstr "ÐÐ°ÑÐ°Ð¼ÐµÑÑÑ Ð²Ð½ÐµÑÐ½ÐµÐ³Ð¾ Ð¿Ð»ÐµÐµÑÐ° (ÐÐ°Ð¶Ð¼Ð¸ÑÐµ OK)"
+msgstr "ÐÐ°ÑÐ°Ð¼ÐµÑÑÑ Ð²Ð½ÐµÑÐ½ÐµÐ³Ð¾ Ð¿Ð»ÐµÐµÑÐ° (Ð½Ð°Ð¶Ð¼Ð¸ÑÐµ OK)"
 
 #: ../iptvupdate/updatemainwindow.py:395
 msgid "Extracting an update packet."
 msgstr "ÐÐ·Ð²Ð»ÐµÑÐµÐ½Ð¸Ðµ Ð¿Ð°ÐºÐµÑÐ° Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ñ."
 
 #: ../iptvupdate/updatemainwindow.py:889
-#, fuzzy
 msgid "Extracting graphics package."
-msgstr "ÐÐ·Ð²Ð»ÐµÑÐµÐ½Ð¸Ðµ Ð¿Ð°ÐºÐµÑÐ° Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ñ."
+msgstr "ÐÐ·Ð²Ð»ÐµÑÐµÐ½Ð¸Ðµ Ð³ÑÐ°ÑÐ¸ÑÐµÑÐºÐ¾Ð³Ð¾ Ð¿Ð°ÐºÐµÑÐ°."
 
 #: ../iptvupdate/updatemainwindow.py:901
-#, fuzzy
 msgid "Extracting icons package."
-msgstr "ÐÐ·Ð²Ð»ÐµÑÐµÐ½Ð¸Ðµ Ð¿Ð°ÐºÐµÑÐ° Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ñ."
+msgstr "ÐÐ·Ð²Ð»ÐµÑÐµÐ½Ð¸Ðµ Ð¿Ð°ÐºÐµÑÐ° Ð·Ð½Ð°ÑÐºÐ¾Ð²."
 
 #: ../hosts/hostfilmstreamhdit.py:37
 msgid "FILM ARCHIVE"
-msgstr ""
+msgstr "ÐÐ Ð¥ÐÐ Ð¤ÐÐÐ¬ÐÐ"
 
 #: ../libs/filmonapi.py:95
 msgid "FREE"
-msgstr ""
+msgstr "ÐÐÐ¡ÐÐÐÐ¢ÐÐ«Ð"
 
 #: ../libs/recaptcha_v1.py:37 ../libs/recaptcha_v1.py:64
 #: ../libs/urlparser.py:4426 ../libs/recaptcha_v2.py:35
@@ -2015,9 +1960,9 @@
 #: ../hosts/hoststreamliveto.py:295 ../hosts/hoststreamliveto.py:308
 #: ../hosts/hoststreamliveto.py:322 ../hosts/hoststreamliveto.py:352
 #: ../hosts/hostserienstreamto.py:571
-#, fuzzy, python-format
+#, python-format
 msgid "Fail to get \"%s\"."
-msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¿Ð¾Ð»ÑÑÐ¸ÑÑ \"%s\""
+msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¿Ð¾Ð»ÑÑÐ¸ÑÑ \"%s\"."
 
 #: ../hosts/hoststreamliveto.py:287
 msgid "Fail to get captcha data."
@@ -2025,16 +1970,16 @@
 
 #: ../subproviders/subprov_opensubtitlesorg2.py:138
 #: ../subproviders/subprov_napisy24pl.py:84
-#, fuzzy, python-format
+#, python-format
 msgid "Failed to connect to server \"%s\"."
-msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¾ÑÐºÑÑÑÑ ÑÐ°Ð¹Ð» \"%s\"."
+msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¿Ð¾Ð´ÐºÐ»ÑÑÐ¸ÑÑÑÑ Ðº ÑÐµÑÐ²ÐµÑÑ \"%s\"."
 
 #: ../components/isubprovider.py:631
 #: ../subproviders/subprov_popcornsubtitles.py:158
 #: ../subproviders/subprov_napisy24pl.py:384
 #, python-format
 msgid "Failed to convert the file \"%s\" to UTF-8."
-msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¿ÑÐµÐ¾Ð±ÑÐ°Ð·Ð¾Ð²Ð°ÑÑ ÑÐ°Ð¹Ð»Ñ \"%s\" Ð² UTF-8."
+msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¿ÑÐµÐ¾Ð±ÑÐ°Ð·Ð¾Ð²Ð°ÑÑ ÑÐ°Ð¹Ð» \"%s\" Ð² UTF-8."
 
 #: ../components/isubprovider.py:557
 #, python-format
@@ -2056,13 +2001,13 @@
 #: ../subproviders/subprov_opensubtitlesorg.py:379
 #: ../subproviders/subprov_opensubtitlesorg3.py:293
 msgid "Failed to gzip."
-msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ gzip."
+msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð²ÑÐ¿Ð¾Ð»Ð½Ð¸ÑÑ gzip."
 
 #: ../subproviders/subprov_opensubtitlesorg2.py:164
 #: ../subproviders/subprov_napisy24pl.py:98
 #, python-format
 msgid "Failed to log in user \"%s\". Please check your login and password."
-msgstr ""
+msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð²Ð¾Ð¹ÑÐ¸ Ð² ÑÐ¸ÑÑÐµÐ¼Ñ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ \"%s\". ÐÑÐ¾Ð²ÐµÑÑÑÐµ ÑÐ²Ð¾Ð¹ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ."
 
 #: ../components/isubprovider.py:634
 #: ../subproviders/subprov_popcornsubtitles.py:161
@@ -2072,9 +2017,8 @@
 msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¾ÑÐºÑÑÑÑ ÑÐ°Ð¹Ð» \"%s\"."
 
 #: ../subproviders/subprov_popcornsubtitles.py:103
-#, fuzzy
 msgid "Failed to page with subtitle link."
-msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð·Ð°Ð³ÑÑÐ·Ð¸ÑÑ ÑÑÐ±ÑÐ¸ÑÑÑ."
+msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ ÑÐ¾Ð·Ð´Ð°ÑÑ ÑÑÑÐ°Ð½Ð¸ÑÑ ÑÐ¾ ÑÑÑÐ»ÐºÐ¾Ð¹ Ð½Ð° ÑÑÐ±ÑÐ¸ÑÑÑ."
 
 #: ../components/isubprovider.py:518
 #: ../subproviders/subprov_popcornsubtitles.py:118
@@ -2092,9 +2036,9 @@
 msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð·Ð°Ð¿Ð¸ÑÐ°ÑÑ ÑÐ°Ð¹Ð» \"%s\"."
 
 #: ../components/iptvplayerwidget.py:1531
-#, fuzzy, python-format
+#, python-format
 msgid "Failed: %s"
-msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¿Ð¾Ð»ÑÑÐ¸ÑÑ \"%s\""
+msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ: %s"
 
 #: ../setup/iptvsetupimpl.py:359
 msgid ""
@@ -2114,26 +2058,25 @@
 
 #: ../components/iptvextmovieplayer.py:2273
 msgid "Fatal error: consoleWrite failed!"
-msgstr "Ð¤Ð°ÑÐ°Ð»ÑÐ½Ð°Ñ Ð¾ÑÐ¸Ð±ÐºÐ°: ÐÐ¾Ð½ÑÐ¾Ð»Ñ Ð·Ð°Ð¿Ð¸ÑÐ¸ Ð¿ÑÐ¾Ð¸Ð·Ð¾ÑÐµÐ» ÑÐ±Ð¾Ð¹!"
+msgstr "Ð¤Ð°ÑÐ°Ð»ÑÐ½Ð°Ñ Ð¾ÑÐ¸Ð±ÐºÐ°: Ð¿ÑÐ¾Ð¸Ð·Ð¾ÑÐµÐ» ÑÐ±Ð¾Ð¹ Ð·Ð°Ð¿Ð¸ÑÐ¸ Ð² ÐºÐ¾Ð½ÑÐ¾Ð»Ñ!"
 
 #: ../hosts/hostfavourites.py:42
-#, fuzzy
 msgid "Favourites"
 msgstr "ÐÐ·Ð±ÑÐ°Ð½Ð½Ð¾Ðµ"
 
 #: ../components/iptvfavouriteswidgets.py:197
 #: ../components/iptvfavouriteswidgets.py:287
 msgid "Favourites groups"
-msgstr "ÐÑÑÐ¿Ð¿Ð° ÐÐ·Ð±ÑÐ°Ð½Ð½Ð¾Ðµ"
+msgstr "ÐÐ·Ð±ÑÐ°Ð½Ð½ÑÐµ Ð³ÑÑÐ¿Ð¿Ñ"
 
 #: ../components/iptvfavouriteswidgets.py:173
 msgid "Favourites manager"
-msgstr "ÐÐ·Ð±ÑÐ°Ð½Ð½Ð¾Ðµ Ð¼ÐµÐ½ÐµÐ´Ð¶ÐµÑ"
+msgstr "ÐÐµÐ½ÐµÐ´Ð¶ÐµÑ Ð¸Ð·Ð±ÑÐ°Ð½Ð½Ð¾Ð³Ð¾"
 
 #: ../hosts/hostlocalmedia.py:678
-#, fuzzy, python-format
+#, python-format
 msgid "File \"%s\" already exists"
-msgstr "Ð¤Ð°Ð¹Ð» \"%s\" ÑÐ¶Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ!"
+msgstr "Ð¤Ð°Ð¹Ð» \"%s\" ÑÐ¶Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ"
 
 #: ../hosts/hostlocalmedia.py:661
 #, python-format
@@ -2141,9 +2084,8 @@
 msgstr "Ð¤Ð°Ð¹Ð» \"%s\" ÑÐ¶Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ!"
 
 #: ../libs/urlparser.py:2920
-#, fuzzy
 msgid "File Not Found."
-msgstr "Ð¡ÑÐ±ÑÐ¸ÑÑÑ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ñ."
+msgstr "Ð¤Ð°Ð¹Ð» Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½."
 
 #: ../iptvupdate/updatemainwindow.py:329
 #, python-format
@@ -2153,7 +2095,7 @@
 #: ../components/iptvplayerwidget.py:1804
 #, python-format
 msgid "File [%s] was added to downloading queue."
-msgstr "Ð¤Ð°Ð¹Ð» [%s] Ð±ÑÐ» Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½ Ð² Ð·Ð°Ð³ÑÑÐ·ÐºÑ."
+msgstr "Ð¤Ð°Ð¹Ð» [%s] Ð±ÑÐ» Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½ Ð² Ð¾ÑÐµÑÐµÐ´Ñ Ð·Ð°Ð³ÑÑÐ·Ð¾Ðº."
 
 #: ../components/iptvplayerwidget.py:1798
 #, python-format
@@ -2161,44 +2103,44 @@
 msgstr "Ð¤Ð°Ð¹Ð» Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½. ÐÑÐ¾ÑÐ¾ÐºÐ¾Ð» [%s] Ð½Ðµ Ð¿Ð¾Ð´Ð´ÐµÑÐ¶Ð¸Ð²Ð°ÐµÑÑÑ"
 
 #: ../iptvupdate/updatemainwindow.py:751
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "File not found:\n"
 "[%s]."
-msgstr "Ð¡ÑÐ±ÑÐ¸ÑÑÑ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ñ."
+msgstr "Ð¤Ð°Ð¹Ð» Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½:\n"
+"[%s]."
 
 #: ../suggestions/filmstarts.py:22
 msgid "Filmstarts Suggestions"
-msgstr ""
+msgstr "ÐÑÐµÐ´Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ Ð¿Ð¾ ÑÐ¸Ð»ÑÐ¼Ð°Ð¼"
 
 #: ../suggestions/filmweb.py:21
 msgid "Filmweb Suggestions"
-msgstr ""
+msgstr "ÐÑÐµÐ´Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ Ð¿Ð¾ ÑÐ¸Ð»ÑÐ¼Ñ"
 
 #: ../hosts/hostzaluknijcc.py:71
-#, fuzzy
 msgid "Filter By Year"
-msgstr "ÐÐ¾ Ð³Ð¾Ð´Ð°Ð¼"
+msgstr "Ð¤Ð¸Ð»ÑÑÑ Ð¿Ð¾ Ð³Ð¾Ð´Ñ"
 
 #: ../hosts/hostnuteczki.py:95 ../hosts/hostcimaclubcom.py:147
 msgid "Filters"
-msgstr ""
+msgstr "Ð¤Ð¸Ð»ÑÑÑÑ"
 
 #: ../components/iptvconfigmenu.py:480 ../components/iptvconfigmenu.py:491
 #: ../components/iptvconfigmenu.py:502 ../components/iptvconfigmenu.py:513
 #: ../components/iptvconfigmenu.py:523
 msgid "First movie player in buffering mode"
-msgstr "ÐÑÐ±Ð¾Ñ ÐÐµÑÐ²Ð¾Ð³Ð¾ Ð¿Ð»ÐµÐµÑÐ° Ñ ÑÐµÐ¶Ð¸Ð¼Ð¾Ð¼ Ð±ÑÑÐµÑÐ¸Ð·Ð°ÑÐ¸Ð¸"
+msgstr "ÐÐµÑÐ²ÑÐ¹ Ð¿Ð»ÐµÐµÑ Ð² ÑÐµÐ¶Ð¸Ð¼Ðµ Ð±ÑÑÐµÑÐ¸Ð·Ð°ÑÐ¸Ð¸"
 
 #: ../components/iptvconfigmenu.py:475 ../components/iptvconfigmenu.py:486
 #: ../components/iptvconfigmenu.py:497 ../components/iptvconfigmenu.py:508
 #: ../components/iptvconfigmenu.py:518
 msgid "First movie player without buffering mode"
-msgstr "ÐÑÐ±Ð¾Ñ ÐÐµÑÐ²Ð¾Ð³Ð¾ Ð¿Ð»ÐµÐµÑÐ°"
+msgstr "ÐÐµÑÐ²ÑÐ¹ Ð¿Ð»ÐµÐµÑ Ð±ÐµÐ· ÑÐµÐ¶Ð¸Ð¼Ð° Ð±ÑÑÐµÑÐ¸Ð·Ð°ÑÐ¸Ð¸"
 
 #: ../setup/iptvsetupimpl.py:1263
 msgid "Fluendo mpegdemux for GSTREAMER 0.10"
-msgstr "Ð¡Ð´ÐµÐ»Ð°ÑÑ ÑÐµÐºÑÑÐ¸Ð¹ mpegdemux Ð´Ð»Ñ GSTREAMER 0.10"
+msgstr "Fluendo mpegdemux Ð´Ð»Ñ GSTREAMER 0.10"
 
 #: ../components/iptvconfigmenu.py:425
 msgid "Folder for cache data"
@@ -2211,7 +2153,7 @@
 #: ../components/iptvplayerwidget.py:1279
 #: ../components/iptvplayerwidget.py:1351
 msgid "Following host are broken or additional python modules are needed."
-msgstr "Ð¥Ð¾ÑÑ Ð½Ðµ ÑÐ°Ð±Ð¾ÑÐ°ÐµÑ, Ð¸Ð»Ð¸ Ð½Ðµ ÑÐ²Ð°ÑÐ°ÐµÑ Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½ÑÑ Ð¼Ð¾Ð´ÑÐ»ÐµÐ¹ Python."
+msgstr "Ð¡Ð»ÐµÐ´ÑÑÑÐ¸Ð¹ ÑÐ¾ÑÑ Ð½Ðµ ÑÐ°Ð±Ð¾ÑÐ°ÐµÑ Ð¸Ð»Ð¸ Ð½ÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼Ñ Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½ÑÐµ Ð¼Ð¾Ð´ÑÐ»Ð¸ Python."
 
 #: ../components/iptvplayerwidget.py:1685
 msgid "Format 'wmv' blocked in configuration."
@@ -2220,11 +2162,11 @@
 #: ../hosts/hoststreamliveto.py:141 ../hosts/hosttvplayercom.py:135
 #: ../hosts/hostekstraklasatv.py:170
 msgid "Free"
-msgstr ""
+msgstr "Ð¡Ð²Ð¾Ð±Ð¾Ð´Ð½ÑÐ¹"
 
 #: ../hosts/hostmediayou.py:28
 msgid "French"
-msgstr "Ð¤ÑÐ°Ð½ÑÐ¸Ñ"
+msgstr "Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÐ¸Ðµ"
 
 #: ../components/configextmovieplayer.py:87
 #: ../components/configextmovieplayer.py:100
@@ -2236,7 +2178,7 @@
 
 #: ../hosts/host123movieshd.py:191
 msgid "Functionality protected by Google reCAPTCHA!"
-msgstr ""
+msgstr "Ð¤ÑÐ½ÐºÑÐ¸Ð¾Ð½Ð°Ð»ÑÐ½Ð¾ÑÑÑ Ð·Ð°ÑÐ¸ÑÐµÐ½Ð° Google reCAPTCHA!"
 
 #: ../setup/iptvsetupimpl.py:1315
 msgid "GST-IFDSRC for GSTREAMER 1.X"
@@ -2244,12 +2186,12 @@
 
 #: ../components/configextmovieplayer.py:379
 msgid "GSTplayer no IFD workarround"
-msgstr ""
+msgstr "GST Ð¿Ð»ÐµÐµÑ Ð½Ðµ Ð² IFD Ð¾ÐºÑÑÐ¶ÐµÐ½Ð¸Ð¸"
 
 #: ../hosts/hosttwitchtv.py:501
-#, fuzzy, python-format
+#, python-format
 msgid "Game: %s"
-msgstr "ÐÐ³ÑÑ"
+msgstr "ÐÐ³ÑÑ: %s"
 
 #: ../hosts/hostyoutube.py:184 ../hosts/hosttwitchtv.py:156
 #: ../hosts/hosttwitchtv.py:656
@@ -2261,18 +2203,17 @@
 msgstr "ÐÑÐ±Ð¾Ñ Ð¶Ð°Ð½ÑÐ°"
 
 #: ../hosts/hostappletrailers.py:104 ../hosts/hostddl.py:575
-#, fuzzy
 msgid "Genre:"
-msgstr "ÐÐ°Ð½Ñ: "
+msgstr "ÐÐ°Ð½Ñ:"
 
 #: ../hosts/hostgamatocom.py:76
 msgid "Genre: "
 msgstr "ÐÐ°Ð½Ñ: "
 
 #: ../hosts/hostshoutcast.py:132
-#, fuzzy, python-format
+#, python-format
 msgid "Genre: %s"
-msgstr "ÐÐ°Ð½Ñ: "
+msgstr "ÐÐ°Ð½Ñ: %s"
 
 #: ../hosts/hostplayzcc.py:242 ../hosts/hostzaluknijcc.py:297
 #: ../hosts/hostthewatchseriesto.py:53 ../hosts/hostanimeodcinki.py:47
@@ -2283,9 +2224,8 @@
 
 #: ../hosts/hostfilma24io.py:257 ../hosts/hostappletrailers.py:104
 #: ../hosts/hostddl.py:577 ../hosts/hostofficialfilmillimite.py:281
-#, fuzzy
 msgid "Genres:"
-msgstr "ÐÐ°Ð½ÑÑ"
+msgstr "ÐÐ°Ð½ÑÑ:"
 
 #: ../hosts/hostdrdk.py:30
 msgid "Geolocation IP:"
@@ -2293,11 +2233,11 @@
 
 #: ../hosts/hostardmediathek.py:469
 msgid "German"
-msgstr "ÐÐµÑÐ¼Ð°Ð½Ð¸Ñ"
+msgstr "ÐÐµÐ¼ÐµÑÐºÐ¸Ðµ"
 
 #: ../components/iptvconfigmenu.py:421
 msgid "German proxy server url"
-msgstr "ÐÐ´ÑÐµÑ Ð½ÐµÐ¼ÐµÑÐºÐ¾Ð³Ð¾ Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐµÑÐ²ÐµÑ"
+msgstr "ÐÐ´ÑÐµÑ Ð½ÐµÐ¼ÐµÑÐºÐ¾Ð³Ð¾ Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐµÑÐ²ÐµÑÐ°"
 
 #: ../libs/ustvnow.py:43
 msgid "Get EPG"
@@ -2305,28 +2245,24 @@
 
 #: ../iptvupdate/updatemainwindow.py:916
 msgid "Get decryption key."
-msgstr ""
+msgstr "ÐÐ¾Ð»ÑÑÐ¸ÑÑ ÐºÐ»ÑÑ ÑÐ°ÑÑÐ¸ÑÑÐ¾Ð²ÐºÐ¸."
 
 #: ../subproviders/subprov_opensubtitlesorg.py:236
 msgid "Get languages failed!"
 msgstr "ÐÐ¾Ð»ÑÑÐ¸ÑÑ ÑÐ·ÑÐºÐ¸ Ð½Ðµ ÑÐ´Ð°Ð»Ð¾ÑÑ!"
 
 #: ../subproviders/subprov_opensubtitlesorg.py:209
-#, fuzzy
 msgid "Get token failed!"
-msgstr "ÐÐ¾Ð»ÑÑÐ¸ÑÑ ÑÐ·ÑÐºÐ¸ Ð½Ðµ ÑÐ´Ð°Ð»Ð¾ÑÑ!"
+msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¿Ð¾Ð»ÑÑÐ¸ÑÑ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ!"
 
 #: ../iptvupdate/updatemainwindow.py:746
-#, fuzzy, python-brace-format
+#, python-brace-format
 msgid "GitLab version from {0} was downloaded successfully."
-msgstr "ÐÐ±Ð½Ð¾Ð²Ð»ÐµÐ½Ð½ÑÐ¹ Ð¿Ð°ÐºÐµÑ Ð±ÑÐ» ÑÑÐ¿ÐµÑÐ½Ð¾ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½."
+msgstr "ÐÐµÑÑÐ¸Ñ GitLab Ð¸Ð· {0} Ð±ÑÐ»Ð° ÑÑÐ¿ÐµÑÐ½Ð¾ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½Ð°."
 
 #: ../components/captcha_helper.py:67
-#, fuzzy
 msgid "Go to the host configuration available under blue button."
-msgstr ""
-"Ð­ÑÐ¾Ñ ÑÐ·ÐµÐ» ÑÑÐµÐ±ÑÐµÑ ÑÐµÐ³Ð¸ÑÑÑÐ°ÑÐ¸Ð¸. \n"
-"ÐÐ°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ ÑÐ²Ð¾Ð¹ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ ÑÐ¾ÑÑ. ÐÐ¾ÑÑÑÐ¿ÐµÐ½ Ð¿Ð¾Ð´ ÑÐ¸Ð½ÑÑ ÐºÐ½Ð¾Ð¿ÐºÑ."
+msgstr "ÐÐµÑÐµÐ¹Ð´Ð¸ÑÐµ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ñ ÑÐ¾ÑÑÐ°, Ð´Ð¾ÑÑÑÐ¿Ð½ÑÑ Ð¿Ð¾ ÑÐ¸Ð½ÐµÐ¹ ÐºÐ½Ð¾Ð¿ÐºÐµ."
 
 #: ../hosts/hostourmatchnet.py:42
 msgid "Goal Of The Month"
@@ -2334,11 +2270,11 @@
 
 #: ../suggestions/google.py:22
 msgid "Google Suggestions"
-msgstr ""
+msgstr "ÐÑÐµÐ´Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ Google"
 
 #: ../components/iptvconfigmenu.py:75 ../components/iptvconfigmenu.py:406
 msgid "Graphic services selector"
-msgstr "Ð¡ÐµÐ»ÐµÐºÑÐ¾Ñ ÐÑÐ°ÑÐ¸ÑÐµÑÐºÐ¸Ðµ ÑÑÐ»ÑÐ³Ð¸"
+msgstr "ÐÑÐ°ÑÐ¸ÑÐµÑÐºÐ¸Ð¹ ÑÐµÐ»ÐµÐºÑÐ¾Ñ ÑÐµÑÐ²Ð¸ÑÐ¾Ð²"
 
 #: ../components/iptvfavouriteswidgets.py:62 ../tools/iptvfavourites.py:97
 #, python-format
@@ -2352,7 +2288,7 @@
 
 #: ../hosts/hosturllist.py:34
 msgid "Group links into categories: "
-msgstr "ÐÑÑÐ¿Ð¿Ð°, ÑÑÑÐ»ÐºÐ¸ Ð¿Ð¾ ÐºÐ°ÑÐµÐ³Ð¾ÑÐ¸ÑÐ¼: "
+msgstr "ÐÑÑÐ¿Ð¿Ð¾Ð²ÑÐµ ÑÑÑÐ»ÐºÐ¸ Ð² ÐºÐ°ÑÐµÐ³Ð¾ÑÐ¸ÑÑ: "
 
 #: ../tools/iptvfavourites.py:197
 #, python-format
@@ -2360,58 +2296,57 @@
 msgstr "ÐÑÑÐ¿Ð¿Ð° Ñ Ð¸Ð´ÐµÐ½ÑÐ¸ÑÐ¸ÐºÐ°ÑÐ¾ÑÐ¾Ð¼[%s] Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð°."
 
 #: ../hosts/hostvimeo.py:429
-#, fuzzy
 msgid "Groups"
-msgstr "ÐÑÑÐ¿Ð¿Ð°"
+msgstr "ÐÑÑÐ¿Ð¿Ñ"
 
 #: ../libs/videostar.py:180
 #, python-format
 msgid "Guest timeout: %s"
-msgstr ""
+msgstr "Ð¢Ð°Ð¹Ð¼-Ð°ÑÑ Ð³Ð¾ÑÑÑ: %s"
 
 #: ../hosts/hosthdfull.py:63
 msgid "HDFull Suggestions"
-msgstr ""
+msgstr "ÐÑÐµÐ´Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ HDFull"
 
 #: ../libs/youtube_dl/extractor/bbc.py:26 ../hosts/hostsvtplayse.py:39
 #: ../hosts/hosttvnowde.py:28
 msgid "HLS/m3u8"
-msgstr ""
+msgstr "HLS/m3u8"
 
 #: ../hosts/hostfilmstreamhdit.py:36
 msgid "HOME"
-msgstr ""
+msgstr "ÐÐÐÐÐ"
 
 #: ../libs/pCommon.py:412
 #, python-format
 msgid "HTTPS connection error \"%s\"\n"
-msgstr ""
+msgstr "ÐÑÐ¸Ð±ÐºÐ° Ð¿Ð¾Ð´ÐºÐ»ÑÑÐµÐ½Ð¸Ñ HTTPS \"%s\"\n"
 
 #: ../components/iptvconfigmenu.py:57
 msgid "Hardware floating point"
-msgstr ""
+msgstr "ÐÐ¿Ð¿Ð°ÑÐ°ÑÐ½Ð°Ñ Ð¿Ð»Ð°Ð²Ð°ÑÑÐ°Ñ ÑÐ¾ÑÐºÐ°"
 
 #: ../components/playerselector.py:489
 #, python-format
 msgid "Hide \"%s\" group"
-msgstr ""
+msgstr "Ð¡ÐºÑÑÑÑ Ð³ÑÑÐ¿Ð¿Ñ \"%s\""
 
 #: ../hosts/hostlaola1tv.py:28
 msgid "High"
-msgstr ""
+msgstr "ÐÑÑÐ¾ÐºÐ¸Ð¹"
 
 #: ../libs/weebtv.py:32
 msgid "High (or HD)"
-msgstr "ÐÑÑÐ¾ÐºÐ¸Ð¹ (Ð¸Ð»Ð¸ HD)"
+msgstr "ÐÑÑÐ¾ÐºÐ¾Ðµ Ð¸Ð»Ð¸ HD"
 
 #: ../hosts/hostogladajto.py:94 ../hosts/hostbbciplayer.py:200
 #: ../hosts/hosttwitchtv.py:112
 msgid "Highlights"
-msgstr ""
+msgstr "ÐÑÐ¾Ð±ÐµÐ½Ð½Ð¾ÑÑÐ¸"
 
 #: ../hosts/hostyoutube.py:65
 msgid "History of searched phrases."
-msgstr "ÐÑÑÐ¾ÑÐ¸Ñ Ð¿Ð¾Ð¸ÑÐºÐ°."
+msgstr "ÐÑÑÐ¾ÑÐ¸Ñ Ð½Ð°Ð¹Ð´ÐµÐ½Ð½ÑÑ ÑÑÐ°Ð·."
 
 #: ../hosts/hostkisscartoonme.py:48 ../hosts/host9anime.py:46
 #: ../hosts/hostfilmezz.py:69 ../hosts/hostourmatchnet.py:37
@@ -2424,14 +2359,14 @@
 msgstr "ÐÐ»Ð°Ð²Ð½Ð°Ñ ÑÑÑÐ°Ð½Ð¸ÑÐ°"
 
 #: ../libs/urlparser.py:828
-#, fuzzy, python-format
+#, python-format
 msgid "Hosting \"%s\" not supported."
-msgstr "ÐÐ¾ÑÐ¾Ðº Silverlight Ð½Ðµ Ð¿Ð¾Ð´Ð´ÐµÑÐ¶Ð¸Ð²Ð°ÐµÑÑÑ."
+msgstr "Ð¥Ð¾ÑÑÐ¸Ð½Ð³ \"%s\" Ð½Ðµ Ð¿Ð¾Ð´Ð´ÐµÑÐ¶Ð¸Ð²Ð°ÐµÑÑÑ."
 
 #: ../libs/urlparser.py:830
-#, fuzzy, python-format
+#, python-format
 msgid "Hosting \"%s\" unknown."
-msgstr "Ð£ÑÑÐ°Ð½Ð¾Ð²ÐºÐ° \"%s\" ."
+msgstr "Ð¥Ð¾ÑÑÐ¸Ð½Ð³ \"%s\" Ð½ÐµÐ¸Ð·Ð²ÐµÑÑÐµÐ½."
 
 #: ../hosts/hosturllist.py:98 ../hosts/hosturllist.py:110
 #, python-format
@@ -2440,16 +2375,15 @@
 
 #: ../components/iptvconfigmenu.py:369
 msgid "Hosts List Type-NOT FINISHED"
-msgstr ""
+msgstr "Ð¢Ð¸Ð¿ ÑÐ¾ÑÑ-Ð»Ð¸ÑÑÐ°: ÐÐÐÐÐÐÐ Ð¨ÐÐÐÐ«Ð"
 
 #: ../Web/webParts.py:200
-#, fuzzy
 msgid "Hosts settings"
-msgstr "ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ¸ E2"
+msgstr "ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ¸ ÑÐ¾ÑÑÐ¾Ð²"
 
 #: ../suggestions/imdb.py:22
 msgid "IMDb Suggestions"
-msgstr ""
+msgstr "ÐÑÐµÐ´Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ Ð¿Ð¾ IMDb"
 
 #: ../iptvupdate/updatemainwindow.py:269 ../iptvupdate/updatemainwindow.py:358
 #: ../iptvupdate/updatemainwindow.py:361
@@ -2462,8 +2396,9 @@
 "Such as downloading and installation additional binaries.\n"
 "Press OK to start."
 msgstr ""
-"IPTVPlayer Ð½ÑÐ¶Ð½Ð° Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½Ð°Ñ Ð½Ð°ÑÑÑÐ¾Ð¹ÐºÐ°. \n"
-"ÑÐ°ÐºÐ¸Ñ, ÐºÐ°Ðº Ð·Ð°Ð³ÑÑÐ·ÐºÐ° Ð¸ ÑÑÑÐ°Ð½Ð¾Ð²ÐºÐ° Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½ÑÑ Ð¼Ð¾Ð´ÑÐ»ÐµÐ¹ Ð±Ð¸Ð½Ð°ÑÐ½Ð¾Ð³Ð¾ ÑÐ°Ð¹Ð»Ð°,Ð½Ð°Ð¶Ð¼Ð¸ÑÐµ OK, ÑÑÐ¾Ð±Ñ Ð½Ð°ÑÐ°ÑÑ."
+"IPTVPlayer Ð½ÑÐ¶Ð´Ð°ÐµÑÑÑ Ð² Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½Ð¾Ð¹ Ð½Ð°ÑÑÑÐ¾Ð¹ÐºÐµ.\n"
+"Ð¢Ð°ÐºÐ¸Ñ, ÐºÐ°Ðº Ð·Ð°Ð³ÑÑÐ·ÐºÐ° Ð¸ ÑÑÑÐ°Ð½Ð¾Ð²ÐºÐ° Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½ÑÑ Ð±Ð¸Ð½Ð°ÑÐ½ÑÑ ÑÐ°Ð¹Ð»Ð¾Ð². \n"
+"ÐÐ°Ð¶Ð¼Ð¸ÑÐµ OK, ÑÑÐ¾Ð±Ñ Ð½Ð°ÑÐ°ÑÑ."
 
 #: ../hosts/hosttvjworg.py:46
 msgid "Icon type"
@@ -2479,7 +2414,7 @@
 
 #: ../hosts/hostwatchwrestlinguno.py:41
 msgid "Indy"
-msgstr ""
+msgstr "ÐÐ½Ð´Ð¸"
 
 #: ../components/iptvplayerwidget.py:646
 msgid "Info"
@@ -2487,11 +2422,11 @@
 
 #: ../components/configextmovieplayer.py:312
 msgid "Info bar clock format"
-msgstr ""
+msgstr "Ð¤Ð¾ÑÐ¼Ð°Ñ Ð¸Ð½ÑÐ¾Ð±Ð°ÑÐ° ÑÐ°ÑÐ¾Ð²"
 
 #: ../components/configextmovieplayer.py:333
 msgid "Info bar timeout"
-msgstr ""
+msgstr "Ð¢Ð°Ð¹Ð¼-Ð°ÑÑ Ð¸Ð½ÑÐ¾Ð±Ð°ÑÐ°"
 
 #: ../Web/webParts.py:84 ../setup/iptvsetupwidget.py:89
 msgid "Information"
@@ -2499,17 +2434,15 @@
 
 #: ../components/iptvextmovieplayer.py:792
 msgid "Information about audio tracks not available."
-msgstr "ÐÐ½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ð¸ Ð¾ Ð°ÑÐ´Ð¸Ð¾ ÑÑÐµÐºÐ°Ñ Ð½Ðµ Ð¸Ð¼ÐµÐµÑÑÑ."
+msgstr "ÐÐ½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ð¸ Ð¾Ð± Ð°ÑÐ´Ð¸Ð¾ ÑÑÐµÐºÐ°Ñ Ð½Ðµ Ð¸Ð¼ÐµÐµÑÑÑ."
 
 #: ../Web/webParts.py:382
-#, fuzzy
 msgid "Initial list"
-msgstr "Ð¡Ð¿Ð¸ÑÐ¾Ðº Ð°Ð½Ð¸Ð¼Ðµ"
+msgstr "ÐÐ°ÑÐ°Ð»ÑÐ½ÑÐ¹ ÑÐ¿Ð¸ÑÐ¾Ðº"
 
 #: ../Web/webParts.py:252
-#, fuzzy
 msgid "Initialize Download Manager"
-msgstr "ÐÐµÐ½ÐµÐ´Ð¶ÐµÑ Ð·Ð°Ð³ÑÑÐ·Ð¾Ðº"
+msgstr "ÐÐ½Ð¸ÑÐ¸Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ñ Ð´Ð¸ÑÐ¿ÐµÑÑÐµÑÐ° Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸"
 
 #: ../components/iptvconfigmenu.py:392
 msgid "Initialize web interface (experimental)"
@@ -2518,11 +2451,11 @@
 #: ../Web/webSite.py:180 ../Web/webSite.py:225 ../Web/webSite.py:354
 #: ../Web/webSite.py:544
 msgid "Initiating data, please wait"
-msgstr ""
+msgstr "ÐÐ½Ð¸ÑÐ¸Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ñ Ð´Ð°Ð½Ð½ÑÑ. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ"
 
 #: ../components/configextmovieplayer.py:373
 msgid "Inject black iframe at video playback finish"
-msgstr ""
+msgstr "ÐÐ½ÐµÐ´ÑÐµÐ½Ð¸Ðµ ÑÐµÑÐ½Ð¾Ð³Ð¾ Ð¿Ð¾Ð»Ñ Ð¿ÑÐ¸ Ð·Ð°Ð²ÐµÑÑÐµÐ½Ð¸Ð¸ Ð²Ð¾ÑÐ¿ÑÐ¾Ð¸Ð·Ð²ÐµÐ´ÐµÐ½Ð¸Ñ Ð²Ð¸Ð´ÐµÐ¾"
 
 #: ../components/iptvinputbox.py:23 ../components/iptvmultipleinputbox.py:38
 #: ../components/iptvmultipleinputbox.py:103
@@ -2543,20 +2476,20 @@
 
 #: ../setup/iptvsetupimpl.py:1446
 msgid "Installation binary failed. Retry?"
-msgstr "Ð£ÑÑÐ°Ð½Ð¾Ð²ÐºÐ° Ð±Ð¸Ð½Ð°ÑÐ½Ð¾Ð³Ð¾ Ð½Ðµ ÑÐ´Ð°Ð»Ð¾ÑÑ. ÐÐ¾Ð²ÑÐ¾ÑÐ¸ÑÐµ?"
+msgstr "Ð£ÑÑÐ°Ð½Ð¾Ð²ÐºÐ° Ð±Ð¸Ð½Ð°ÑÐ½Ð¸ÐºÐ° Ð½Ðµ ÑÐ´Ð°Ð»Ð¾ÑÑ. ÐÐ¾Ð²ÑÐ¾ÑÐ¸ÑÑ?"
 
 #: ../iptvupdate/updatemainwindow.py:664
 msgid "Installation has been aborted."
-msgstr "Ð£ÑÑÐ°Ð½Ð¾Ð²ÐºÐ° Ð¿ÑÐµÑÐ²Ð°Ð½Ð°."
+msgstr "Ð£ÑÑÐ°Ð½Ð¾Ð²ÐºÐ° Ð±ÑÐ»Ñ Ð¿ÑÐµÑÐ²Ð°Ð½Ð°."
 
 #: ../iptvupdate/updatemainwindow.py:662
 msgid "Installation has been confirmed."
-msgstr "Ð£ÑÑÐ°Ð½Ð¾Ð²ÐºÐ° Ð¿Ð¾Ð´ÑÐ²ÐµÑÐ¶Ð´ÐµÐ½Ð°."
+msgstr "Ð£ÑÑÐ°Ð½Ð¾Ð²ÐºÐ° Ð±ÑÐ»Ð° Ð¿Ð¾Ð´ÑÐ²ÐµÑÐ¶Ð´ÐµÐ½Ð°."
 
 #: ../setup/iptvsetuphelper.py:137
-#, fuzzy, python-format
+#, python-format
 msgid "Installing \"%s\"."
-msgstr "Ð£ÑÑÐ°Ð½Ð¾Ð²ÐºÐ° \"%s\" ."
+msgstr "Ð£ÑÑÐ°Ð½Ð¾Ð²ÐºÐ° \"%s\"."
 
 #: ../iptvupdate/updatemainwindow.py:402
 msgid "Installing new version."
@@ -2565,25 +2498,24 @@
 #: ../libs/urlparser.py:12281
 #, python-format
 msgid "Internal Server Error. Server response code: %s"
-msgstr ""
+msgstr "ÐÐ½ÑÑÑÐµÐ½Ð½ÑÑ Ð¾ÑÐ¸Ð±ÐºÐ° ÑÐµÑÐ²ÐµÑÐ°. ÐÐ¾Ð´ Ð¾ÑÐ²ÐµÑÐ° ÑÐµÑÐ²ÐµÑÐ°: %s"
 
 #: ../components/recaptcha_mye2i_widget.py:132
 #: ../components/recaptcha_v2myjd_widget.py:132
-#, fuzzy
 msgid "Invalid email."
-msgstr "ÐÐµÐ²ÐµÑÐ½ÑÐ¹ ÐºÐ¾Ð´."
+msgstr "ÐÐµÐ²ÐµÑÐ½ÑÐ¹ Ð°Ð´ÑÐµÑ ÑÐ»ÐµÐºÑÑÐ¾Ð½Ð½Ð¾Ð¹ Ð¿Ð¾ÑÑÑ."
 
 #: ../components/iptvdirbrowser.py:295
 msgid "Invalid name."
-msgstr "ÐÐµÐ²ÐµÑÐ½ÑÐ¹ ÐºÐ¾Ð´."
+msgstr "ÐÐµÐ²ÐµÑÐ½Ð¾Ðµ Ð¸Ð¼Ñ."
 
 #: ../components/iptvextmovieplayer.py:742
 msgid "Is this message displayed correctly?"
-msgstr "ÐÑÐ¾Ð±ÑÐ°Ð¶Ð°ÐµÑÑÑ ÑÑÐ¾ ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸Ðµ Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¾?"
+msgstr "Ð­ÑÐ¾ ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸Ðµ Ð¾ÑÐ¾Ð±ÑÐ°Ð¶Ð°ÐµÑÑÑ Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¾?"
 
 #: ../setup/iptvsetupimpl.py:906
 msgid "It improves HLS/M3U8 stream download.\n"
-msgstr "Ð­ÑÐ¾ ÑÐ»ÑÑÑÐ°ÐµÑ HLS/M3U8 Ð¿Ð¾ÑÐ¾ÐºÐ° Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸.\n"
+msgstr "Ð­ÑÐ¾ ÑÐ»ÑÑÑÐ°ÐµÑ Ð·Ð°Ð³ÑÑÐ·ÐºÑ HLS/M3U8 Ð¿Ð¾ÑÐ¾ÐºÐ°.\n"
 
 #: ../setup/iptvsetupimpl.py:1317
 msgid "It improves buffering mode with the gstplayer.\n"
@@ -2591,12 +2523,11 @@
 
 #: ../setup/iptvsetupimpl.py:967
 msgid "It improves commands execution with very long arguments.\n"
-msgstr ""
+msgstr "Ð­ÑÐ¾ ÑÐ»ÑÑÑÐ°ÐµÑ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ðµ ÐºÐ¾Ð¼Ð°Ð½Ð´ Ñ Ð¾ÑÐµÐ½Ñ Ð´Ð»Ð¸Ð½Ð½ÑÐ¼Ð¸ Ð°ÑÐ³ÑÐ¼ÐµÐ½ÑÐ°Ð¼Ð¸.\n"
 
 #: ../setup/iptvsetupimpl.py:840
-#, fuzzy
 msgid "It improves json data parsing.\n"
-msgstr "ÐÐ½ ÑÐ»ÑÑÑÐ°ÐµÑ ÑÑÐ±ÑÐ¸ÑÑÑ ÑÐ¸Ð½ÑÐ°ÐºÑÐ¸ÑÐµÑÐºÐ¾Ð³Ð¾ Ð°Ð½Ð°Ð»Ð¸Ð·Ð°.\n"
+msgstr "Ð­ÑÐ¾ ÑÐ»ÑÑÑÐ°ÐµÑ ÑÐ°Ð·Ð±Ð¾Ñ Ð´Ð°Ð½Ð½ÑÑ json.\n"
 
 #: ../setup/iptvsetupimpl.py:1265
 msgid "It improves playing of streams hls/m3u8.\n"
@@ -2604,35 +2535,35 @@
 
 #: ../setup/iptvsetupimpl.py:777
 msgid "It improves subtitles parsing.\n"
-msgstr "ÐÐ½ ÑÐ»ÑÑÑÐ°ÐµÑ ÑÑÐ±ÑÐ¸ÑÑÑ ÑÐ¸Ð½ÑÐ°ÐºÑÐ¸ÑÐµÑÐºÐ¾Ð³Ð¾ Ð°Ð½Ð°Ð»Ð¸Ð·Ð°.\n"
+msgstr "Ð­ÑÐ¾ ÑÐ»ÑÑÑÐ°ÐµÑ ÑÐ¸Ð½ÑÐ°ÐºÑÐ¸ÑÐµÑÐºÐ¸Ð¹ Ð°Ð½Ð°Ð»Ð¸Ð· ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð².\n"
 
 #: ../libs/pCommon.py:553 ../libs/pCommon.py:1217
 msgid "It is not allowed to call getURLRequestData from main thread."
-msgstr ""
+msgstr "ÐÐµÐ²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾ Ð²ÑÐ·Ð²Ð°ÑÑ getURLRequestData Ð¸Ð· Ð¾ÑÐ½Ð¾Ð²Ð½Ð¾Ð³Ð¾ Ð¿Ð¾ÑÐ¾ÐºÐ°."
 
 #: ../hosts/hostcineto.py:388
 msgid "It looks like some kind of protection. Try again later."
-msgstr ""
+msgstr "Ð­ÑÐ¾ Ð¿Ð¾ÑÐ¾Ð¶Ðµ Ð½Ð° ÐºÐ°ÐºÑÑ-ÑÐ¾ Ð·Ð°ÑÐ¸ÑÑ. ÐÐ¾Ð¿ÑÐ¾Ð±ÑÐ¹ÑÐµ Ð¿Ð¾Ð·Ð¶Ðµ."
 
 #: ../libs/pCommon.py:413
 #, python-format
 msgid "It looks like your current configuration do not allow to connect to the https://%s/.\n"
-msgstr ""
+msgstr "ÐÐ¾ÑÐ¾Ð¶Ðµ, ÐÐ°ÑÐ° ÑÐµÐºÑÑÐ°Ñ ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ñ Ð½Ðµ Ð¿Ð¾Ð·Ð²Ð¾Ð»ÑÐµÑ Ð¿Ð¾Ð´ÐºÐ»ÑÑÐ¸ÑÑÑÑ Ðº https://%s/.\n"
 
 #: ../components/iptvplayerwidget.py:497 ../components/iptvplayerwidget.py:501
 #, python-format
 msgid "It seems that the host \"%s\" has crashed."
-msgstr "ÐÐ¸Ð´Ð¸Ð¼Ð¾, ÑÑÐ¾Ñ ÑÐ¾ÑÑ \"%s\" Ð½Ðµ ÑÐ°Ð±Ð¾ÑÐ°ÐµÑ."
+msgstr "ÐÐ¸Ð´Ð¸Ð¼Ð¾, ÑÐ¾ÑÑ \"%s\" Ð¿Ð¾ÑÐµÑÐ¿ÐµÐ» ÐºÑÐ°Ñ."
 
 #: ../components/iptvplayerwidget.py:505
 #, python-format
 msgid "It seems that the host \"%s\" has crashed. Do you want to report this problem?"
-msgstr "ÐÐ¸Ð´Ð¸Ð¼Ð¾, Ñ Ð²Ð°Ñ \"%s\" Ð¿ÑÐ¸Ð·Ð¾ÑÑÐ» ÑÐ±Ð¾Ð¹. ÐÑ ÑÐ¾ÑÐ¸ÑÐµ, ÑÐ¾Ð¾Ð±ÑÐ¸ÑÑ Ð¾ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ðµ?"
+msgstr "ÐÐ¸Ð´Ð¸Ð¼Ð¾, ÑÐ¾ÑÑ \"%s\" Ð¿Ð¾ÑÐµÑÐ¿ÐµÐ» ÐºÑÐ°Ñ. ÐÑ ÑÐ¾ÑÐ¸ÑÐµ ÑÐ¾Ð¾Ð±ÑÐ¸ÑÑ Ð¾ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ðµ?"
 
 #: ../components/iptvsubdownloader.py:379
 #, python-format
 msgid "It seems that the subtitle's provider \"%s\" has crashed. Do you want to report this problem?"
-msgstr "ÐÐ°Ð¶ÐµÑÑÑ, ÑÑÐ¾ Ð¿Ð¾ÑÑÐ°Ð²ÑÐ¸Ðº ÑÑÐ±ÑÐ¸ÑÑÑ \"%s\" ÑÐ°Ð·Ð±Ð¸Ð»ÑÑ. ÐÑ ÑÐ¾ÑÐ¸ÑÐµ, ÑÑÐ¾Ð±Ñ ÑÐ¾Ð¾Ð±ÑÐ¸ÑÑ Ð¾ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ðµ?"
+msgstr "ÐÐ°Ð¶ÐµÑÑÑ, Ð¿Ð¾ÑÑÐ°Ð²ÑÐ¸Ðº ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð² \"%s\" Ð¿Ð¾ÑÐµÑÐ¿ÐµÐ» ÐºÑÐ°Ñ. ÐÑ ÑÐ¾ÑÐ¸ÑÐµ ÑÐ¾Ð¾Ð±ÑÐ¸ÑÑ Ð¾ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ðµ?"
 
 #: ../components/iptvextmovieplayer.py:1501
 #, python-format
@@ -2642,7 +2573,7 @@
 "STS: %s\n"
 "ERROR CODE: %r"
 msgstr ""
-"ÐÐ¸Ð´Ð¸Ð¼Ð¾, Ð²Ð¸Ð´ÐµÐ¾-Ð¿Ð»ÐµÐµÑ \"%s\" Ð½Ðµ ÑÐ°Ð±Ð¾ÑÐ°ÐµÑ Ð´Ð¾Ð»Ð¶Ð½ÑÐ¼ Ð¾Ð±ÑÐ°Ð·Ð¾Ð¼.\n"
+"ÐÐ¸Ð´Ð¸Ð¼Ð¾, Ð²Ð¸Ð´ÐµÐ¾Ð¿Ð»ÐµÐµÑ \"%s\" Ð½Ðµ ÑÐ°Ð±Ð¾ÑÐ°ÐµÑ Ð´Ð¾Ð»Ð¶Ð½ÑÐ¼ Ð¾Ð±ÑÐ°Ð·Ð¾Ð¼.\n"
 "\n"
 "STS: %s\n"
 "ÐÐÐ ÐÐ¨ÐÐÐÐ: %r"
@@ -2653,11 +2584,11 @@
 
 #: ../components/isubprovider.py:545 ../subproviders/subprov_napisy24pl.py:346
 msgid "It seems that unzip utility is not installed."
-msgstr "Ð¡Ð¾Ð·Ð´Ð°ÐµÑÑÑ Ð²Ð¿ÐµÑÐ°ÑÐ»ÐµÐ½Ð¸Ðµ, ÑÑÐ¾ ÑÑÐ¸Ð»Ð¸ÑÐ° ÑÐ°Ð·Ð°ÑÑÐ¸Ð²Ð¸ÑÐ¾Ð²Ð°ÑÑ Ð½Ðµ ÑÑÑÐ°Ð½Ð¾Ð²Ð»ÐµÐ½Ð°."
+msgstr "Ð¡Ð¾Ð·Ð´Ð°ÐµÑÑÑ Ð²Ð¿ÐµÑÐ°ÑÐ»ÐµÐ½Ð¸Ðµ, ÑÑÐ¾ ÑÑÐ¸Ð»Ð¸ÑÐ° ÑÐ°Ð·Ð°ÑÑÐ¸Ð²Ð°ÑÐ¸Ð¸ Ð½Ðµ ÑÑÑÐ°Ð½Ð¾Ð²Ð»ÐµÐ½Ð°."
 
 #: ../hosts/hostmediayou.py:28
 msgid "Italian"
-msgstr "ÐÑÐ°Ð»Ð¸Ñ"
+msgstr "ÐÑÐ°Ð»ÑÑÐ½ÑÐºÐ¸Ðµ"
 
 #: ../tools/iptvfavourites.py:175
 #, python-format
@@ -2667,16 +2598,15 @@
 #: ../components/iptvfavouriteswidgets.py:324
 #, python-format
 msgid "Items in group \"%s\""
-msgstr "ÐÐ¾Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ Ð² Ð³ÑÑÐ¿Ð¿Ðµ \"%s\""
+msgstr "ÐÑÐ½ÐºÑÑ Ð² Ð³ÑÑÐ¿Ð¿Ðµ \"%s\""
 
 #: ../hosts/hosttvnowde.py:373
 msgid "Items with DRM protection."
 msgstr "Ð­Ð»ÐµÐ¼ÐµÐ½ÑÑ Ñ Ð·Ð°ÑÐ¸ÑÐ¾Ð¹ DRM."
 
 #: ../components/recaptcha_v2myjd_widget.py:170
-#, fuzzy
 msgid "JDownloader script execution"
-msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð¸ÐµÐ¼ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÑÑÐºÐ¸Ñ ÑÐºÑÐ¸Ð¿ÑÐ¾Ð² [%s]."
+msgstr "ÐÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ðµ ÑÑÐµÐ½Ð°ÑÐ¸Ñ JDownloader"
 
 #: ../components/recaptcha_v2myjd_widget.py:104
 #, python-format
@@ -2684,32 +2614,33 @@
 "JDownloader script execution failed.\n"
 "Error code: %s\n"
 msgstr ""
+"ÐÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ðµ ÑÑÐµÐ½Ð°ÑÐ¸Ñ JDownloader Ð·Ð°Ð²ÐµÑÑÐ¸Ð»Ð¾ÑÑ Ñ Ð¾ÑÐ¸Ð±ÐºÐ¾Ð¹.\n"
+"ÐÐ¾Ð´ Ð¾ÑÐ¸Ð±ÐºÐ¸: %s\n"
 
 #: ../components/recaptcha_v2myjd_widget.py:101
 msgid "JDownloader script finished."
 msgstr ""
 
 #: ../hosts/hostworldfree4u.py:43
-#, fuzzy
 msgid "LATEST"
-msgstr "ÐÐÐ¡ÐÐÐÐÐÐ ÐÐÐÐÐ"
+msgstr "ÐÐÐ¡ÐÐÐÐÐÐ"
 
 #: ../hosts/hostdancetrippin.py:35
 msgid "LATEST CONTENT"
-msgstr ""
+msgstr "ÐÐÐÐÐÐ¨ÐÐ Ð¡ÐÐÐÐ ÐÐÐÐÐ"
 
 #: ../hosts/hostwatchwrestlinguno.py:51 ../hosts/hostwatchwrestlinguno.py:307
 #: ../hosts/hostwatchwrestling.py:67 ../hosts/hostwatchwrestling.py:316
 msgid "LIKES"
-msgstr ""
+msgstr "ÐÐ ÐÐÐÐ¢Ð¡Ð¯"
 
 #: ../hosts/hostmythewatchseries.py:65
 msgid "LIST"
-msgstr ""
+msgstr "Ð¡ÐÐÐ¡ÐÐ"
 
 #: ../hosts/host3player.py:57
 msgid "LIVE"
-msgstr ""
+msgstr "ÐÐ Ð¯ÐÐÐ"
 
 #: ../hosts/hostwatchwrestlinguno.py:32 ../hosts/hostwatchwrestling.py:48
 msgid "LIVE 24/7"
@@ -2722,9 +2653,8 @@
 #: ../hosts/hosthdfull.py:41 ../hosts/hostmediayou.py:33 ../hosts/hostddl.py:38
 #: ../hosts/hostkinox.py:234 ../hosts/hostkinox.py:421
 #: ../hosts/hosttvjworg.py:43
-#, fuzzy
 msgid "Language"
-msgstr "Ð¯Ð·ÑÐº:"
+msgstr "Ð¯Ð·ÑÐº"
 
 #: ../libs/skylinewebcamscom.py:39 ../hosts/hostlaola1tv.py:41
 #: ../hosts/hostngolos.py:31
@@ -2733,14 +2663,14 @@
 
 #: ../hosts/hosttwitchtv.py:437 ../hosts/hosttwitchtv.py:458
 #: ../hosts/hosttwitchtv.py:498
-#, fuzzy, python-format
+#, python-format
 msgid "Language: %s"
-msgstr "Ð¯Ð·ÑÐº:"
+msgstr "Ð¯Ð·ÑÐº: %s"
 
 #: ../Web/webParts.py:134
 #, python-format
 msgid "Last %d lines of the %s file are:"
-msgstr ""
+msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ðµ %d ÑÑÑÐ¾Ðº ÑÐ°Ð¹Ð»Ð° %s:"
 
 #: ../hosts/hostsvtplayse.py:80
 msgid "Last chance"
@@ -2751,16 +2681,17 @@
 msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½ÑÑ Ð¿ÑÐ¾Ð²ÐµÑÐºÐ° Ð²ÐµÑÑÐ¸Ð¸"
 
 #: ../hosts/hosttwitchtv.py:119
-#, fuzzy
 msgid "Last day"
-msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½ÐµÐµ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ"
+msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ð¹ Ð´ÐµÐ½Ñ"
 
 #: ../libs/pCommon.py:1417 ../components/iptvplayerwidget.py:351
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Last error:\n"
 "%s"
-msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½ÑÑ Ð¾ÑÐ¸Ð±ÐºÐ°: %s"
+msgstr ""
+"ÐÐ¾ÑÐ»ÐµÐ´Ð½ÑÑ Ð¾ÑÐ¸Ð±ÐºÐ°:\n"
+"%s"
 
 #: ../components/iptvplayerwidget.py:1616
 #: ../components/iptvplayerwidget.py:2131
@@ -2771,26 +2702,24 @@
 msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½ÑÑ Ð¾ÑÐ¸Ð±ÐºÐ°: \"%s\""
 
 #: ../hosts/hosttwitchtv.py:121
-#, fuzzy
 msgid "Last month"
-msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ðµ ÑÐ¸Ð»ÑÐ¼Ñ"
+msgstr "ÐÑÐ¾ÑÐ»ÑÐ¹ Ð¼ÐµÑÑÑ"
 
 #: ../hosts/host9anime.py:48
 msgid "Last update"
 msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½ÐµÐµ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ"
 
 #: ../hosts/hosttwitchtv.py:120
-#, fuzzy
 msgid "Last week"
-msgstr "Ð§ÐµÑÐµÐ· Ð½ÐµÐ´ÐµÐ»Ñ"
+msgstr "ÐÐ° Ð¿ÑÐ¾ÑÐ»Ð¾Ð¹ Ð½ÐµÐ´ÐµÐ»Ðµ"
 
 #: ../hosts/hostxrysoise.py:31 ../hosts/hostcartoonhd.py:32
 msgid "Lastest"
-msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ð¹"
+msgstr "ÐÐ¾Ð²ÐµÐ¹ÑÐ¸Ðµ"
 
 #: ../hosts/hostplayrtsiw.py:159
 msgid "Latest"
-msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ð¹"
+msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ðµ"
 
 #: ../hosts/hostfilmezz.py:74
 msgid "Latest added"
@@ -2813,13 +2742,12 @@
 msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½ÐµÐµ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ"
 
 #: ../components/iptvplayerwidget.py:725
-#, fuzzy
 msgid "Lead programmer: "
-msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ðµ Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ñ"
+msgstr "ÐÐµÐ´ÑÑÐ¸Ð¹ Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð¸ÑÑ: "
 
 #: ../Web/webParts.py:455
 msgid "Level:"
-msgstr ""
+msgstr "Ð£ÑÐ¾Ð²ÐµÐ½Ñ:"
 
 #: ../components/iptvconfigmenu.py:106 ../components/configextmovieplayer.py:63
 msgid "Lightgray"
@@ -2831,15 +2759,15 @@
 
 #: ../components/iptvextmovieplayer.py:1959
 msgid "Link is not supported by the gstplayer. Please use the extelayer3 if available."
-msgstr "Ð¡ÑÑÐ»ÐºÐ° Ð½Ðµ Ð¿Ð¾Ð´Ð´ÐµÑÐ¶Ð¸Ð²Ð°ÐµÑÑÑ Ð¿ÑÐ¾Ð¸Ð³ÑÑÐ²Ð°ÑÐµÐ»ÐµÐ¼ gstplayer. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐ¹ÑÐµ extelayer3 ÐµÑÐ»Ð¸ ÑÐ°ÐºÐ¾Ð²Ð°Ñ Ð¸Ð¼ÐµÐµÑÑÑ."
+msgstr "Ð¡ÑÑÐ»ÐºÐ° Ð½Ðµ Ð¿Ð¾Ð´Ð´ÐµÑÐ¶Ð¸Ð²Ð°ÐµÑÑÑ Ð¿ÑÐ¾Ð¸Ð³ÑÑÐ²Ð°ÑÐµÐ»ÐµÐ¼ gstplayer. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐ¹ÑÐµ extelayer3 ÐµÑÐ»Ð¸ Ð´Ð¾ÑÑÑÐ¿Ð½Ð¾."
 
 #: ../hosts/host3player.py:390
 msgid "Link protected with DRM."
-msgstr ""
+msgstr "Ð¡ÑÑÐ»ÐºÐ° Ð·Ð°ÑÐ¸ÑÐµÐ½Ð° DRM."
 
 #: ../components/captcha_helper.py:23
 msgid "Link protected with Google ReCaptcha v2"
-msgstr ""
+msgstr "Ð¡ÑÑÐ»ÐºÐ° Ð·Ð°ÑÐ¸ÑÐµÐ½Ð° Ñ Ð¿Ð¾Ð¼Ð¾ÑÑÑ Google ReCaptcha v2"
 
 #: ../libs/urlparser.py:10611 ../hosts/hostekinotv.py:455
 #: ../hosts/hostmooviecc.py:442 ../hosts/hosttvpvod.py:231
@@ -2847,40 +2775,38 @@
 #: ../hosts/hosthdstreams.py:445 ../hosts/hostfilmezz.py:334
 #: ../hosts/hostserienstreamto.py:446
 msgid "Link protected with google recaptcha v2."
-msgstr ""
+msgstr "Ð¡ÑÑÐ»ÐºÐ° Ð·Ð°ÑÐ¸ÑÐµÐ½Ð° Ñ Ð¿Ð¾Ð¼Ð¾ÑÑÑ google recaptcha v2."
 
 #: ../hosts/hostekinotv.py:424 ../hosts/hostekinotv.py:435
 msgid "Link protected with hCaptcha."
-msgstr ""
+msgstr "Ð¡ÑÑÐ»ÐºÐ° Ð·Ð°ÑÐ¸ÑÐµÐ½Ð° hCaptcha."
 
 #: ../Web/webParts.py:463
-#, fuzzy
 msgid "Links for"
-msgstr "CÑÑÐ»ÐºÐ°"
+msgstr "CÑÑÐ»ÐºÐ° Ð´Ð»Ñ"
 
 #: ../hosts/hosturllist.py:52
-#, fuzzy
 msgid "Links from all files without categories"
-msgstr "Ð¡ÑÑÐ»ÐºÐ¸ Ð²Ð¸Ð´ÐµÐ¾ÑÐ¾Ð»Ð¸ÐºÐ¸ Ð¸ ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸Ñ, Ð±ÐµÐ· ÑÐ°Ð·Ð´ÐµÐ»ÐµÐ½Ð¸Ñ Ð½Ð° ÐºÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð¸"
+msgstr "Ð¡ÑÑÐ»ÐºÐ¸ Ð¸Ð· Ð²ÑÐµÑ ÑÐ°Ð¹Ð»Ð¾Ð² Ð±ÐµÐ· ÐºÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð¹"
 
 #: ../hosts/hosturllist.py:53 ../hosts/hosturllist.py:54
 #: ../hosts/hosturllist.py:55
 #, python-format
 msgid "Links from the file %s"
-msgstr ""
+msgstr "Ð¡ÑÑÐ»ÐºÐ¸ Ð¸Ð· ÑÐ°Ð¹Ð»Ð° %s"
 
 #: ../hosts/hostplayrtsiw.py:172
 msgid "List by day"
-msgstr ""
+msgstr "Ð¡Ð¿Ð¸ÑÐ¾Ðº Ð¿Ð¾ Ð´Ð½ÑÐ¼"
 
 #: ../libs/ustvnow.py:42
 msgid "List only channels with subscription"
-msgstr "Ð¡Ð¿Ð¸ÑÐ¾Ðº ÐºÐ°Ð½Ð°Ð»Ð¾Ð² Ð² Ð¿Ð¾Ð´Ð¿Ð¸ÑÐºÐµ"
+msgstr "Ð¢Ð¾Ð»ÑÐºÐ¾ ÑÐ¿Ð¸ÑÐ¾Ðº ÐºÐ°Ð½Ð°Ð»Ð¾Ð² Ð² Ð¿Ð¾Ð´Ð¿Ð¸ÑÐºÐµ"
 
 #: ../hosts/hostshoutcast.py:133
-#, fuzzy, python-format
+#, python-format
 msgid "Listeners: %s"
-msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½ÑÑ Ð¾ÑÐ¸Ð±ÐºÐ°: %s"
+msgstr "Ð¡Ð»ÑÑÐ°ÑÐµÐ»Ð¸: %s"
 
 #: ../hosts/hostplayrtsiw.py:151 ../hosts/hostzdfmediathek.py:334
 #: ../hosts/hostbbcsport.py:189 ../hosts/hostyoutube.py:71
@@ -2890,7 +2816,7 @@
 
 #: ../hosts/hostardmediathek.py:69
 msgid "Live Radio"
-msgstr "Ð Ð°Ð´Ð¸Ð¾ Ð² Ð¿ÑÑÐ¼Ð¾Ð¼ ÑÑÐ¸ÑÐµ"
+msgstr "ÐÐ°Ð¹Ð² ÑÐ°Ð´Ð¸Ð¾"
 
 #: ../hosts/hostardmediathek.py:68
 msgid "Live TV"
@@ -2902,27 +2828,25 @@
 
 #: ../hosts/hostyoutube.py:217 ../hosts/hosturllist.py:54
 #: ../hosts/hosttwitchtv.py:657
-#, fuzzy
 msgid "Live streams"
-msgstr "ÐÑÑÐ¼ÑÐµ-Ð¿Ð¾ÑÐ¾ÐºÐ¸"
+msgstr "ÐÐ½Ð»Ð°Ð¹Ð½ Ð¿Ð¾ÑÐ¾ÐºÐ¸"
 
 #: ../hosts/hostlaola1tv.py:493
 msgid "Live-streams"
-msgstr "ÐÑÑÐ¼ÑÐµ-Ð¿Ð¾ÑÐ¾ÐºÐ¸"
+msgstr "ÐÑÑÐ¼ÑÐµ Ð¿Ð¾ÑÐ¾ÐºÐ¸"
 
 #: ../libs/wagasworld.py:58
-#, fuzzy
 msgid "LiveTv"
-msgstr "ÐÑÑÐ¼Ð¾Ð¹ ÑÑÐ¸Ñ"
+msgstr "ÐÑÑÐ¼Ð¾Ð¹ ÑÑÐ¸Ñ Ð¢Ð"
 
 #: ../components/iptvextmovieplayer.py:847
 msgid "Load"
-msgstr "ÐÑÐ±ÑÐ°ÑÑ"
+msgstr "ÐÐ°Ð³ÑÑÐ·ÐºÐ°"
 
 #: ../components/e2ivk.py:653 ../components/e2ivk.py:656
 #, python-format
 msgid "Load of the Virtual Keyboard layout \"%s\" failed due to the following error: \"%s\""
-msgstr ""
+msgstr "ÐÐ°Ð³ÑÑÐ·ÐºÐ° ÑÐ°ÑÐºÐ»Ð°Ð´ÐºÐ¸ Ð²Ð¸ÑÑÑÐ°Ð»ÑÐ½Ð¾Ð¹ ÐºÐ»Ð°Ð²Ð¸Ð°ÑÑÑÑ \"%s\" Ð½Ðµ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð° Ð¸Ð·-Ð·Ð° ÑÐ»ÐµÐ´ÑÑÑÐµÐ¹ Ð¾ÑÐ¸Ð±ÐºÐ¸: \"%s\""
 
 #: ../components/iptvplayerwidget.py:1916
 #: ../components/iptvsubdownloader.py:485
@@ -2932,26 +2856,25 @@
 #: ../components/iptvplayerwidget.py:1527
 #, python-format
 msgid "Loading %s failed due to following error:"
-msgstr ""
+msgstr "ÐÐ°Ð³ÑÑÐ·ÐºÐ° %s Ð½Ðµ ÑÐ´Ð°Ð»Ð°ÑÑ Ð¸Ð·-Ð·Ð° ÑÐ»ÐµÐ´ÑÑÑÐµÐ¹ Ð¾ÑÐ¸Ð±ÐºÐ¸:"
 
 #: ../Web/webSite.py:297 ../Web/webSite.py:357
-#, fuzzy
 msgid "Loading data, please wait"
-msgstr "ÐÐ°ÐºÑÑÑÐ¸Ðµ. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ° , Ð¿Ð¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ ..."
+msgstr "ÐÐ°Ð³ÑÑÐ·ÐºÐ° Ð´Ð°Ð½Ð½ÑÑ. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ"
 
 #: ../Web/webSite.py:230 ../Web/webSite.py:548
 #, python-format
 msgid "Loading data, please wait (%d)"
-msgstr ""
+msgstr "ÐÐ°Ð³ÑÑÐ·ÐºÐ° Ð´Ð°Ð½Ð½ÑÑ. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ (%d)"
 
 #: ../hosts/hostlocalmedia.py:60
 msgid "LocalMedia"
-msgstr "ÐÐ¾Ð¸ ÐÐµÐ´Ð¸Ð° ÑÐ°Ð¹Ð»Ñ"
+msgstr "ÐÐ¾ÐºÐ°Ð»ÑÐ½ÑÐµ Ð¼ÐµÐ´Ð¸Ð°ÑÐ°Ð¹Ð»Ñ"
 
 #: ../components/e2ivk.py:648
 #, python-format
 msgid "Locale ID mismatched! %s <> %s"
-msgstr ""
+msgstr "ÐÐ´ÐµÐ½ÑÐ¸ÑÐ¸ÐºÐ°ÑÐ¾Ñ Ð»Ð¾ÐºÐ°Ð»Ð¸ Ð½ÐµÑÐ¾Ð²Ð¼ÐµÑÑÐ¸Ð¼! %s <> %s"
 
 #: ../hosts/hostdailymotion.py:28
 msgid "Localization"
@@ -2959,12 +2882,12 @@
 
 #: ../libs/videostar.py:46 ../hosts/hoststreamliveto.py:38
 msgid "Login"
-msgstr "ÐÐ²ÑÐ¾ÑÐ¸Ð·Ð¾Ð²Ð°ÑÑÑÑ"
+msgstr "ÐÐ²ÑÐ¾ÑÐ¸Ð·Ð°ÑÐ¸Ñ"
 
 #: ../subproviders/subprov_opensubtitlesorg.py:204
 #: ../subproviders/subprov_opensubtitlesorg.py:211
 msgid "Login failed!"
-msgstr "ÐÑÐ¸Ð±ÐºÐ° Ð²ÑÐ¾Ð´Ð°!"
+msgstr "ÐÐµÐ²ÐµÑÐ½ÑÐ¹ Ð»Ð¾Ð³Ð¸Ð½!"
 
 #: ../libs/firstonetvnet.py:111 ../libs/internetowa.py:88 ../libs/edemtv.py:94
 #: ../hosts/hostekinotv.py:564 ../hosts/hostdixmax.py:479
@@ -2979,22 +2902,21 @@
 #: ../hosts/hosttvplayercom.py:380 ../hosts/hostrtlmost.py:490
 #: ../hosts/hostcdapl.py:494 ../hosts/hostvumedicom.py:397
 msgid "Login failed."
-msgstr "ÐÑÐ¸Ð±ÐºÐ° Ð²ÑÐ¾Ð´Ð°."
+msgstr "ÐÐµÐ²ÐµÑÐ½ÑÐ¹ Ð»Ð¾Ð³Ð¸Ð½."
 
 #: ../hosts/hosteurosportplayer.py:599 ../hosts/hostfilmynadzis.py:105
 #: ../hosts/hostekstraklasatv.py:131
 msgid "Login failed. Invalid email or password."
-msgstr ""
+msgstr "ÐÑÐ¸Ð±ÐºÐ° Ð²ÑÐ¾Ð´Ð°. ÐÐµÐ¿ÑÐ°Ð²Ð¸Ð»ÑÐ½ÑÐ¹ Ð°Ð´ÑÐµÑ ÑÐ»ÐµÐºÑÑÐ¾Ð½Ð½Ð¾Ð¹ Ð¿Ð¾ÑÑÑ Ð¸Ð»Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ."
 
 #: ../hosts/hosteurosportplayer.py:503
-#, fuzzy
 msgid "Login needed"
-msgstr "Ð ÐµÐ¶Ð¸Ð¼ Ð²ÑÐ¾Ð´Ð°"
+msgstr "Ð¢ÑÐµÐ±ÑÐµÑÑÑ Ð»Ð¾Ð³Ð¸Ð½"
 
 #: ../libs/urlparser.py:6250
-#, fuzzy, python-brace-format
+#, python-brace-format
 msgid "Login on {0} failed."
-msgstr "ÐÑÐ¸Ð±ÐºÐ° Ð²ÑÐ¾Ð´Ð°."
+msgstr "ÐÐµÐ²ÐµÑÐ½ÑÐ¹ Ð»Ð¾Ð³Ð¸Ð½ Ð½Ð° {0}."
 
 #: ../libs/urlparser.py:2324
 #, python-format
@@ -3002,25 +2924,24 @@
 "Login user \"%s\" to http://vk.com/ failed!\n"
 "Please check your login data in the IPTVPlayer configuration."
 msgstr ""
-"ÐÐ¾Ð³Ð¸Ð½ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ \"%s\" Ð²Ð¾Ð¹ÑÐ¸ http://vk.com/ Ð½Ðµ ÑÐ´Ð°Ð»Ð¾ÑÑ!\n"
+"ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð²Ð¾Ð¹ÑÐ¸ Ð² http://vk.com/ Ñ Ð»Ð¾Ð³Ð¸Ð½Ð¾Ð¼ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ \"%s\"!\n"
 "ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ° , Ð¿ÑÐ¾Ð²ÐµÑÑÑÐµ ÑÐ²Ð¾Ð¸ Ð´Ð°Ð½Ð½ÑÐµ Ð´Ð»Ñ Ð²ÑÐ¾Ð´Ð° Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ IPTVPlayer."
 
 #: ../Web/webParts.py:67 ../Web/webParts.py:84
 msgid "Logs"
-msgstr ""
+msgstr "ÐÑÑÐ½Ð°Ð»"
 
 #: ../hosts/hostxrysoise.py:31 ../hosts/hostcartoonhd.py:32
 msgid "Longest"
 msgstr "Ð¡Ð°Ð¼ÑÐ¹ Ð´Ð»Ð¸Ð½Ð½ÑÐ¹"
 
 #: ../libs/weebtv.py:32 ../hosts/hostlaola1tv.py:28
-#, fuzzy
 msgid "Low"
 msgstr "ÐÐ¸Ð·ÐºÐ¸Ð¹"
 
 #: ../hosts/hosthdstreams.py:72 ../hosts/hostmythewatchseries.py:66
 msgid "MOVIES"
-msgstr ""
+msgstr "Ð¤ÐÐÐ¬ÐÐ«"
 
 #: ../hosts/hostkabarety.py:40 ../hosts/hostartetv.py:86
 #: ../hosts/hostokgoals.py:39 ../hosts/hostrtbfbe.py:102
@@ -3028,16 +2949,15 @@
 #: ../hosts/hostfilmstreamvkcom.py:103 ../hosts/hostwptv.py:52
 #: ../hosts/hostfilmpalast.py:43
 msgid "Main"
-msgstr "ÐÐ»Ð°Ð²Ð½ÑÐ¹"
+msgstr "ÐÐ»Ð°Ð²Ð½Ð¾Ðµ"
 
 #: ../hosts/hostwatchwrestlinguno.py:39
 msgid "Main Event"
 msgstr "ÐÐ»Ð°Ð²Ð½Ð¾Ðµ ÑÐ¾Ð±ÑÑÐ¸Ðµ"
 
 #: ../hosts/hostnuteczki.py:88 ../hosts/hostcimaclubcom.py:129
-#, fuzzy
 msgid "Main menu"
-msgstr "ÐÐ»Ð°Ð²Ð½Ð¾Ðµ ÑÐ¾Ð±ÑÑÐ¸Ðµ"
+msgstr "ÐÐ»Ð°Ð²Ð½Ð¾Ðµ Ð¼ÐµÐ½Ñ"
 
 #: ../hosts/hostlocalmedia.py:315
 #, python-format
@@ -3046,34 +2966,31 @@
 
 #: ../Web/webParts.py:267 ../iptvdm/iptvdmui.py:181
 msgid "Manager status: "
-msgstr "ÐÐµÐ½ÐµÐ´Ð¶ÐµÑ Ð¿Ð¾Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ: "
+msgstr "Ð¡ÑÐ°ÑÑÑ Ð¼ÐµÐ½ÐµÐ´Ð¶ÐµÑÐ°: "
 
 #: ../hosts/hostfilmstreamvkcom.py:106
-#, fuzzy
 msgid "Manga"
 msgstr "ÐÐ°Ð½Ð³Ð°Ñ"
 
 #: ../hosts/hostekstraklasatv.py:74
-#, fuzzy
 msgid "Matches"
-msgstr "Ð¡Ð°Ð¼ÑÐµ ÑÐµÐ½Ð½ÑÐµ"
+msgstr "ÐÐ°ÑÑÐ¸"
 
 #: ../hosts/hostekstraklasatv.py:40
-#, fuzzy
 msgid "Max bitrate:"
-msgstr "ÐÐ¸ÑÑÐµÐ¹Ñ: 900"
+msgstr "ÐÐ°ÐºÑ. Ð±Ð¸ÑÑÐµÐ¹Ñ:"
 
 #: ../hosts/hostlocalmedia.py:54
 msgid "Max items per page"
-msgstr "ÐÐ°ÐºÑÐ¸Ð¼Ð°Ð»ÑÐ½Ð¾Ðµ ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ Ð½Ð° ÑÑÑÐ°Ð½Ð¸ÑÐµ"
+msgstr "ÐÐ°ÐºÑ. ÐºÐ¾Ð»-Ð²Ð¾ Ð½Ð° ÑÑÑÐ°Ð½Ð¸ÑÐµ"
 
 #: ../iptvdm/iptvdmapi.py:234
 msgid "Max number of parallel downloads has been reached."
-msgstr ""
+msgstr "ÐÐ¾ÑÑÐ¸Ð³Ð½ÑÑÐ¾ Ð¼Ð°ÐºÑÐ¸Ð¼Ð°Ð»ÑÐ½Ð¾Ðµ ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ Ð¿Ð°ÑÐ°Ð»Ð»ÐµÐ»ÑÐ½ÑÑ Ð·Ð°Ð³ÑÑÐ·Ð¾Ðº."
 
 #: ../components/iptvextmovieplayer.py:544
 msgid "Menu"
-msgstr ""
+msgstr "ÐÐµÐ½Ñ"
 
 #: ../hosts/hostlaola1tv.py:28
 msgid "Mid"
@@ -3081,17 +2998,16 @@
 
 #: ../hosts/hostkijknl.py:64
 msgid "Missed"
-msgstr ""
+msgstr "ÐÑÐ¾Ð¿ÑÑÐµÐ½Ð½ÑÐµ"
 
 #: ../hosts/hosttvnowde.py:63
-#, fuzzy
 msgid "Missed the program?"
-msgstr "ÐÑ Ð¿ÑÐ¾Ð¿ÑÑÐºÐ°ÐµÑÐµ?"
+msgstr "ÐÑÐ¾Ð¿ÑÑÑÐ¸Ð»Ð¸ Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ñ?"
 
 #: ../hosts/hostzdfmediathek.py:85 ../hosts/hostzdfmediathek.py:102
 #: ../hosts/hostardmediathek.py:66
 msgid "Missed the show?"
-msgstr "ÐÑ Ð¿ÑÐ¾Ð¿ÑÑÐºÐ°ÐµÑÐµ?"
+msgstr "ÐÑÐ¾Ð¿ÑÑÑÐ¸Ð»Ð¸ ÑÐ¾Ñ?"
 
 #: ../hosts/hostwatchwrestling.py:47
 msgid "Monthly"
@@ -3099,17 +3015,17 @@
 
 #: ../hosts/hostddl.py:585
 msgid "Mood:"
-msgstr ""
+msgstr "ÐÐ°ÑÑÑÐ¾ÐµÐ½Ð¸Ðµ:"
 
 #: ../hosts/hostddl.py:587
 msgid "Moods:"
-msgstr ""
+msgstr "ÐÐ°ÑÑÑÐ¾ÐµÐ½Ð¸Ñ:"
 
 #: ../libs/wagasworld.py:182 ../components/iptvplayerwidget.py:188
 #: ../hosts/hosttvpvod.py:462 ../hosts/hostdancetrippin.py:155
 #: ../hosts/hostrtbfbe.py:384 ../hosts/hostlocalmedia.py:418
 msgid "More"
-msgstr "ÐÐ¿ÑÐ¸Ð¸"
+msgstr "ÐÐ¾Ð»ÑÑÐµ Ð¾Ð¿ÑÐ¸Ð¹"
 
 #: ../hosts/hostzdfmediathek.py:42 ../hosts/hostardmediathek.py:42
 msgid "More important"
@@ -3120,13 +3036,12 @@
 msgstr "Ð¡Ð°Ð¼ÑÐµ Ð¿Ð¾Ð¿ÑÐ»ÑÑÐ½ÑÐµ"
 
 #: ../hosts/hostdancetrippin.py:43
-#, fuzzy
 msgid "Most featured"
-msgstr "ÐÐ¾ ÑÐµÐ¹ÑÐ¸Ð½Ð³Ñ"
+msgstr "Ð¡Ð°Ð¼ÑÐµ Ð¿Ð¾Ð¿ÑÐ»ÑÑÐ½ÑÐµ"
 
 #: ../hosts/hostplayrtsiw.py:167
 msgid "Most popular"
-msgstr "Ð¡Ð°Ð¼ÑÐ¹ Ð¿Ð¾Ð¿ÑÐ»ÑÑÐ½ÑÐ¹"
+msgstr "Ð¡Ð°Ð¼ÑÐµ Ð¿Ð¾Ð¿ÑÐ»ÑÑÐ½ÑÐµ"
 
 #: ../hosts/hostdailymotion.py:53
 msgid "Most rated"
@@ -3135,9 +3050,8 @@
 #: ../hosts/hostplayrtsiw.py:249 ../hosts/hostplayrtsiw.py:254
 #: ../hosts/hostplayrtsiw.py:263 ../hosts/hostplayrtsiw.py:268
 #: ../hosts/hostdailymotion.py:52
-#, fuzzy
 msgid "Most recent"
-msgstr "--- Ð¡Ð°Ð¼Ð¾Ðµ Ð½Ð¾Ð²Ð¾Ðµ ---"
+msgstr "Ð¡Ð°Ð¼Ð¾Ðµ Ð½Ð¾Ð²Ð¾Ðµ"
 
 #: ../hosts/hostxrysoise.py:31 ../hosts/hostcartoonhd.py:32
 #: ../hosts/hostdailymotion.py:51
@@ -3155,13 +3069,13 @@
 "Return code[%s].\n"
 "Return data[%s]."
 msgstr ""
-"ÐÐ¾Ð½ÑÐ¸ÑÐ¾Ð²Ð°ÑÑ ISO ÑÐ°Ð¹Ð» [%s] Ð½Ð° [%s] Ð½Ðµ ÑÐ¼Ð¾Ð³Ð»Ð¸.\n"
+"ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ ÑÐ¼Ð¾Ð½ÑÐ¸ÑÐ¾Ð²Ð°ÑÑ ISO ÑÐ°Ð¹Ð» [%s] Ð½Ð° [%s].\n"
 "ÐÐ¾Ð´ Ð²Ð¾Ð·Ð²ÑÐ°ÑÐ°[%s].\n"
 "ÐÐ¾Ð·Ð²ÑÐ°Ñ Ð´Ð°Ð½Ð½ÑÑ[%s]."
 
 #: ../components/iptvsubsimpledownloader.py:72
 msgid "Move group"
-msgstr "ÐÐµÑÐµÐ¼ÐµÑÐµÐ½Ð¸Ðµ Ð³ÑÑÐ¿Ð¿Ñ"
+msgstr "ÐÐµÑÐµÐ¼ÐµÑÑÐ¸ÑÑ Ð³ÑÑÐ¿Ð¿Ñ"
 
 #: ../hosts/hostmediasetplay.py:619 ../hosts/hostlibrestream.py:27
 msgid "Movie"
@@ -3198,7 +3112,7 @@
 #: ../hosts/hostzaluknijcc.py:72 ../hosts/hostvizjerpl.py:76
 #: ../hosts/hostfilman.py:91 ../hosts/hostmovienightws.py:31
 msgid "Movies genres"
-msgstr "Ð¤Ð¸Ð»ÑÐ¼Ñ Ð¶Ð°Ð½ÑÑ"
+msgstr "ÐÐ°Ð½ÑÑ ÑÐ¸Ð»ÑÐ¼Ð¾Ð²"
 
 #: ../hosts/hostanimeodcinki.py:46
 msgid "Movies list"
@@ -3207,12 +3121,12 @@
 #: ../hosts/hostlocalmedia.py:695
 #, python-format
 msgid "Moving file from \"%s\" to \"%s\" failed.\n"
-msgstr ""
+msgstr "ÐÐµÑÐµÐ¼ÐµÑÐµÐ½Ð¸Ðµ ÑÐ°Ð¹Ð»Ð° Ð¸Ð· \"%s\" Ð² \"%s\" Ð½Ðµ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð¾.\n"
 
 #: ../iptvdm/iptvbuffui.py:293
 #, python-format
 msgid "Moving playback buffer to the download manager failed with the following error \"%s\""
-msgstr ""
+msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¿ÐµÑÐµÐ¼ÐµÑÑÐ¸ÑÑ Ð±ÑÑÐµÑ Ð²Ð¾ÑÐ¿ÑÐ¾Ð¸Ð·Ð²ÐµÐ´ÐµÐ½Ð¸Ñ Ð² Ð´Ð¸ÑÐ¿ÐµÑÑÐµÑ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸ Ñ Ð¾ÑÐ¸Ð±ÐºÐ¾Ð¹ \"%s\""
 
 #: ../hosts/hostfreediscpl.py:62 ../hosts/hostfreediscpl.py:539
 #: ../hosts/hostyoutube.py:180
@@ -3221,15 +3135,15 @@
 
 #: ../libs/recaptcha_v2_myjd.py:17
 msgid "My JDownloader reCAPTCHA v2 solution"
-msgstr ""
+msgstr "ÐÐ¾Ñ ÑÐµÑÐµÐ½Ð¸Ðµ Ð´Ð»Ñ JDownloader reCAPTCHA v2"
 
 #: ../libs/recaptcha_mye2i.py:18
 msgid "MyE2i Cloudflare solution"
-msgstr ""
+msgstr "ÐÐ¾Ñ ÑÐµÑÐµÐ½Ð¸Ðµ Ð´Ð»Ñ MyE2i Cloudflare"
 
 #: ../libs/recaptcha_mye2i.py:20
 msgid "MyE2i reCAPTCHA solution"
-msgstr ""
+msgstr "ÐÐ¾Ñ ÑÐµÑÐµÐ½Ð¸Ðµ Ð´Ð»Ñ MyE2i reCAPTCHA"
 
 #: ../components/recaptcha_mye2i_widget.py:100
 #, python-format
@@ -3237,14 +3151,16 @@
 "MyE2i script execution failed.\n"
 "Error code: %s\n"
 msgstr ""
+"ÐÑÐ¸Ð±ÐºÐ° Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ñ ÑÐºÑÐ¸Ð¿ÑÐ° MyE2i.\n"
+"ÐÐ¾Ð´ Ð¾ÑÐ¸Ð±ÐºÐ¸: %s\n"
 
 #: ../components/recaptcha_mye2i_widget.py:97
 msgid "MyE2i script finished."
-msgstr ""
+msgstr "ÐÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ðµ ÑÐºÑÐ¸Ð¿ÑÐ° MyE2i Ð·Ð°Ð²ÐµÑÑÐµÐ½Ð¾."
 
 #: ../hosts/hostmythewatchseries.py:69
 msgid "NEW RELEASE LIST"
-msgstr ""
+msgstr "Ð¡ÐÐÐ¡ÐÐ ÐÐÐÐ«Ð¥ Ð ÐÐÐÐÐÐ"
 
 #: ../hosts/hostwatchwrestlinguno.py:42 ../hosts/hostwatchwrestling.py:53
 msgid "NJPW"
@@ -3272,7 +3188,7 @@
 
 #: ../hosts/hostcartoonhd.py:535
 msgid "Network"
-msgstr ""
+msgstr "Ð¡ÐµÑÑ"
 
 #: ../libs/hcaptcha_2captcha.py:68 ../libs/hcaptcha_2captcha.py:82
 #: ../libs/recaptcha_v2_2captcha.py:68 ../libs/recaptcha_v2_2captcha.py:82
@@ -3280,11 +3196,11 @@
 #: ../libs/recaptcha_v2_9kw.py:68 ../libs/recaptcha_v2_9kw.py:82
 #, python-format
 msgid "Network failed %s."
-msgstr ""
+msgstr "Ð¡Ð±Ð¾Ð¹ ÑÐµÑÐ¸ %s."
 
 #: ../hosts/hostthewatchseriesto.py:25
 msgid "Never"
-msgstr ""
+msgstr "ÐÐ¸ÐºÐ¾Ð³Ð´Ð°"
 
 #: ../hosts/hostanimeodcinki.py:43 ../hosts/hostserienstreamto.py:81
 #: ../hosts/hostfilmativa.py:42 ../hosts/hostfilmativa.py:46
@@ -3293,9 +3209,8 @@
 msgstr "ÐÐ¾Ð²ÑÐ¹"
 
 #: ../hosts/hostfilmovizijastudio.py:51
-#, fuzzy
 msgid "New Episodes"
-msgstr "ÐÐ¾Ð²ÑÐµ ÑÐµÑÐ¸Ð¸"
+msgstr "ÐÐ¾Ð²ÑÐµ ÑÐ¿Ð¸Ð·Ð¾Ð´Ñ"
 
 #: ../hosts/hostfilmovizijastudio.py:48
 msgid "New Movies"
@@ -3326,22 +3241,19 @@
 msgstr "ÐÐ¾Ð²ÑÐµ ÑÐ¿Ð¸Ð·Ð¾Ð´Ñ"
 
 #: ../hosts/hostserijeonline.py:60
-#, fuzzy
 msgid "Newest Videos"
-msgstr "ÐÐ¾Ð²ÑÐµ ÐÐ¸Ð´ÐµÐ¾"
+msgstr "ÐÐ¾Ð²ÑÐµ Ð²Ð¸Ð´ÐµÐ¾"
 
 #: ../hosts/hostkinox.py:92
 msgid "News"
 msgstr "ÐÐ¾Ð²Ð¾ÑÑÐ¸"
 
 #: ../hosts/hostvumedicom.py:97
-#, fuzzy
 msgid "News Feed"
-msgstr "ÐÐ¾Ð²Ð¾ÑÑÐ¸"
+msgstr "ÐÐ¾Ð²Ð¾ÑÑÐ½Ð°Ñ Ð»ÐµÐ½ÑÐ°"
 
 #: ../libs/youtubeparser.py:641 ../libs/youtubeparser.py:792
 #: ../libs/youtubeparser.py:807
-#, fuzzy
 msgid "Next Page"
 msgstr "Ð¡Ð»ÐµÐ´ÑÑÑÐ°Ñ ÑÑÑÐ°Ð½Ð¸ÑÐ°"
 
@@ -3445,9 +3357,8 @@
 #: ../Web/webThreads.py:174 ../Web/webThreads.py:177
 #: ../components/configextmovieplayer.py:26
 #: ../subproviders/subprov_subscenecom.py:275
-#, fuzzy
 msgid "No"
-msgstr "Ð½ÐµÑ"
+msgstr "ÐÐµÑ"
 
 #: ../components/iptvplayerwidget.py:2126
 #: ../components/iptvsubdownloader.py:568
@@ -3455,16 +3366,16 @@
 "No item to display. \n"
 "Press OK to refresh.\n"
 msgstr ""
-"ÐÐ¸ÑÐµÐ³Ð¾ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾.\n"
+"ÐÐµÑÐµÐ³Ð¾ Ð¿Ð¾ÐºÐ°Ð·ÑÐ²Ð°ÑÑ. \n"
 "ÐÐ°Ð¶Ð¼Ð¸ÑÐµ ÐÐ, ÑÑÐ¾Ð±Ñ Ð¾Ð±Ð½Ð¾Ð²Ð¸ÑÑ.\n"
 
 #: ../Web/webSite.py:472
 msgid "No materials waiting in the downloader queue"
-msgstr ""
+msgstr "ÐÐµÑ Ð¼Ð°ÑÐµÑÐ¸Ð°Ð»Ð¾Ð², Ð¾Ð¶Ð¸Ð´Ð°ÑÑÐ¸Ñ Ð¾ÑÐµÑÐµÐ´Ð¸ Ð·Ð°Ð³ÑÑÐ·ÑÐ¸ÐºÐ°"
 
 #: ../hosts/hosttvplayercom.py:251
 msgid "No playable sources found."
-msgstr ""
+msgstr "ÐÐµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾ Ð½Ð¸ Ð¾Ð´Ð½Ð¾Ð³Ð¾ Ð²Ð¾ÑÐ¿ÑÐ¾Ð¸Ð·Ð²Ð¾Ð´Ð¸Ð¼Ð¾Ð³Ð¾ Ð¸ÑÑÐ¾ÑÐ½Ð¸ÐºÐ°."
 
 #: ../iptvupdate/updatemainwindow.py:119
 msgid "No steps to execute."
@@ -3476,13 +3387,13 @@
 
 #: ../hosts/hostkijknl.py:283
 msgid "No valid entitlement found for asset."
-msgstr ""
+msgstr "ÐÐµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾ Ð½Ð¸ÐºÐ°ÐºÐ¸Ñ Ð¿ÑÐ°Ð² Ð½Ð° Ð°ÐºÑÐ¸Ð²Ð¸Ð·Ð°ÑÐ¸Ñ."
 
 #: ../components/iptvplayerwidget.py:1613
 #: ../components/iptvplayerwidget.py:1854
 #: ../components/iptvplayerwidget.py:2233 ../hosts/hostfilmativa.py:200
 msgid "No valid links available."
-msgstr "Ð Ð°Ð±Ð¾ÑÐ°ÑÑÐ¸Ñ ÑÑÑÐ»Ð¾Ðº Ð½ÐµÑ."
+msgstr "ÐÐµÑ ÑÐ°Ð±Ð¾ÑÐ°ÑÑÐ¸Ñ ÑÑÑÐ»Ð¾Ðº."
 
 #: ../components/iptvconfigmenu.py:105 ../components/iptvextmovieplayer.py:814
 #: ../components/configextmovieplayer.py:78 ../hosts/hosticefilmsinfo.py:27
@@ -3496,51 +3407,48 @@
 #: ../hosts/hostlocalmedia.py:41 ../hosts/hostbsto.py:33
 #: ../hosts/hostfilmstreamvkcom.py:26 ../hosts/hostkinox.py:27
 msgid "None"
-msgstr "Ð½ÐµÑ"
+msgstr "ÐÐµÑ"
 
 #: ../hosts/hostekstraklasatv.py:172
 msgid "Not Free"
-msgstr ""
+msgstr "ÐÐµ Ð±ÐµÑÐ¿Ð»Ð°ÑÐ½ÑÐµ"
 
 #: ../Web/webSite.py:467
-#, fuzzy
 msgid "Nothing has been downloaded yet."
-msgstr "PIN-ÐºÐ¾Ð´ Ð±ÑÐ» Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½."
+msgstr "ÐÐ¾ÐºÐ° Ð½Ð¸ÑÐµÐ³Ð¾ Ð½Ðµ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½Ð¾."
 
 #: ../iptvupdate/updatemainwindow.py:628
 msgid "Nothing to do here."
-msgstr ""
+msgstr "ÐÐ´ÐµÑÑ Ð½ÐµÑÐµÐ³Ð¾ Ð´ÐµÐ»Ð°ÑÑ."
 
 #: ../hosts/hostekstraklasatv.py:244
 msgid "Now playing"
-msgstr "Ð¡ÐµÐ¹ÑÐ°Ñ Ð² Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ðµ"
+msgstr "Ð¡ÐµÐ¹ÑÐ°Ñ Ð¿ÑÐ¾Ð¸Ð³ÑÑÐ²Ð°ÐµÑÑÑ"
 
 #: ../components/iptvconfigmenu.py:444
 msgid "Number of downloaded files simultaneously"
-msgstr "ÐÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ Ð·Ð°Ð³ÑÑÐ¶Ð°ÐµÐ¼ÑÑ ÑÐ°Ð¹Ð»Ð¾Ð² Ð¾Ð´Ð½Ð¾Ð²ÑÐµÐ¼ÐµÐ½Ð½Ð¾"
+msgstr "ÐÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ Ð¾Ð´Ð½Ð¾Ð²ÑÐµÐ¼ÐµÐ½Ð½Ð¾ Ð·Ð°Ð³ÑÑÐ¶Ð°ÐµÐ¼ÑÑ ÑÐ°Ð¹Ð»Ð¾Ð²"
 
 #: ../components/iptvmultipleinputbox.py:106 ../components/confighost.py:111
 #: ../components/VirtualKeyBoard.py:106
 msgid "OK"
-msgstr ""
+msgstr "OK"
 
 #: ../iptvupdate/updatemainwindow.py:393
 msgid "Obtaining server list."
 msgstr "ÐÐ¾Ð»ÑÑÐµÐ½Ð¸Ðµ ÑÐ¿Ð¸ÑÐºÐ° ÑÐµÑÐ²ÐµÑÐ¾Ð²."
 
 #: ../libs/showsporttvcom.py:72
-#, fuzzy
 msgid "Off Air"
-msgstr "Ð ÑÑÐ¸ÑÐµ"
+msgstr "ÐÐµ Ð² ÑÑÐ¸ÑÐµ"
 
 #: ../libs/weebtv.py:59
 msgid "Offline channels"
 msgstr "ÐÑÑÐ»Ð°Ð¹Ð½ ÐºÐ°Ð½Ð°Ð»Ñ"
 
 #: ../hosts/hostplayrtsiw.py:299
-#, fuzzy
 msgid "Older"
-msgstr "Ð¡ÑÐ°ÑÑÐµ Ð³Ð¾Ð´"
+msgstr "Ð¡ÑÐ°ÑÑÐµ"
 
 #: ../libs/showsporttvcom.py:74 ../hosts/hosteurosportplayer.py:109
 msgid "On Air"
@@ -3548,33 +3456,30 @@
 
 #: ../hosts/hostzdfmediathek.py:43 ../hosts/hostardmediathek.py:43
 msgid "One link mode"
-msgstr "Ð ÐµÐ¶Ð¸Ð¼ ÐÐ´Ð½Ð° ÑÑÑÐ»ÐºÐ°"
+msgstr "Ð ÐµÐ¶Ð¸Ð¼ Ð¾Ð´Ð½Ð¾Ð¹ ÑÑÑÐ»ÐºÐ¸"
 
 #: ../hosts/hostsvtplayse.py:153 ../hosts/hostsvtplayse.py:361
 msgid "Only available in Sweden."
 msgstr "ÐÐ¾ÑÑÑÐ¿Ð½Ð¾ ÑÐ¾Ð»ÑÐºÐ¾ Ð² Ð¨Ð²ÐµÑÐ¸Ð¸."
 
-#: ../hosts/hostsvtplayse.py:261
 msgid "Only available in Sweden.\n"
 msgstr "ÐÐ¾ÑÑÑÐ¿Ð½Ð¾ ÑÐ¾Ð»ÑÐºÐ¾ Ð² Ð¨Ð²ÐµÑÐ¸Ð¸.\n"
 
 #: ../libs/urlparser.py:9217
-#, fuzzy
 msgid ""
 "Only logged in user have access.\n"
 "Please set login data in the host configuration under blue button."
 msgstr ""
-"Ð­ÑÐ¾Ñ ÑÐ·ÐµÐ» ÑÑÐµÐ±ÑÐµÑ ÑÐµÐ³Ð¸ÑÑÑÐ°ÑÐ¸Ð¸. \n"
-"ÐÐ°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ ÑÐ²Ð¾Ð¹ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ ÑÐ¾ÑÑ. ÐÐ¾ÑÑÑÐ¿ÐµÐ½ Ð¿Ð¾Ð´ ÑÐ¸Ð½ÑÑ ÐºÐ½Ð¾Ð¿ÐºÑ."
+"Ð­ÑÐ¾Ñ ÑÐ·ÐµÐ» ÑÑÐµÐ±ÑÐµÑ ÑÐµÐ³Ð¸ÑÑÑÐ°ÑÐ¸Ð¸.\n"
+"ÐÐ°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ ÑÐ²Ð¾Ð¹ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ ÑÐ¾ÑÑÐ°. ÐÐ¾ÑÑÑÐ¿Ð½Ð¾ Ð¿Ð¾ ÑÐ¸Ð½ÐµÐ¹ ÐºÐ½Ð¾Ð¿ÐºÐµ."
 
 #: ../Web/webParts.py:503
 msgid "Only music"
-msgstr ""
+msgstr "Ð¢Ð¾Ð»ÑÐºÐ¾ Ð¼ÑÐ·ÑÐºÐ°"
 
 #: ../Web/webParts.py:502
-#, fuzzy
 msgid "Only videos"
-msgstr "ÐÑÑÐ³Ð¸Ðµ Ð²Ð¸Ð´ÐµÐ¾"
+msgstr "Ð¢Ð¾Ð»ÑÐºÐ¾ Ð²Ð¸Ð´ÐµÐ¾"
 
 #: ../setup/iptvsetupimpl.py:411
 #, python-format
@@ -3585,14 +3490,19 @@
 "to be able to install binary components from %s server.\n"
 "Do you want to proceed?"
 msgstr ""
+"OpenSSL Ð² Ð²Ð°ÑÐµÐ¼ Ð¸Ð¼Ð¸Ð´Ð¶Ðµ Ð¸Ð¼ÐµÐµÑ ÑÐ°Ð·Ð½ÑÐµ Ð¸Ð¼ÐµÐ½Ð° Ð±Ð¸Ð±Ð»Ð¸Ð¾ÑÐµÐº, Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÐ¼ÑÑ %s.\n"
+"ÐÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼Ð¾ ÑÐ¾Ð·Ð´Ð°ÑÑ ÑÐ»ÐµÐ´ÑÑÑÐ¸Ðµ ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¸ÑÐµÑÐºÐ¸Ðµ ÑÑÑÐ»ÐºÐ¸:\n"
+"%s,\n"
+"ÑÑÐ¾Ð±Ñ Ð¸Ð¼ÐµÑÑ Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾ÑÑÑ ÑÑÑÐ°Ð½Ð°Ð²Ð»Ð¸Ð²Ð°ÑÑ Ð´Ð²Ð¾Ð¸ÑÐ½ÑÐµ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÑ Ñ ÑÐµÑÐ²ÐµÑÐ° %s.\n"
+"ÐÑ ÑÐ¾ÑÐ¸ÑÐµ Ð¿ÑÐ¾Ð´Ð¾Ð»Ð¶Ð¸ÑÑ?"
 
 #: ../setup/iptvsetupimpl.py:294 ../setup/iptvsetupimpl.py:324
 msgid "OpenSSL lib is needed by wget and rtmpdump utilities."
-msgstr "OpenSSL ÑÑÐµÐ±ÑÐµÑÑÑ Ð´Ð»Ñ Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¾Ð¹ ÑÐ°Ð±Ð¾ÑÑ Wget Ð¸Ð½ÑÑÑÑÐ¼ÐµÐ½ÑÐ° Ð¸ rtmpdump."
+msgstr "Ð¢ÑÐµÐ±ÑÐµÑÑÑ OpenSSL Ð´Ð»Ñ Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¾Ð¹ ÑÐ°Ð±Ð¾ÑÑ ÑÑÐ¸Ð»Ð¸Ñ wget Ð¸ rtmpdump."
 
 #: ../components/iptvextmovieplayer.py:410
 msgid "Opening. Please wait..."
-msgstr "ÐÑÐºÑÑÑÐ¸Ðµ. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ° , Ð¿Ð¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ ..."
+msgstr "ÐÑÐºÑÑÑÐ¸Ðµ. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ..."
 
 #: ../components/iptvplayerwidget.py:903 ../components/iptvsubdownloader.py:253
 msgid "Operation aborted!"
@@ -3603,41 +3513,36 @@
 msgstr "Ð¡Ð¾ÑÑÐ¸ÑÐ¾Ð²Ð°ÑÑ Ð¿Ð¾: "
 
 #: ../hosts/hosturllist.py:90
-#, fuzzy
 msgid "Other"
-msgstr "ÐÑÑÐ³Ð¸Ðµ"
+msgstr "ÐÑÑÐ³Ð¾Ðµ"
 
 #: ../hosts/hostwatchwrestling.py:54
-#, fuzzy
 msgid "Other Sports"
-msgstr "ÐÑÑÐ³Ð¸Ðµ Ð²Ð¸Ð´ÐµÐ¾"
+msgstr "ÐÑÑÐ³Ð¸Ðµ ÑÐ¿Ð¾ÑÑÐ¸Ð²Ð½ÑÐµ"
 
 #: ../hosts/hostwatchwrestlinguno.py:43 ../hosts/hostwptv.py:55
 msgid "Others"
 msgstr "ÐÑÑÐ³Ð¸Ðµ"
 
 #: ../hosts/hostddl.py:600
-#, fuzzy
 msgid "Others tags:"
-msgstr "ÐÑÑÐ³Ð¸Ðµ"
+msgstr "ÐÑÑÐ³Ð¸Ðµ ÑÐµÐ³Ð¸:"
 
 #: ../components/iptvconfigmenu.py:102
-#, fuzzy
 msgid "Own model"
-msgstr "Ð ÐµÐ¶Ð¸Ð¼ ÐÐ´Ð½Ð° ÑÑÑÐ»ÐºÐ°"
+msgstr "Ð¡Ð¾Ð±ÑÑÐ²ÐµÐ½Ð½Ð°Ñ Ð¼Ð¾Ð´ÐµÐ»Ñ"
 
 #: ../hosts/hostdancetrippin.py:38
-#, fuzzy
 msgid "PARTIES"
-msgstr "ÐÐ Ð¢ÐÐ¡Ð¢"
+msgstr "Ð¡Ð¢ÐÐ ÐÐÐ«"
 
 #: ../libs/filmonapi.py:93
 msgid "PAY"
-msgstr ""
+msgstr "ÐÐÐÐ¢ÐÐ«Ð"
 
 #: ../hosts/hostcartoonhd.py:535
 msgid "PEGI"
-msgstr ""
+msgstr "PEGI"
 
 #: ../Web/webParts.py:303 ../iptvdm/iptvlist.py:119
 msgid "PENDING"
@@ -3645,18 +3550,17 @@
 
 #: ../libs/mlbstreamtv.py:29 ../libs/bilasportpw.py:35
 msgid "PORT"
-msgstr ""
+msgstr "ÐÐÐ Ð¢"
 
 #: ../hosts/hosttvplayercom.py:135
 msgid "Paid"
-msgstr ""
+msgstr "ÐÐ¿Ð»Ð°ÑÐµÐ½Ð¾"
 
 #: ../libs/ustvnow.py:41 ../libs/videostar.py:47 ../libs/edemtv.py:43
 #: ../hosts/hostfilmynadzis.py:32 ../hosts/hostmrpiracy.py:52
 #: ../hosts/hoststreamliveto.py:39 ../hosts/hostekstraklasatv.py:42
-#, fuzzy
 msgid "Password"
-msgstr " ÐÐ°ÑÐ¾Ð»Ñ"
+msgstr "Ð¿Ð°ÑÐ¾Ð»Ñ"
 
 #: ../libs/weebtv.py:40
 msgid "Password:"
@@ -3664,7 +3568,7 @@
 
 #: ../hosts/hosttwitchtv.py:110
 msgid "Past premieres"
-msgstr ""
+msgstr "ÐÑÐµÐ´ÑÐ´ÑÑÐ¸Ðµ Ð¿ÑÐµÐ¼ÑÐµÑÑ"
 
 #: ../hosts/hostlocalmedia.py:587
 #, python-format
@@ -3677,15 +3581,15 @@
 
 #: ../Web/webParts.py:456
 msgid "Path:"
-msgstr ""
+msgstr "ÐÐ°ÑÑÑÑÑ:"
 
 #: ../iptvupdate/updatemainwindow.py:387
 msgid "Pending"
-msgstr "ÐÐ¾"
+msgstr "Ð Ð¾Ð¶Ð¸Ð´Ð°Ð½Ð¸Ð¸"
 
 #: ../hosts/hostvimeo.py:427
 msgid "People"
-msgstr ""
+msgstr "ÐÑÐ´Ð¸"
 
 #: ../components/iptvconfigmenu.py:752
 msgid "Pin has been changed."
@@ -3698,11 +3602,11 @@
 
 #: ../components/iptvconfigmenu.py:396
 msgid "Pin protection for configuration"
-msgstr "ÐÐ°ÑÐ¸ÑÐ° ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ Ð½Ð°ÑÑÑÐ¾ÐµÐº Ð¿Ð¸Ð½-ÐºÐ¾Ð´Ð¾Ð¼"
+msgstr "ÐÐ°ÑÐ¸ÑÐ° ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ PIN-ÐºÐ¾Ð´Ð¾Ð¼"
 
 #: ../components/iptvconfigmenu.py:395
 msgid "Pin protection for plugin"
-msgstr "ÐÐ°ÑÐ¸ÑÐ° Ð¿Ð»Ð°Ð³Ð¸Ð½Ð° Ð¿Ð¸Ð½-ÐºÐ¾Ð´Ð¾Ð¼"
+msgstr "ÐÐ°ÑÐ¸ÑÐ° Ð¿Ð»Ð°Ð³Ð¸Ð½Ð° PIN-ÐºÐ¾Ð´Ð¾Ð¼"
 
 #: ../components/iptvconfigmenu.py:389 ../hosts/hostlibrestream.py:31
 msgid "Platform"
@@ -3711,30 +3615,29 @@
 #: ../iptvdm/iptvdmui.py:275 ../iptvdm/iptvdmui.py:276
 #, python-format
 msgid "Play with [%s] player"
-msgstr "ÐÐ¾ÑÐ¿ÑÐ¾Ð¸Ð·Ð²ÐµÐ´ÐµÐ½Ð¸Ðµ Ð·Ð°Ð¿Ð¸ÑÐ¸ Ð² [%s]"
+msgstr "ÐÐ¾ÑÐ¿ÑÐ¾Ð¸Ð·Ð²ÐµÐ´ÐµÐ½Ð¸Ðµ Ð² [%s] Ð¿Ð»ÐµÐµÑÐµ"
 
 #: ../hosts/hosttwitchtv.py:56
-#, fuzzy
 msgid "PlayStation 4"
-msgstr "Ð¡ÑÐ°Ð½ÑÐ¸Ð¸"
+msgstr "PlayStation 4"
 
 #: ../hosts/hostekstraklasatv.py:180
 msgid "Playable from "
-msgstr ""
+msgstr "ÐÐ¾ÑÐ¿ÑÐ¾Ð¸Ð·Ð²Ð¾Ð´Ð¸ÑÑÑ Ñ "
 
 #: ../hosts/hostnuteczki.py:373
-#, fuzzy, python-format
+#, python-format
 msgid "Player %s"
-msgstr "IPTV ÐÐ»ÐµÐµÑ %s"
+msgstr "ÐÐ»ÐµÐµÑ %s"
 
 #: ../hosts/hostnuteczki.py:365
-#, fuzzy, python-format
+#, python-format
 msgid "Player %s: %s"
-msgstr "IPTV ÐÐ»ÐµÐµÑ %s"
+msgstr "ÐÐ»ÐµÐµÑ %s: %s"
 
 #: ../hosts/hostkijknl.py:324
 msgid "Player data parsing error."
-msgstr ""
+msgstr "ÐÑÐ¸Ð±ÐºÐ° Ð°Ð½Ð°Ð»Ð¸Ð·Ð° Ð´Ð°Ð½Ð½ÑÑ Ð¿Ð»ÐµÐµÑÐ°."
 
 #: ../hosts/hostyoutube.py:69 ../hosts/hostrtlmost.py:89
 msgid "Playlist"
@@ -3748,29 +3651,26 @@
 #: ../tools/e2ijs.py:43
 #, python-format
 msgid "Please consider restart your Engima2 and agree to install the %s utlity when the %s will propose this."
-msgstr ""
+msgstr "ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð´ÑÐ¼Ð°Ð¹ÑÐµ Ð¾ Ð¿ÐµÑÐµÐ·Ð°Ð¿ÑÑÐºÐµ Enigma2 Ð¸ ÑÐ¾Ð³Ð»Ð°ÑÐ¸ÑÐµÑÑ ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ ÑÑÐ¸Ð»Ð¸ÑÑ %s, ÐºÐ¾Ð³Ð´Ð° %s Ð¿ÑÐµÐ´Ð»Ð¾Ð¶Ð¸Ñ ÑÑÐ¾."
 
 #: ../hosts/hostfilmezz.py:336 ../hosts/hostserienstreamto.py:448
-#, fuzzy
 msgid "Please fill your login and password in the host configuration (available under blue button) and try again."
 msgstr ""
-"Ð­ÑÐ¾Ñ ÑÐ·ÐµÐ» ÑÑÐµÐ±ÑÐµÑ ÑÐµÐ³Ð¸ÑÑÑÐ°ÑÐ¸Ð¸. \n"
-"ÐÐ°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ ÑÐ²Ð¾Ð¹ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ ÑÐ¾ÑÑ. ÐÐ¾ÑÑÑÐ¿ÐµÐ½ Ð¿Ð¾Ð´ ÑÐ¸Ð½ÑÑ ÐºÐ½Ð¾Ð¿ÐºÑ."
+"ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð²Ð²ÐµÐ´Ð¸ÑÐµ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ ÑÐ¾ÑÑÐ° (Ð´Ð¾ÑÑÑÐ¿Ð½Ð¾ Ð¿Ð¾ ÑÐ¸Ð½ÐµÐ¹ ÐºÐ½Ð¾Ð¿ÐºÐµ)\n"
+"Ð¸ Ð¿Ð¾Ð²ÑÐ¾ÑÐ¸ÑÐµ Ð¿Ð¾Ð¿ÑÑÐºÑ."
 
 #: ../components/iptvplayerwidget.py:352
 msgid "Please make sure that the folder for cache data (set in the configuration) is writable."
-msgstr ""
+msgstr "Ð£Ð±ÐµÐ´Ð¸ÑÐµÑÑ, ÑÑÐ¾ Ð¿Ð°Ð¿ÐºÐ° Ð´Ð»Ñ Ð´Ð°Ð½Ð½ÑÑ ÐºÐµÑÐ° (Ð½Ð°ÑÑÑÐ¾ÐµÐ½Ð½Ð°Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸) Ð´Ð¾ÑÑÑÐ¿Ð½Ð° Ð´Ð»Ñ Ð·Ð°Ð¿Ð¸ÑÐ¸."
 
 #: ../hosts/hostfreediscpl.py:88
-#, fuzzy
 msgid "Please register and set login and password in the host configuration, to solve this problems permanently."
-msgstr ""
-"Ð­ÑÐ¾Ñ ÑÐ·ÐµÐ» ÑÑÐµÐ±ÑÐµÑ ÑÐµÐ³Ð¸ÑÑÑÐ°ÑÐ¸Ð¸. \n"
-"ÐÐ°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ ÑÐ²Ð¾Ð¹ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ ÑÐ¾ÑÑ. ÐÐ¾ÑÑÑÐ¿ÐµÐ½ Ð¿Ð¾Ð´ ÑÐ¸Ð½ÑÑ ÐºÐ½Ð¾Ð¿ÐºÑ."
+msgstr "ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð·Ð°ÑÐµÐ³Ð¸ÑÑÑÐ¸ÑÑÐ¹ÑÐµÑÑ Ð¸ ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÐµ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ ÑÐ¾ÑÑÐ°,\n"
+"ÑÑÐ¾Ð±Ñ ÑÐµÑÐ¸ÑÑ ÑÑÑ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ñ Ð½Ð°Ð²ÑÐµÐ³Ð´Ð°."
 
 #: ../iptvupdate/updatemainwindow.py:339
 msgid "Please remember that you use this plugin at your own risk."
-msgstr "ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð¼Ð½Ð¸ÑÐµ, ÑÑÐ¾ Ð²Ñ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÐµ ÑÑÐ¾Ñ Ð¿Ð»Ð°Ð³Ð¸Ð½ Ð½Ð° ÑÐ²Ð¾Ð¹ ÑÑÑÐ°Ñ Ð¸ ÑÐ¸ÑÐº."
+msgstr "ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð¼Ð½Ð¸ÑÐµ, ÑÑÐ¾ ÐÑ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÐµ ÑÑÐ¾Ñ Ð¿Ð»Ð°Ð³Ð¸Ð½ Ð½Ð° ÑÐ²Ð¾Ð¹ ÑÑÑÐ°Ñ Ð¸ ÑÐ¸ÑÐº."
 
 #: ../libs/sport365live.py:132
 msgid ""
@@ -3783,34 +3683,34 @@
 #: ../libs/pCommon.py:430
 #, python-format
 msgid "Please report this problem to the developer %s."
-msgstr ""
+msgstr "Ð¡Ð¾Ð¾Ð±ÑÐ¸ÑÐµ Ð¾Ð± ÑÑÐ¾Ð¹ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ðµ ÑÐ°Ð·ÑÐ°Ð±Ð¾ÑÑÐ¸ÐºÑ %s."
 
 #: ../hosts/hostserienstreamto.py:451
 msgid "Please retry later."
-msgstr ""
+msgstr "ÐÐ¾Ð²ÑÐ¾ÑÐ¸ÑÐµ Ð¿Ð¾Ð¿ÑÑÐºÑ Ð¿Ð¾Ð·Ð¶Ðµ."
 
 #: ../components/iptvplayerwidget.py:1774
-#, fuzzy, python-format
+#, python-format
 msgid "Please set valid %s in the %s configuration."
-msgstr "IPTV-ÐÐ»ÐµÐµÑ ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ñ ÑÐ¾ÑÑÐ°"
+msgstr "ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÐµ Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½ÑÐ¹ %s Ð² %s ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸."
 
 #: ../hosts/hostfreediscpl.py:86
 #, python-format
 msgid "Please visit \"%s\" and confirm that you are human."
-msgstr ""
+msgstr "ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾ÑÐµÑÐ¸ÑÐµ \"%s\" Ð¸ Ð¿Ð¾Ð´ÑÐ²ÐµÑÐ´Ð¸ÑÐµ, ÑÑÐ¾ Ð²Ñ Ð½Ðµ ÑÐ¾Ð±Ð¾Ñ."
 
 #: ../components/captcha_helper.py:62
 #, python-format
 msgid "Please visit %s to learn how to redirect this task to the external device."
-msgstr ""
+msgstr "ÐÐ¾ÑÐµÑÐ¸ÑÐµ %s, ÑÑÐ¾Ð±Ñ ÑÐ·Ð½Ð°ÑÑ, ÐºÐ°Ðº Ð¿ÐµÑÐµÐ½Ð°Ð¿ÑÐ°Ð²Ð¸ÑÑ ÑÑÑ Ð·Ð°Ð´Ð°ÑÑ Ð½Ð° Ð²Ð½ÐµÑÐ½ÐµÐµ ÑÑÑÑÐ¾Ð¹ÑÑÐ²Ð¾."
 
 #: ../iptvdm/iptvbuffui.py:527
 msgid "Please wait - downloading initialization data."
-msgstr ""
+msgstr "ÐÐ¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ.  ÐÐ°Ð³ÑÑÐ¶Ð°ÑÑÑÑ Ð´Ð°Ð½Ð½ÑÐµ Ð¸Ð½Ð¸ÑÐ¸Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ð¸."
 
 #: ../iptvdm/iptvbuffui.py:498
 msgid "Please wait for initialization data."
-msgstr ""
+msgstr "ÐÐ¾Ð¶Ð´Ð¸ÑÐµÑÑ, Ð¿Ð¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð´Ð°Ð½Ð½ÑÑ Ð¸Ð½Ð¸ÑÐ¸Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ð¸."
 
 #: ../setup/iptvsetupimpl.py:195
 msgid "Plugin can be run on one of the following platforms: sh4, mipsel, i686, armv7, armv5t."
@@ -3818,12 +3718,11 @@
 
 #: ../Web/webParts.py:207
 msgid "Plugin global settings"
-msgstr ""
+msgstr "ÐÐ»Ð¾Ð±Ð°Ð»ÑÐ½ÑÐµ Ð½Ð°ÑÑÑÐ¾Ð¹ÐºÐ¸ Ð¿Ð»Ð°Ð³Ð¸Ð½Ð°"
 
 #: ../hosts/hostmediayou.py:28 ../hosts/hosttvjworg.py:30
-#, fuzzy
 msgid "Polish"
-msgstr "Ð¡Ð¾Ð¾ÑÐ½Ð¾ÑÐµÐ½Ð¸Ðµ ÑÑÐ¾ÑÐ¾Ð½"
+msgstr "ÐÐ¾Ð»ÑÑÐºÐ¸Ðµ"
 
 #: ../components/iptvconfigmenu.py:420
 msgid "Polish proxy server url"
@@ -3835,33 +3734,31 @@
 #: ../hosts/hostfilmativa.py:48 ../hosts/hostustreamtv.py:31
 #: ../hosts/hosthoofootcom.py:35 ../hosts/hosttwitchtv.py:115
 msgid "Popular"
-msgstr "ÐÐ¾Ð¿ÑÐ»ÑÑÐ½ÑÐ¹"
+msgstr "ÐÐ¾Ð¿ÑÐ»ÑÑÐ½ÑÐµ"
 
 #: ../hosts/hostthewatchseriesto.py:50
 msgid "Popular Episodes"
 msgstr "ÐÐ¾Ð¿ÑÐ»ÑÑÐ½ÑÐµ ÑÐ¿Ð¸Ð·Ð¾Ð´Ñ"
 
 #: ../hosts/hosttwitchtv.py:480
-#, fuzzy
 msgid "Popularity: ?"
-msgstr "ÐÐ¾Ð¿ÑÐ»ÑÑÐ½Ð¾ÑÑÑ"
+msgstr "ÐÐ¾Ð¿ÑÐ»ÑÑÐ½Ð¾ÑÑÑ: ?"
 
 #: ../hosts/hostlaola1tv.py:40
 msgid "Portal:"
 msgstr "ÐÐ¾ÑÑÐ°Ð»:"
 
 #: ../hosts/hostngolos.py:26
-#, fuzzy
 msgid "Portuguese"
-msgstr "ÐÐ¾ÑÑÑÐ³Ð°Ð»ÑÑÐºÐ¸Ð¹"
+msgstr "ÐÐ¾ÑÑÑÐ³Ð°Ð»ÑÑÐºÐ¸Ðµ"
 
 #: ../hosts/hostddl.py:595
 msgid "Praise:"
-msgstr ""
+msgstr "Ð¦ÐµÐ½Ð°:"
 
 #: ../hosts/hostddl.py:597
 msgid "Praises:"
-msgstr ""
+msgstr "Ð¦ÐµÐ½Ñ:"
 
 #: ../hosts/hostzdfmediathek.py:40 ../hosts/hostardmediathek.py:40
 msgid "Prefered format"
@@ -3872,9 +3769,8 @@
 msgstr "ÐÑÐµÐ´Ð¿Ð¾ÑÑÐ¸ÑÐµÐ»ÑÐ½Ð¾Ðµ ÐºÐ°ÑÐµÑÑÐ²Ð¾"
 
 #: ../hosts/hosttvplayercom.py:49
-#, fuzzy
 msgid "Preferred bitrate"
-msgstr "ÐÑÐµÐ´Ð¿Ð¾ÑÑÐ¸ÑÐµÐ»ÑÐ½ÑÐ¹ ÑÐ¾ÑÐ¼Ð°Ñ:"
+msgstr "ÐÑÐµÐ´Ð¿Ð¾ÑÑÐ¸ÑÐµÐ»ÑÐ½ÑÐ¹ Ð±Ð¸ÑÑÐµÐ¹Ñ"
 
 #: ../hosts/hostbbcsport.py:42 ../hosts/hostbbciplayer.py:34
 #: ../hosts/hostsvtplayse.py:48 ../hosts/hosttvnowde.py:37
@@ -3882,9 +3778,8 @@
 msgstr "ÐÑÐµÐ´Ð¿Ð¾ÑÑÐ¸ÑÐµÐ»ÑÐ½ÑÐ¹ ÑÐ¾ÑÐ¼Ð°Ñ:"
 
 #: ../libs/sportstream365.py:30
-#, fuzzy
 msgid "Preferred language"
-msgstr "ÐÑÐµÐ´Ð¿Ð¾ÑÑÐ¸ÑÐµÐ»ÑÐ½Ð¾Ðµ ÐºÐ°ÑÐµÑÑÐ²Ð¾"
+msgstr "ÐÑÐµÐ´Ð¿Ð¾ÑÑÐ¸ÑÐµÐ»ÑÐ½ÑÐ¹ ÑÐ·ÑÐº"
 
 #: ../libs/videostar.py:44
 msgid "Preferred quality"
@@ -3893,16 +3788,15 @@
 #: ../libs/videostar.py:43 ../libs/filmonapi.py:30
 #: ../hosts/hostsportdeutschland.py:33
 msgid "Preferred streaming protocol"
-msgstr "ÐÑÐµÐ´Ð¿Ð¾ÑÑÐ¸ÑÐµÐ»ÑÐ½ÑÐ¹ Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð» Ð¿Ð¾ÑÐ¾ÐºÐ¾Ð²Ð¾Ð¹ Ð¿ÐµÑÐµÐ´Ð°ÑÐ¸"
+msgstr "ÐÑÐµÐ´Ð¿Ð¾ÑÑÐ¸ÑÐµÐ»ÑÐ½ÑÐ¹ Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð» Ð¿Ð¾ÑÐ¾ÐºÐ°"
 
 #: ../libs/weebtv.py:41
 msgid "Preferred video quality:"
-msgstr "ÐÑÐ±Ð¾Ñ ÐºÐ°ÑÐµÑÑÐ²Ð° Ð²Ð¸Ð´ÐµÐ¾:"
+msgstr "ÐÑÐµÐ´Ð¿Ð¾ÑÑÐ¸ÑÐµÐ»ÑÐ½Ð¾Ðµ ÐºÐ°ÑÐµÑÑÐ²Ð¾ Ð²Ð¸Ð´ÐµÐ¾:"
 
 #: ../hosts/hoststreamliveto.py:141
-#, fuzzy
 msgid "Premium"
-msgstr "ÐÑÐµÐ¼Ð¸ÑÐ¼ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ"
+msgstr "ÐÑÐµÐ¼Ð¸ÑÐ¼"
 
 #: ../libs/weebtv.py:37 ../libs/filmonapi.py:31
 msgid "Premium user"
@@ -3910,33 +3804,31 @@
 
 #: ../hosts/hostrtlmost.py:88
 msgid "Preview"
-msgstr "ÐÑÐµÐ´Ð²Ð°ÑÐ¸ÑÐµÐ»ÑÐ½ÑÐ¹ Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑ"
+msgstr "ÐÑÐµÐ´Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑ"
 
 #: ../hosts/hostourmatchnet.py:41
 msgid "Previous Seasons"
 msgstr "ÐÑÐµÐ´ÑÐ´ÑÑÐ¸Ðµ ÑÐµÐ·Ð¾Ð½Ñ"
 
 #: ../Web/webParts.py:375 ../Web/webParts.py:378 ../Web/webParts.py:380
-#, fuzzy
 msgid "Previous list"
-msgstr "ÐÑÐµÐ´ÑÐ´ÑÑÐ¸Ð¹"
+msgstr "ÐÑÐµÐ´ÑÐ´ÑÑÐ¸Ð¹ ÑÐ¿Ð¸ÑÐ¾Ðº"
 
 #: ../iptvupdate/updatemainwindow.py:632
-#, fuzzy
 msgid "Problem with copy binary.\n"
-msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ ÐºÐ°ÑÐ°Ð»Ð¾Ð³Ð¾Ð¼ [%s]."
+msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ ÐºÐ¾Ð¿Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸ÐµÐ¼ Ð±Ð¸Ð½Ð°ÑÐ½Ð¸ÐºÐ°.\n"
 
 #: ../iptvupdate/updatemainwindow.py:301
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Problem with copy files.\n"
 "Status[%d], outData[%s]"
 msgstr ""
-"ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ ÑÑÑÐ°Ð½Ð¾Ð²ÐºÐ¾Ð¹ Ð½Ð¾Ð²Ð¾Ð¹ Ð²ÐµÑÑÐ¸Ð¸.\n"
-"Ð¡ÑÐ°ÑÑÑ[%d], OutData[%s]"
+"ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ ÑÐ°Ð¹Ð»Ð°Ð¼Ð¸ ÐºÐ¾Ð¿Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ.\n"
+"Ð¡ÑÐ°ÑÑÑ[%d], Ð²ÑÑ. Ð´Ð°Ð½Ð½ÑÐµ[%s]"
 
 #: ../iptvupdate/updatemainwindow.py:1011
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Problem with decryption the archive. Return code [%d]\n"
 "%s."
@@ -3945,32 +3837,31 @@
 "%s."
 
 #: ../iptvupdate/updatemainwindow.py:970 ../iptvupdate/updatemainwindow.py:975
-#, fuzzy
 msgid "Problem with decryption the key."
-msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð¸ÐµÐ¼ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÑÑÐºÐ¸Ñ ÑÐºÑÐ¸Ð¿ÑÐ¾Ð² [%s]."
+msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ ÑÐ°ÑÑÐ¸ÑÑÐ¾Ð²ÐºÐ¾Ð¹ ÐºÐ»ÑÑÐ°."
 
 #: ../iptvupdate/updatemainwindow.py:953
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Problem with downloading the encryption key:\n"
 "[%s]."
 msgstr ""
-"ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¾Ð¹ Ð¿Ð°ÐºÐµÑÐ° Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ñ:\n"
+"ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¾Ð¹ ÐºÐ»ÑÑÐ° ÑÐ¸ÑÑÐ¾Ð²Ð°Ð½Ð¸Ñ::\n"
 "[%s]."
 
 #: ../iptvupdate/updatemainwindow.py:729 ../iptvupdate/updatemainwindow.py:936
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Problem with downloading the packet:\n"
 "[%s]."
 msgstr ""
-"ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¾Ð¹ Ð¿Ð°ÐºÐµÑÐ° Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ñ:\n"
+"ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¾Ð¹ Ð¿Ð°ÐºÐµÑÐ°:\n"
 "[%s]."
 
 #: ../iptvupdate/updatemainwindow.py:787
 #, python-format
 msgid "Problem with downloading the server list from [%s]."
-msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¾Ð¹ ÑÐ¿Ð¸ÑÐºÐ° ÑÐµÑÐ²ÐµÑÐ¾Ð² Ð¾Ñ [%s]."
+msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¾Ð¹ ÑÐ¿Ð¸ÑÐºÐ° ÑÐµÑÐ²ÐµÑÐ¾Ð² Ð¸Ð· [%s]."
 
 #: ../iptvupdate/updatemainwindow.py:990
 #, python-format
@@ -3978,7 +3869,7 @@
 "Problem with extracting the archive. Return code [%d]\n"
 "%s."
 msgstr ""
-"ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ ÑÐ°ÑÐ¿Ð°ÐºÐ¾Ð²ÐºÐ¾Ð¹ Ð°ÑÑÐ¸Ð²Ð°. ÐÐ¾Ð´ Ð²Ð¾Ð·Ð²ÑÐ°ÑÐ° [%d]\n"
+"ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ ÑÐ°ÑÐ¿Ð°ÐºÐ¾Ð²ÐºÐ¾Ð¹ Ð°ÑÑÐ¸Ð²Ð°. ÐÐ¾Ð·Ð²ÑÐ°ÑÑÐ½ ÐºÐ¾Ð´ [%d]\n"
 "%s."
 
 #: ../iptvupdate/updatemainwindow.py:300
@@ -3988,12 +3879,11 @@
 "Status[%d], outData[%s]"
 msgstr ""
 "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ ÑÑÑÐ°Ð½Ð¾Ð²ÐºÐ¾Ð¹ Ð½Ð¾Ð²Ð¾Ð¹ Ð²ÐµÑÑÐ¸Ð¸.\n"
-"Ð¡ÑÐ°ÑÑÑ[%d], OutData[%s]"
+"Ð¡ÑÐ°ÑÑÑ[%d], Ð²ÑÑ. Ð´Ð°Ð½Ð½ÑÐµ[%s]"
 
 #: ../iptvupdate/updatemainwindow.py:832
-#, fuzzy
 msgid "Problem with parsing the server list."
-msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¾Ð¹ ÑÐ¿Ð¸ÑÐºÐ° ÑÐµÑÐ²ÐµÑÐ¾Ð²."
+msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ ÑÐ°Ð·Ð±Ð¾ÑÐ¾Ð¼ ÑÐ¿Ð¸ÑÐºÐ° ÑÐµÑÐ²ÐµÑÐ¾Ð²."
 
 #: ../iptvupdate/updatemainwindow.py:244
 #, python-format
@@ -4007,17 +3897,15 @@
 "Status[%d], outData[%s]."
 msgstr ""
 "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ ÑÐ´Ð°Ð»ÐµÐ½Ð¸ÐµÐ¼ Ð¿ÑÐµÐ´ÑÐ´ÑÑÐµÐ¹ Ð²ÐµÑÑÐ¸Ð¸.\n"
-"Ð¡ÑÐ°ÑÑÑ[%d], OutData[%s]."
+"Ð¡ÑÐ°ÑÑÑ[%d], Ð²ÑÑ. Ð´Ð°Ð½Ð½ÑÐµ[%s]."
 
 #: ../iptvupdate/updatemainwindow.py:650
-#, fuzzy
 msgid "Problem with user script execution.\n"
-msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð¸ÐµÐ¼ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÑÑÐºÐ¸Ñ ÑÐºÑÐ¸Ð¿ÑÐ¾Ð² [%s]."
+msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð¸ÐµÐ¼ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÑÑÐºÐ¾Ð³Ð¾ ÑÐºÑÐ¸Ð¿ÑÐ°.\n"
 
 #: ../hosts/hostrtlmost.py:86
-#, fuzzy
 msgid "Program"
-msgstr "ÐÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ñ"
+msgstr "ÐÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð°"
 
 #: ../hosts/hostzdfmediathek.py:86 ../hosts/hostzdfmediathek.py:101
 #: ../hosts/hostardmediathek.py:67
@@ -4025,7 +3913,6 @@
 msgstr "ÐÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð° A-Z"
 
 #: ../hosts/hostrteieplayer.py:49
-#, fuzzy
 msgid "Programmes"
 msgstr "ÐÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ñ"
 
@@ -4039,11 +3926,11 @@
 
 #: ../iptvdm/iptvdmui.py:283
 msgid "Promote item"
-msgstr "ÐÐµÑÐµÐ¼ÐµÑÑÐ¸ÑÑ Ð² Ð½Ð°ÑÐ°Ð»Ð¾ ÑÐ¿Ð¸ÑÐºÐ°"
+msgstr "ÐÑÐ¾Ð´Ð²Ð¸Ð½ÑÑÑ Ð¿ÑÐ½ÐºÑ"
 
 #: ../hosts/hostbbcsport.py:189 ../hosts/hosthoofootcom.py:36
 msgid "Promoted"
-msgstr "ÐÐ¾Ð²ÑÑÐµÐ½"
+msgstr "ÐÑÐ¾Ð´Ð²Ð¸Ð³Ð°ÐµÐ¼ÑÐµ"
 
 #: ../hosts/hostwebstream.py:482
 msgid "Protocol: "
@@ -4051,61 +3938,57 @@
 
 #: ../hosts/hosthdfull.py:566
 msgid "Published:"
-msgstr ""
+msgstr "ÐÐ¿ÑÐ±Ð»Ð¸ÐºÐ¾Ð²Ð°Ð½Ð¾:"
 
 #: ../hosts/hostlibrestream.py:30
 msgid "Quality"
-msgstr "ÐÐ°ÑÐµÑÑÐ²ÐµÐ½Ð½ÑÐ¹"
+msgstr "ÐÐ°ÑÐµÑÑÐ²Ð¾"
 
 #: ../hosts/hosthdstreams.py:215 ../hosts/hostfilman.py:199
-#, fuzzy
 msgid "Quality:"
-msgstr "ÐÐ°ÑÐµÑÑÐ²ÐµÐ½Ð½ÑÐ¹"
+msgstr "ÐÐ°ÑÐµÑÑÐ²Ð¾:"
 
 #: ../libs/canlitvliveio.py:90
 msgid "RADIO"
-msgstr ""
+msgstr "Ð ÐÐÐÐ"
 
 #: ../components/configextmovieplayer.py:317
 msgid "RAM buffer size [MB] for local files"
-msgstr ""
+msgstr "Ð Ð°Ð·Ð¼ÐµÑ Ð±ÑÑÐµÑÐ° ÐÐÐ£ [ÐÐ] Ð´Ð»Ñ Ð»Ð¾ÐºÐ°Ð»ÑÐ½ÑÑ ÑÐ°Ð¹Ð»Ð¾Ð²"
 
 #: ../components/configextmovieplayer.py:316
 msgid "RAM buffer size [MB] for network protocols"
-msgstr ""
+msgstr "Ð Ð°Ð·Ð¼ÐµÑ Ð±ÑÑÐµÑÐ° ÐÐÐ£ [ÐÐ] Ð´Ð»Ñ ÑÐµÑÐµÐ²ÑÑ Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»Ð¾Ð²"
 
 #: ../hosts/hostguardaserie.py:234
 msgid "RATING"
-msgstr ""
+msgstr "Ð ÐÐÐ¢ÐÐÐ"
 
 #: ../hosts/hostwatchwrestlinguno.py:35 ../hosts/hostwatchwrestling.py:55
 msgid "RAW"
-msgstr ""
+msgstr "ÐÐ¡Ð¥ÐÐÐÐ«Ð"
 
 #: ../hosts/hostworldfree4u.py:44
 msgid "RECENT"
-msgstr ""
+msgstr "ÐÐÐÐÐÐÐÐ"
 
 #: ../Web/webParts.py:370
 msgid "REMEMBER: "
-msgstr ""
+msgstr "ÐÐÐÐÐÐÐÐ¢Ð: "
 
 #: ../hosts/hostplayrtsiw.py:105
-#, fuzzy
 msgid "Radio"
-msgstr "Ð Ð°Ð´Ð¸Ð¾ Ð² Ð¿ÑÑÐ¼Ð¾Ð¼ ÑÑÐ¸ÑÐµ"
+msgstr "Ð Ð°Ð´Ð¸Ð¾"
 
 #: ../components/configextmovieplayer.py:376
-#, fuzzy
 msgid "Radio iframe file"
-msgstr "Ð Ð°ÑÐ¿Ð¾Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ Ð¾ÑÐ¸ÑÑÐ¸ÑÑ Ð·Ð°ÑÑÐ°Ð²ÐºÐ¸"
+msgstr "Ð¤Ð°Ð¹Ð» ÑÑÑÐ½Ð¾Ð³Ð¾ Ð¿Ð¾Ð»Ñ Ð´Ð»Ñ ÑÐ°Ð´Ð¸Ð¾"
 
 #: ../hosts/hostdrdk.py:43
 msgid "Radio stations"
 msgstr "Ð Ð°Ð´Ð¸Ð¾ÑÑÐ°Ð½ÑÐ¸Ð¸"
 
 #: ../hosts/hostcartoonhd.py:552
-#, fuzzy
 msgid "Raiting"
 msgstr "Ð ÐµÐ¹ÑÐ¸Ð½Ð³"
 
@@ -4116,7 +3999,7 @@
 
 #: ../components/iptvplayerwidget.py:637
 msgid "Randomize a playlist"
-msgstr "Ð¤ÑÐ½ÐºÑÐ¸Ñ ÑÐ»ÑÑÐ°Ð¹Ð½Ð¾Ð³Ð¾ Ð²Ð¾ÑÐ¿ÑÐ¾Ð¸Ð·Ð²ÐµÐ´ÐµÐ½Ð¸Ñ"
+msgstr "Ð¡Ð»ÑÑÐ°Ð¹Ð½Ð¾Ðµ Ð²Ð¾ÑÐ¿ÑÐ¾Ð¸Ð·Ð²ÐµÐ´ÐµÐ½Ð¸Ðµ"
 
 #: ../hosts/hostdailymotion.py:54
 msgid "Ranking"
@@ -4128,28 +4011,26 @@
 msgstr "Ð ÐµÐ¹ÑÐ¸Ð½Ð³"
 
 #: ../hosts/hostcineto.py:114
-#, fuzzy, python-format
+#, python-format
 msgid "Rating %s"
-msgstr "Ð ÐµÐ¹ÑÐ¸Ð½Ð³"
+msgstr "Ð ÐµÐ¹ÑÐ¸Ð½Ð³ %s"
 
 #: ../hosts/hostmovizlandcom.py:248 ../hosts/hostfaselhdcom.py:131
 #: ../hosts/hostddl.py:570
-#, fuzzy
 msgid "Rating:"
-msgstr "Ð ÐµÐ¹ÑÐ¸Ð½Ð³"
+msgstr "Ð ÐµÐ¹ÑÐ¸Ð½Ð³:"
 
 #: ../hosts/hostgreekdocumentaries3.py:34 ../hosts/hosttwitchtv.py:116
 msgid "Recent"
-msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ð¹"
+msgstr "ÐÐµÐ´Ð°Ð²Ð½Ð¸Ðµ"
 
 #: ../Web/webSite.py:72
-#, fuzzy
 msgid "Redirect"
-msgstr "ÐÑÑÐ¼Ð°Ñ ÑÑÑÐ»ÐºÐ°"
+msgstr "ÐÐµÑÐµÐ°Ð´ÑÐµÑÐ°ÑÐ¸Ñ"
 
 #: ../components/iptvplayerwidget.py:187
 msgid "Refresh"
-msgstr "ÐÐ±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ"
+msgstr "ÐÑÐ²ÐµÐ¶Ð¸ÑÑ"
 
 #: ../components/iptvplayerwidget.py:1917
 #: ../components/iptvsubdownloader.py:486
@@ -4157,23 +4038,20 @@
 msgstr "ÐÐ±Ð½Ð¾Ð²Ð»ÑÐµÑÑÑ"
 
 #: ../hosts/hostyoutube.py:172 ../hosts/hostfilmstreamhdit.py:184
-#, fuzzy
 msgid "Release:"
-msgstr "Ð ÐµÐ»Ð¸Ð·Ñ"
+msgstr "ÐÑÐ¿ÑÑÐº:"
 
 #: ../hosts/hostaltadefinizione01.py:340
-#, fuzzy
 msgid "Relese"
-msgstr "Ð ÐµÐ»Ð¸Ð·Ñ"
+msgstr "ÐÑÐ¿ÑÑÐº"
 
 #: ../libs/youtubeparser.py:37
 msgid "Relevance"
-msgstr "ÐÐºÑÑÐ°Ð»ÑÐ½ÑÐ¹"
+msgstr "ÐÐºÑÑÐ°Ð»ÑÐ½Ð¾ÑÑÑ"
 
 #: ../Web/webParts.py:381
-#, fuzzy
 msgid "Reload list"
-msgstr "ÐÐ»ÐµÐ¹Ð»Ð¸ÑÑ"
+msgstr "ÐÐµÑÐµÐ·Ð°Ð³ÑÑÐ·Ð¸ÑÑ ÑÐ¿Ð¸ÑÐ¾Ðº"
 
 #: ../components/configextmovieplayer.py:308
 msgid "Remember last watched position"
@@ -4184,13 +4062,13 @@
 msgstr "Ð£Ð´Ð°Ð»Ð¸ÑÑ"
 
 #: ../components/playerselector.py:491
-#, fuzzy, python-format
+#, python-format
 msgid "Remove \"%s\" item"
-msgstr "Ð£Ð´Ð°Ð»Ð¸ÑÑ ÑÐ»ÐµÐ¼ÐµÐ½ÑÑ"
+msgstr "Ð£Ð´Ð°Ð»Ð¸ÑÑ Ð¿ÑÐ½ÐºÑ \"%s\""
 
 #: ../components/iptvconfigmenu.py:391
 msgid "Remove disabled services"
-msgstr "Ð£Ð´Ð°Ð»Ð¸ÑÑ ÑÐµÑÐ²Ð¸ÑÑ ÐºÐ¾ÑÐ¾ÑÑÐµ Ð½Ðµ ÑÐ°Ð±Ð¾ÑÐ°ÑÑ"
+msgstr "Ð£Ð´Ð°Ð»Ð¸ÑÑ Ð½ÐµÐ¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÐ¼ÑÐµ ÑÐµÑÐ²Ð¸ÑÑ"
 
 #: ../iptvdm/iptvdmui.py:281
 msgid "Remove file"
@@ -4203,7 +4081,7 @@
 
 #: ../components/iptvfavouriteswidgets.py:327 ../iptvdm/iptvdmui.py:282
 msgid "Remove item"
-msgstr "Ð£Ð´Ð°Ð»Ð¸ÑÑ ÑÐ»ÐµÐ¼ÐµÐ½ÑÑ"
+msgstr "Ð£Ð´Ð°Ð»Ð¸ÑÑ ÑÐ»ÐµÐ¼ÐµÐ½Ñ"
 
 #: ../iptvupdate/updatemainwindow.py:401
 msgid "Removing the old version."
@@ -4218,13 +4096,12 @@
 msgstr "ÐÐµÑÐµÐ¸Ð¼ÐµÐ½Ð¾Ð²Ð°ÑÑ"
 
 #: ../hosts/hostwatchwrestlinguno.py:33
-#, fuzzy
 msgid "Replay Shows"
-msgstr "Ð¢Ð Ð¨Ð¾Ñ"
+msgstr "ÐÐ¾Ð²ÑÐ¾ÑÐ½ÑÐµ ÑÐ¾Ñ"
 
 #: ../Web/webParts.py:67 ../Web/webParts.py:84
 msgid "Reset State"
-msgstr ""
+msgstr "Ð¡Ð¾ÑÑÐ¾ÑÐ½Ð¸Ðµ ÑÐ±ÑÐ¾ÑÐ°"
 
 #: ../libs/hcaptcha_2captcha.py:91
 #, python-format
@@ -4232,6 +4109,8 @@
 "Resolving hCaptcha with %s failed!\n"
 "\n"
 msgstr ""
+"ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ ÑÐµÑÐ¸ÑÑ hÐÐ°Ð¿ÑÐ° Ñ %s!\n"
+"\n"
 
 #: ../libs/recaptcha_v2_2captcha.py:91 ../libs/recaptcha_v3_2captcha.py:91
 #: ../libs/recaptcha_v2_9kw.py:91
@@ -4240,6 +4119,8 @@
 "Resolving reCaptcha with %s failed!\n"
 "\n"
 msgstr ""
+"Ð ÐµÑÐµÐ½Ð¸Ðµ reCaptcha Ñ %s Ð½Ðµ ÑÐ´Ð°Ð»Ð¾ÑÑ!\n"
+"\n"
 
 #: ../iptvupdate/updatemainwindow.py:352
 msgid ""
@@ -4250,18 +4131,16 @@
 "ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿ÐµÑÐµÐ·Ð°Ð³ÑÑÐ·Ð¸ÑÐµ ÑÑÐ½ÐµÑ Ð²ÑÑÑÐ½ÑÑ."
 
 #: ../Web/webParts.py:383
-#, fuzzy
 msgid "Return to hosts list"
-msgstr "Ð¡Ð¿Ð¸ÑÐ¾Ðº Ð¼ÑÐ»ÑÑÑÐ¸Ð»ÑÐ¼Ð¾Ð²"
+msgstr "ÐÐ¾Ð·Ð²ÑÐ°Ñ Ð² ÑÐ¿Ð¸ÑÐ¾Ðº ÑÐ¾ÑÑÐ¾Ð²"
 
 #: ../components/iptvplayerwidget.py:638
 msgid "Reverse a playlist"
 msgstr "ÐÐ¾Ð²ÑÐ¾ÑÐ¸ÑÑ Ð¿Ð»ÐµÐ¹Ð»Ð¸ÑÑ"
 
 #: ../hosts/hostmediayou.py:28
-#, fuzzy
 msgid "Russian"
-msgstr "Ð Ð¾ÑÑÐ¸Ñ"
+msgstr "Ð ÑÑÑÐºÐ¸Ðµ"
 
 #: ../components/iptvconfigmenu.py:422
 msgid "Russian proxy server url"
@@ -4269,15 +4148,15 @@
 
 #: ../hosts/hostplayrtsiw.py:473
 msgid "SHOWS"
-msgstr ""
+msgstr "Ð¨ÐÐ£"
 
 #: ../hosts/hostmusicmp3ru.py:356
 msgid "SONGS"
-msgstr ""
+msgstr "ÐÐÐ¡ÐÐ"
 
 #: ../Web/webParts.py:261 ../iptvdm/iptvdmui.py:183
 msgid "STARTED"
-msgstr "ÐÐÐÐ ÐÐ¦ÐÐ"
+msgstr "ÐÐÐÐ£Ð©ÐÐ"
 
 #: ../Web/webParts.py:257 ../iptvdm/iptvdmui.py:185
 msgid "STOPPED"
@@ -4287,7 +4166,7 @@
 #: ../components/iptvmultipleinputbox.py:38
 #: ../components/iptvmultipleinputbox.py:105
 msgid "Save"
-msgstr ""
+msgstr "Ð¡Ð¾ÑÑÐ°Ð½Ð¸ÑÑ"
 
 #: ../components/configbase.py:198 ../components/iptvfavouriteswidgets.py:299
 msgid "Save changes?"
@@ -4295,7 +4174,7 @@
 
 #: ../libs/showsporttvcom.py:155 ../hosts/hosteurosportplayer.py:110
 msgid "Schedule"
-msgstr ""
+msgstr "Ð Ð°ÑÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ"
 
 #: ../hosts/hostgamatocom.py:96
 msgid "Score at least: "
@@ -4377,14 +4256,13 @@
 msgstr "ÐÐ¾Ð¸ÑÐº"
 
 #: ../subproviders/subprov_opensubtitlesorg2.py:56
-#, fuzzy
 msgid "Search Movies and TV Series"
-msgstr "ÐÐ¾Ð¸ÑÐº ÑÐ¸Ð»ÑÐ¼Ð¾Ð²"
+msgstr "ÐÐ¾Ð¸ÑÐº ÑÐ¸Ð»ÑÐ¼Ð¾Ð² Ð¸ ÑÐµÑÐ¸Ð°Ð»Ð¾Ð²"
 
 #: ../hosts/hostplayrtsiw.py:473 ../hosts/hostplayrtsiw.py:490
-#, fuzzy, python-format
+#, python-format
 msgid "Search for \"%s\", %s, %s %s"
-msgstr "ÐÐ¾Ð¸ÑÐº ÑÐ¸Ð»ÑÐ¼Ð° \"%s\""
+msgstr "ÐÑÐºÐ°ÑÑ \"%s\", %s, %s %s"
 
 #: ../components/e2ivk.py:753 ../hosts/hostplayzcc.py:66
 #: ../hosts/hostdokumentalnenet.py:53 ../hosts/host3sktv.py:84
@@ -4462,22 +4340,20 @@
 msgstr "ÐÑÑÐ¾ÑÐ¸Ñ Ð¿Ð¾Ð¸ÑÐºÐ°"
 
 #: ../Web/webTools.py:47
-#, fuzzy
 msgid "Search in "
-msgstr "ÐÐ¾Ð¸ÑÐº "
+msgstr "ÐÐ¾Ð¸ÑÐº Ð² "
 
 #: ../Web/webParts.py:497
 msgid "Search in all active hosts"
-msgstr ""
+msgstr "ÐÐ¾Ð¸ÑÐº Ð½Ð° Ð²ÑÐµÑ Ð°ÐºÑÐ¸Ð²Ð½ÑÑ ÑÐ¾ÑÑÐ°Ñ"
 
 #: ../subproviders/subprov_opensubtitlesorg2.py:56
-#, fuzzy
 msgid "Search only in Movies"
-msgstr "ÐÐ¾Ð¸ÑÐº ÑÐ¸Ð»ÑÐ¼Ð¾Ð²"
+msgstr "ÐÑÐºÐ°ÑÑ ÑÐ¾Ð»ÑÐºÐ¾ Ð² ÑÐ¸Ð»ÑÐ¼Ð°Ñ"
 
 #: ../subproviders/subprov_opensubtitlesorg2.py:56
 msgid "Search only in TV Series"
-msgstr ""
+msgstr "ÐÑÐºÐ°ÑÑ ÑÐ¾Ð»ÑÐºÐ¾ Ð² ÑÐµÐ»ÐµÑÐµÑÐ¸Ð°Ð»Ð°Ñ"
 
 #: ../components/iptvplayerwidget.py:1902
 msgid "Search results"
@@ -4489,28 +4365,28 @@
 
 #: ../hosts/hostyoutube.py:63
 msgid "Search youtube materials "
-msgstr "ÐÐ¾Ð¸ÑÐº Ð¼Ð°ÑÐµÑÐ¸Ð°Ð»Ð¾Ð² Ð² YouTube"
+msgstr "ÐÐ¾Ð¸ÑÐº YouTube Ð¼Ð°ÑÐµÑÐ¸Ð°Ð»Ð¾Ð²"
 
 #: ../Web/webSite.py:189
-#, fuzzy, python-format
+#, python-format
 msgid "Searching in %s, please wait (%d)"
-msgstr "ÐÐ´ÐµÑ Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÐ°, Ð¿Ð¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ."
+msgstr "ÐÐ¾Ð¸ÑÐº Ð² %s. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ (%d)"
 
 #: ../components/iptvsubdownloader.py:680
 #, python-format
 msgid "Searching subtitles for \"%s\""
-msgstr "ÐÐ¾Ð¸ÑÐº ÑÑÐ±ÑÐ¸ÑÑÑ Ð´Ð»Ñ \"%s\""
+msgstr "ÐÐ¾Ð¸ÑÐº ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð² Ð´Ð»Ñ \"%s\""
 
 #: ../Web/webSite.py:187
-#, fuzzy, python-format
+#, python-format
 msgid "Searching, please wait (%d)"
-msgstr "ÐÐ´ÐµÑ Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÐ°, Ð¿Ð¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ."
+msgstr "ÐÐ¾Ð¸ÑÐº. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ (%d)"
 
 #: ../libs/moonwalkcc.py:267 ../hosts/hostdixmax.py:327
 #: ../hosts/hostdplayit.py:249 ../hosts/hostcartoonhd.py:239
 #: ../hosts/hostddl.py:463 ../subproviders/subprov_napiprojektpl.py:232
 msgid "Season"
-msgstr "ÐÑÐµÐ¼Ñ Ð³Ð¾Ð´Ð°"
+msgstr "Ð¡ÐµÐ·Ð¾Ð½"
 
 #: ../hosts/hostserialeco.py:169 ../hosts/hostserialeco.py:202
 #: ../hosts/hostuktvplay.py:180 ../hosts/hostszenestreamz.py:242
@@ -4521,79 +4397,75 @@
 #: ../subproviders/subprov_napisy24pl.py:239
 #, python-format
 msgid "Season %s"
-msgstr "ÐÑÐµÐ¼Ñ Ð³Ð¾Ð´Ð° %s"
+msgstr "Ð¡ÐµÐ·Ð¾Ð½ %s"
 
 #: ../hosts/hostdixmax.py:328
-#, fuzzy, python-format
+#, python-format
 msgid "Season %s (%s)"
-msgstr "ÐÑÐµÐ¼Ñ Ð³Ð¾Ð´Ð° %s"
+msgstr "Ð¡ÐµÐ·Ð¾Ð½ %s (%s)"
 
 #: ../hosts/hostgamatocom.py:197
-#, fuzzy, python-brace-format
+#, python-brace-format
 msgid "Season {0}"
-msgstr "ÐÑÐµÐ¼Ñ Ð³Ð¾Ð´Ð°"
+msgstr "Ð¡ÐµÐ·Ð¾Ð½ {0}"
 
 #: ../components/iptvconfigmenu.py:482 ../components/iptvconfigmenu.py:493
 #: ../components/iptvconfigmenu.py:504 ../components/iptvconfigmenu.py:515
 #: ../components/iptvconfigmenu.py:525
 msgid "Second movie player in buffering mode"
-msgstr "ÐÑÐ±Ð¾Ñ ÐÑÐ¾ÑÐ¾Ð³Ð¾ Ð¿Ð»ÐµÐµÑÐ° Ñ ÑÐµÐ¶Ð¸Ð¼Ð¾Ð¼ Ð±ÑÑÐµÑÐ¸Ð·Ð°ÑÐ¸Ð¸"
+msgstr "ÐÑÐ¾ÑÐ¾Ð¹ Ð²Ð¸Ð´ÐµÐ¾Ð¿Ð»ÐµÐµÑ Ð² ÑÐµÐ¶Ð¸Ð¼Ðµ Ð±ÑÑÐµÑÐ¸Ð·Ð°ÑÐ¸Ð¸"
 
 #: ../components/iptvconfigmenu.py:477 ../components/iptvconfigmenu.py:488
 #: ../components/iptvconfigmenu.py:499 ../components/iptvconfigmenu.py:510
 #: ../components/iptvconfigmenu.py:520
 msgid "Second movie player without buffering mode"
-msgstr "ÐÑÐ±Ð¾Ñ ÐÑÐ¾ÑÐ¾Ð³Ð¾ Ð¿Ð»ÐµÐµÑÐ°"
+msgstr "ÐÑÐ¾ÑÐ¾Ð¹ Ð²Ð¸Ð´ÐµÐ¾Ð¿Ð»ÐµÐµÑ Ð±ÐµÐ· ÑÐµÐ¶Ð¸Ð¼Ð° Ð±ÑÑÐµÑÐ¸Ð·Ð°ÑÐ¸Ð¸"
 
 #: ../hosts/hostted.py:126
 msgid "See all events"
-msgstr ""
+msgstr "Ð¡Ð¼Ð¾ÑÑÐµÑÑ Ð²ÑÐµ ÑÐ¾Ð±ÑÑÐ¸Ñ"
 
 #: ../hosts/hostted.py:115
-#, fuzzy
 msgid "See all languages"
-msgstr "ÐÑÐ±ÐµÑÐ¸ÑÐµ ÑÐ·ÑÐº"
+msgstr "Ð¡Ð¼Ð¾ÑÑÐµÑÑ Ð²ÑÐµ ÑÐ·ÑÐºÐ¸"
 
 #: ../hosts/hostted.py:109 ../hosts/hostted.py:144
-#, fuzzy
 msgid "See all topics"
-msgstr "ÐÑÐµ ÑÐ¸Ð¿Ñ"
+msgstr "Ð¡Ð¼Ð¾ÑÑÐµÑÑ Ð²ÑÐµ ÑÐµÐ¼Ñ"
 
 #: ../Web/webParts.py:435
 msgid "Select"
-msgstr "ÐÑÐ±ÑÐ°ÑÑ"
+msgstr "ÐÑÐ±Ð¾Ñ"
 
 #: ../components/iptvextmovieplayer.py:716
 #: ../components/iptvextmovieplayer.py:732
 #, python-format
 msgid "Select %s"
-msgstr "ÐÑÐ±ÐµÑÐ¸ÑÐµ %s"
+msgstr "ÐÑÐ±Ð¾Ñ %s"
 
 #: ../components/iptvplayerwidget.py:2258 ../iptvdm/iptvdmui.py:310
 msgid "Select action"
-msgstr "ÐÑÐ±ÐµÑÐ¸ÑÐµ Ð´ÐµÐ¹ÑÑÐ²Ð¸Ðµ"
+msgstr "ÐÑÐ±Ð¾Ñ Ð´ÐµÐ¹ÑÑÐ²Ð¸Ñ"
 
 #: ../components/iptvextmovieplayer.py:790
 msgid "Select audio track"
-msgstr "ÐÑÐ±Ð¾Ñ Ð°ÑÐ´Ð¸Ð¾ Ð´Ð¾ÑÐ¾Ð¶ÐºÐ¸"
+msgstr "ÐÑÐ±Ð¾Ñ Ð°ÑÐ´Ð¸Ð¾Ð´Ð¾ÑÐ¾Ð¶ÐºÐ¸"
 
 #: ../components/iptvconfigmenu.py:650
-#, fuzzy
 msgid "Select directory"
 msgstr "ÐÑÐ±Ð¾Ñ ÐºÐ°ÑÐ°Ð»Ð¾Ð³Ð°"
 
 #: ../components/iptvfavouriteswidgets.py:116
 msgid "Select favourite group"
-msgstr "ÐÑÐ±Ð¾Ñ Ð³ÑÑÐ¿Ð¿Ñ Ð¸Ð·Ð±ÑÐ°Ð½Ð½Ð¾Ðµ"
+msgstr "ÐÑÐ±Ð¾Ñ Ð³ÑÑÐ¿Ð¿Ñ Ð¸Ð·Ð±ÑÐ°Ð½Ð½Ð¾Ð³Ð¾"
 
 #: ../components/playerselector.py:524
-#, fuzzy
 msgid "Select group"
-msgstr "ÐÑÐ±ÐµÑÐ¸ÑÐµ Ð¾Ð¿ÑÐ¸Ñ"
+msgstr "ÐÑÐ±Ð¾Ñ Ð³ÑÑÐ¿Ð¿Ñ"
 
 #: ../components/e2ivk.py:783
 msgid "Select language"
-msgstr "ÐÑÐ±ÐµÑÐ¸ÑÐµ ÑÐ·ÑÐº"
+msgstr "ÐÑÐ±Ð¾Ñ ÑÐ·ÑÐºÐ°"
 
 #: ../components/iptvplayerwidget.py:1629
 msgid "Select link"
@@ -4601,22 +4473,21 @@
 
 #: ../components/iptvplayerwidget.py:785
 msgid "Select movie player"
-msgstr "ÐÑÐ±Ð¾Ñ Ð¿Ð»ÐµÐµÑÐ°"
+msgstr "ÐÑÐ±Ð¾Ñ Ð²Ð¸Ð´ÐµÐ¾Ð¿Ð»ÐµÐµÑÐ°"
 
 #: ../components/iptvchoicebox.py:53 ../components/iptvchoicebox.py:69
 #: ../components/playerselector.py:494 ../components/iptvplayerwidget.py:648
 #: ../components/confighost.py:156
 msgid "Select option"
-msgstr "ÐÑÐ±ÐµÑÐ¸ÑÐµ Ð¾Ð¿ÑÐ¸Ñ"
+msgstr "ÐÑÐ±Ð¾Ñ Ð¾Ð¿ÑÐ¸Ð¸"
 
 #: ../components/iptvimageselector.py:86
-#, fuzzy
 msgid "Select pictures"
-msgstr "ÐÑÐ±Ð¾Ñ ÑÑÐ»ÑÐ³Ð¸"
+msgstr "ÐÑÐ±Ð¾Ñ ÑÐ¾ÑÐ¾Ð³ÑÐ°ÑÐ¸Ð¹"
 
 #: ../components/iptvplayerwidget.py:1367
 msgid "Select service"
-msgstr "ÐÑÐ±Ð¾Ñ ÑÑÐ»ÑÐ³Ð¸"
+msgstr "ÐÑÐ±Ð¾Ñ ÑÐµÑÐ²Ð¸ÑÐ°"
 
 #: ../components/iptvextmovieplayer.py:899
 msgid "Select subtitles file"
@@ -4639,9 +4510,8 @@
 msgstr "ÐÑÐ±Ð¾Ñ ÐºÐ°ÑÐ°Ð»Ð¾Ð³Ð°"
 
 #: ../components/configbase.py:273
-#, fuzzy
 msgid "Select the file"
-msgstr "ÐÑÐ±Ð¾Ñ ÑÐ°Ð¹Ð»Ð° Ñ ÑÑÐ±ÑÐ¸ÑÑÐ°Ð¼Ð¸"
+msgstr "ÐÑÐ±Ð¾Ñ ÑÐ°Ð¹Ð»Ð°"
 
 #: ../iptvupdate/updatemainwindow.py:872
 msgid "Select update server"
@@ -4649,17 +4519,16 @@
 
 #: ../components/iptvextmovieplayer.py:694
 msgid "Select video option"
-msgstr "ÐÑÐ±Ð¾Ñ Ð²Ð¸Ð´ÐµÐ¾"
+msgstr "ÐÑÐ±Ð¾Ñ Ð²Ð¸Ð´ÐµÐ¾Ð¾Ð¿ÑÐ¸Ð¸"
 
 #: ../Web/webParts.py:84
-#, fuzzy
 msgid "Selected hosts"
-msgstr "ÐÑÐ±ÐµÑÐ¸ÑÐµ %s"
+msgstr "ÐÑÐ±ÑÐ°Ð½Ð½ÑÐµ ÑÐ¾ÑÑÑ"
 
 #: ../iptvupdate/updatemainwindow.py:919
 #, python-format
 msgid "Selected version [%s]."
-msgstr "ÐÑÐ±ÑÐ°Ð½Ð½ÑÐ¹ Ð²Ð°ÑÐ¸Ð°Ð½Ñ [%s]."
+msgstr "ÐÑÐ±ÑÐ°Ð½Ð½Ð°Ñ Ð²ÐµÑÑÐ¸Ñ [%s]."
 
 #: ../libs/recaptcha_v1.py:68 ../libs/urlparser.py:4431
 #: ../hosts/hostmooviecc.py:484 ../hosts/hostfreediscpl.py:113
@@ -4687,39 +4556,38 @@
 msgstr "Ð¡ÐµÑÐ¸Ð¸"
 
 #: ../hosts/hostlibrestream.py:29
-#, fuzzy
 msgid "Series TV"
-msgstr "Ð¡ÐµÑÐ¸Ð¸"
+msgstr "Ð¢Ð ÑÐµÑÐ¸Ð¸"
 
 #: ../hosts/hostthewatchseriesto.py:49
 msgid "Series list"
-msgstr "Ð¡Ð¿Ð¸ÑÐ¾Ðº ÑÐµÑÐ¸Ð¸"
+msgstr "Ð¡Ð¿Ð¸ÑÐ¾Ðº ÑÐµÑÐ¸Ð°Ð»Ð¾Ð²"
 
 #: ../hosts/hostcineto.py:387
 msgid "Server return 404 - Not Found."
-msgstr ""
+msgstr "ÐÐ¾Ð·Ð²ÑÐ°Ñ ÑÐµÑÐ²ÐµÑÐ°: 404 - ÑÑÑÐ°Ð½Ð¸ÑÐ° Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð°."
 
 #: ../subproviders/subprov_napisy24pl.py:103
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Service %s requires registration. \n"
 "Please fill your login and password in the %s configuration."
 msgstr ""
-"Ð­ÑÐ¾Ñ ÑÐ·ÐµÐ» ÑÑÐµÐ±ÑÐµÑ ÑÐµÐ³Ð¸ÑÑÑÐ°ÑÐ¸Ð¸. \n"
-"ÐÐ°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ ÑÐ²Ð¾Ð¹ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ ÑÐ¾ÑÑ. ÐÐ¾ÑÑÑÐ¿ÐµÐ½ Ð¿Ð¾Ð´ ÑÐ¸Ð½ÑÑ ÐºÐ½Ð¾Ð¿ÐºÑ."
+"Ð¡ÐµÑÐ²Ð¸Ñ %s ÑÑÐµÐ±ÑÐµÑ ÑÐµÐ³Ð¸ÑÑÑÐ°ÑÐ¸Ð¸.\n"
+"ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð·Ð°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ ÑÐ²Ð¾Ð¹ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ %s."
 
 #: ../components/confighost.py:146
 #, python-format
 msgid "Service [%s] has no additional settings."
-msgstr "ÐÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ñ [%s] Ð½ÐµÑ Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½ÑÑ Ð½Ð°ÑÑÑÐ¾ÐµÐº."
+msgstr "Ð¡ÐµÑÐ²Ð¸Ñ [%s] Ð½Ðµ Ð¸Ð¼ÐµÐµÑ Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½ÑÑ Ð½Ð°ÑÑÑÐ¾ÐµÐº."
 
 #: ../components/iptvconfigmenu.py:390 ../components/confighost.py:69
 msgid "Services configuration"
-msgstr "ÐÑÐ±Ð¾Ñ ÑÐµÑÐ²Ð¸ÑÐ¾Ð²-ÑÐ¾ÑÑÐ¾Ð² (ÐÐ°Ð¶Ð¼Ð¸ÑÐµ OK)"
+msgstr "ÐÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ñ ÑÐµÑÐ²Ð¸ÑÐ¾Ð² (Ð½Ð°Ð¶Ð¼Ð¸ÑÐµ OK)"
 
 #: ../hosts/hostiptvplayerinfo.py:55
 msgid "Services management"
-msgstr ""
+msgstr "Ð£Ð¿ÑÐ°Ð²Ð»ÐµÐ½Ð¸Ðµ ÑÑÐ»ÑÐ³Ð°Ð¼Ð¸"
 
 #: ../components/iptvplayerwidget.py:633
 msgid "Set active movie player"
@@ -4731,36 +4599,35 @@
 
 #: ../components/iptvconfigmenu.py:398
 msgid "Set pin code"
-msgstr "Ð£ÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÐµ Ð¿Ð¸Ð½-ÐºÐ¾Ð´"
+msgstr "Ð£ÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ pin-ÐºÐ¾Ð´"
 
 #: ../hosts/hostfavourites.py:268
 msgid "Set watched"
-msgstr "Ð£ÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ Ð½Ð°Ð±Ð»ÑÐ´Ð°ÐµÐ¼ÑÐ¹"
+msgstr "Ð£ÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑÐµÐ½Ð½ÑÐ¼"
 
 #: ../Web/webParts.py:84
-#, fuzzy
 msgid "Settings"
-msgstr "Ð¡ÐÐ¡ Ð³Ð¾Ð»Ð¾ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ"
+msgstr "ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ¸"
 
 #: ../components/iptvconfigmenu.py:540
 msgid "Show IPTVPlayer in extension list"
-msgstr "ÐÐ¾ÐºÐ°Ð·Ð°ÑÑ IPTV ÐÐ»ÐµÐµÑ Ð² Ð¼ÐµÐ½Ñ Ð¿Ð»Ð°Ð³Ð¸Ð½Ð¾Ð²"
+msgstr "ÐÐ¾ÐºÐ°Ð·Ð°ÑÑ IPTVPlayer Ð² Ð¼ÐµÐ½Ñ ÑÐ°ÑÑÐ¸ÑÐµÐ½Ð¸Ð¹"
 
 #: ../components/iptvconfigmenu.py:541
 msgid "Show IPTVPlayer in main menu"
-msgstr "ÐÐ¾ÐºÐ°Ð·Ð°ÑÑ IPTV ÐÐ»ÐµÐµÑ Ð² Ð³Ð»Ð°Ð²Ð½Ð¾Ð¼ Ð¼ÐµÐ½Ñ"
+msgstr "ÐÐ¾ÐºÐ°Ð·Ð°ÑÑ IPTVPlayer Ð² Ð³Ð»Ð°Ð²Ð½Ð¾Ð¼ Ð¼ÐµÐ½Ñ"
 
 #: ../libs/videostar.py:42 ../libs/weebtv.py:60
 msgid "Show all channels"
-msgstr "ÐÐ¾ÐºÐ°Ð·Ð°ÑÑ Ð²ÑÐµ ÐºÐ°Ð½Ð°Ð»Ñ"
+msgstr "ÐÐµÐ´Ð°Ð²Ð½Ð¸Ðµ Ð²ÑÐµ ÐºÐ°Ð½Ð°Ð»Ñ"
 
 #: ../components/iptvconfigmenu.py:351
 msgid "Show all version in the update menu"
-msgstr "ÐÐ¾ÐºÐ°Ð·Ð°ÑÑ Ð²ÑÐµ Ð²ÐµÑÑÐ¸Ð¸ Ð² Ð¼ÐµÐ½Ñ ÐÐ±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ"
+msgstr "ÐÐ¾ÐºÐ°Ð·Ð°ÑÑ Ð²ÑÐµ Ð²ÐµÑÑÐ¸Ð¸ Ð² Ð¼ÐµÐ½Ñ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ð¹"
 
 #: ../components/iptvconfigmenu.py:443
 msgid "Show download manager after adding new item"
-msgstr "ÐÐ¾ÐºÐ°Ð·Ð°ÑÑ Ð¼ÐµÐ½ÐµÐ´Ð¶ÐµÑ Ð·Ð°Ð³ÑÑÐ·Ð¾Ðº Ð¿Ð¾ÑÐ»Ðµ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ñ Ð½Ð¾Ð²Ð¾Ð³Ð¾ ÑÐ°Ð¹Ð»Ð°"
+msgstr "ÐÐ¾ÐºÐ°Ð· Ð·Ð°Ð³ÑÑÐ·. Ð¼ÐµÐ½ÐµÐ´Ð¶ÐµÑÐ° Ð¿Ð¾ÑÐ»Ðµ Ð²Ð²Ð¾Ð´Ð° Ð½Ð¾Ð²Ð¾Ð¹ Ð·Ð°Ð´Ð°ÑÐ¸"
 
 #: ../hosts/hostlocalmedia.py:51
 msgid "Show file size"
@@ -4775,17 +4642,16 @@
 msgstr "ÐÐ¾ÐºÐ°Ð·Ð°ÑÑ ÑÐºÑÑÑÑÐµ ÑÐ°Ð¹Ð»Ñ"
 
 #: ../components/configextmovieplayer.py:374
-#, fuzzy
 msgid "Show iframe during audio playback"
-msgstr "ÐÐºÐ»ÑÑÐ¸ÑÑ Ð·Ð°ÑÑÐ°Ð²ÐºÑ Ð² ÑÐµÐ¶Ð¸Ð¼Ðµ Ð°ÑÐ´Ð¸"
+msgstr "ÐÐ¾ÐºÐ°Ð·Ð°ÑÑ ÑÑÑÐ½Ð¾Ðµ Ð¿Ð¾Ð»Ðµ Ð²Ð¾ Ð²ÑÐµÐ¼Ñ Ð²Ð¾ÑÐ¿ÑÐ¾Ð¸Ð·Ð²ÐµÐ´ÐµÐ½Ð¸Ñ Ð·Ð²ÑÐºÐ°"
 
 #: ../hosts/hosttvnowde.py:36
 msgid "Show items with DRM"
-msgstr "ÐÐ¾ÐºÐ°Ð·ÑÐ²Ð°ÑÑ ÑÐ»ÐµÐ¼ÐµÐ½ÑÑ Ñ DRM"
+msgstr "ÐÐ¾ÐºÐ°Ð·ÑÐ²Ð°ÑÑ Ð¿ÑÐ½ÐºÑÑ Ñ DRM"
 
 #: ../hosts/hosttvnowde.py:35
 msgid "Show paid items (it may be illegal)"
-msgstr "ÐÐ¾ÐºÐ°Ð·ÑÐ²Ð°ÑÑ Ð¿Ð»Ð°ÑÐ½ÑÐµ Ð¿ÑÐµÐ´Ð¼ÐµÑÑ (ÑÑÐ¾ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð½ÐµÐ·Ð°ÐºÐ¾Ð½Ð½Ð¾)"
+msgstr "ÐÐ¾ÐºÐ°Ð·ÑÐ²Ð°ÑÑ Ð¿Ð»Ð°ÑÐ½ÑÐµ (ÑÑÐ¾ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð½ÐµÐ·Ð°ÐºÐ¾Ð½Ð½Ð¾)"
 
 #: ../components/iptvconfigmenu.py:543
 msgid "Show update icon in service selection menu"
@@ -4796,9 +4662,8 @@
 msgstr "Ð¨Ð¾Ñ"
 
 #: ../components/iptvconfigmenu.py:75
-#, fuzzy
 msgid "Simple list"
-msgstr "Ð¡Ð¿Ð¸ÑÐ¾Ðº Ð°Ð½Ð¸Ð¼Ðµ"
+msgstr "ÐÑÐ¾ÑÑÐ¾Ð¹ ÑÐ¿Ð¸ÑÐ¾Ðº"
 
 #: ../components/iptvsubsimpledownloader.py:51
 msgid "Simple subtitles downloader"
@@ -4806,12 +4671,11 @@
 
 #: ../components/iptvsubdownloader.py:574
 msgid "Simplify the title and try again."
-msgstr "Ð£Ð¿ÑÐ¾ÑÑÐ¸ÑÑ Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ðµ Ð¸ Ð¿Ð¾Ð²ÑÐ¾ÑÐ¸ÑÐµ Ð¿Ð¾Ð¿ÑÑÐºÑ."
+msgstr "Ð£Ð¿ÑÐ¾ÑÑÐ¸ÑÐµ Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ðµ Ð¸ Ð¿Ð¾Ð²ÑÐ¾ÑÐ¸ÑÐµ Ð¿Ð¾Ð¿ÑÑÐºÑ."
 
 #: ../components/e2isimpledownloader.py:43
-#, fuzzy
 msgid "Single file downloader"
-msgstr "ÐÐ°Ð³ÑÑÐ·ÑÐ¸Ðº Ð¿ÑÐ¾ÑÑÑÑ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
+msgstr "ÐÐ´Ð¸Ð½Ð¾ÑÐ½ÑÐ¹ Ð·Ð°Ð³ÑÑÐ·ÑÐ¸Ðº ÑÐ°Ð¹Ð»Ð¾Ð²"
 
 #: ../components/iptvconfigmenu.py:400
 msgid "Skin"
@@ -4819,34 +4683,32 @@
 
 #: ../components/configextmovieplayer.py:310
 msgid "Skip video shorter than [min]"
-msgstr ""
+msgstr "ÐÑÐ¾Ð¿ÑÑÑÐ¸ÑÑ Ð²Ð¸Ð´ÐµÐ¾ ÐºÐ¾ÑÐ¾ÑÐµ [Ð¼Ð¸Ð½]"
 
 #: ../iptvupdate/updatemainwindow.py:489 ../iptvupdate/updatemainwindow.py:500
 #: ../iptvupdate/updatemainwindow.py:509 ../iptvupdate/updatemainwindow.py:521
 msgid "Skipped."
-msgstr ""
+msgstr "ÐÑÐ¾Ð¿ÑÑÐµÐ½Ð¾."
 
 #: ../setup/iptvsetupwidget.py:99
 msgid ""
 "Skipping IPTVPlayer setup may cause problems.\n"
 "Are you sure to skip IPTVPlayer setup?"
 msgstr ""
-"ÐÑÐ¾Ð¿ÑÑÐº ÑÑÑÐ°Ð½Ð¾Ð²ÐºÐ¸ Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½Ð¾Ð³Ð¾, Ð¼Ð¾Ð¶ÐµÑ Ð¿ÑÐ¸Ð²ÐµÑÑÐ¸ Ðº Ð´ÐµÑÐµÐºÑÑ Ð¿Ð»Ð°Ð³Ð¸Ð½Ð°. \n"
-"ÐÑÐ¾Ð¿ÑÑÑÐ¸ÑÑ ÑÑÑÐ°Ð½Ð¾Ð²ÐºÑ Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½ÑÑ Ð¼Ð¾Ð´ÑÐ»ÐµÐ¹. ÐÑ ÑÐ²ÐµÑÐµÐ½Ñ?"
+"ÐÑÐ¾Ð¿ÑÑÐº ÑÑÑÐ°Ð½Ð¾Ð²Ð¾Ðº IPTVPlayer Ð¼Ð¾Ð¶ÐµÑ Ð²ÑÐ·Ð²Ð°ÑÑ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ñ. \n"
+"ÐÑ ÑÐ¾ÑÐ¸ÑÐµ Ð¿ÑÐ¾Ð¿ÑÑÑÐ¸ÑÑ ÑÑÑÐ°Ð½Ð¾Ð²ÐºÑ?"
 
 #: ../hosts/hostwatchwrestlinguno.py:36 ../hosts/hostwatchwrestling.py:56
-#, fuzzy
 msgid "Smackdown"
 msgstr "ÐÐ±ÑÑÑÐ¸ÑÑ"
 
 #: ../components/configextmovieplayer.py:326
 msgid "Software decoding as"
-msgstr "ÐÐµÐºÐ¾Ð´Ð¸ÑÐ¾Ð²Ð°ÑÑ"
+msgstr "ÐÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð½Ð¾Ðµ Ð´ÐµÐºÐ¾Ð´Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ, ÐºÐ°Ðº"
 
 #: ../components/iptvconfigmenu.py:57
-#, fuzzy
 msgid "Software floating point"
-msgstr "ÐÐµÐºÐ¾Ð´Ð¸ÑÐ¾Ð²Ð°ÑÑ"
+msgstr "ÐÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð½Ð°Ñ Ð¿Ð»Ð°Ð²Ð°ÑÑÐ°Ñ ÑÐ¾ÑÐºÐ°"
 
 #: ../components/configextmovieplayer.py:280
 msgid "Some changes will be applied only after movie player restart."
@@ -4858,11 +4720,11 @@
 "Do you want to perform update now?"
 msgstr ""
 "ÐÐµÐºÐ¾ÑÐ¾ÑÑÐµ Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½Ð¸Ñ Ð±ÑÐ´ÑÑ Ð¿ÑÐ¸Ð¼ÐµÐ½ÐµÐ½Ñ ÑÐ¾Ð»ÑÐºÐ¾ Ð¿Ð¾ÑÐ»Ðµ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ñ Ð¿Ð»Ð°Ð³Ð¸Ð½Ð°.\n"
-"ÐÑ ÑÐ¾ÑÐ¸ÑÐµ, ÑÑÐ¾Ð±Ñ Ð²ÑÐ¿Ð¾Ð»Ð½Ð¸ÑÑ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ?"
+"ÐÑ ÑÐ¾ÑÐ¸ÑÐµ Ð²ÑÐ¿Ð¾Ð»Ð½Ð¸ÑÑ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ ÑÐµÐ¹ÑÐ°Ñ?"
 
 #: ../hosts/hosttvplayercom.py:274
 msgid "Sorry. TVPlayer is currently only available in the United Kingdom"
-msgstr ""
+msgstr "Ð¡Ð¾Ð¶Ð°Ð»ÐµÐµÐ¼. TVPlayer Ð² Ð½Ð°ÑÑÐ¾ÑÑÐµÐµ Ð²ÑÐµÐ¼Ñ Ð´Ð¾ÑÑÑÐ¿ÐµÐ½ ÑÐ¾Ð»ÑÐºÐ¾ Ð² ÐÐµÐ»Ð¸ÐºÐ¾Ð±ÑÐ¸ÑÐ°Ð½Ð¸Ð¸"
 
 #: ../hosts/hostlocalmedia.py:50
 msgid "Sort alphabetically"
@@ -4878,7 +4740,7 @@
 
 #: ../hosts/hostyoutube.py:34
 msgid "Sort by:"
-msgstr "Ð¡Ð¾ÑÑÐ¸ÑÐ¾Ð²Ð°ÑÑ Ð¿Ð¾:"
+msgstr "Ð¡Ð¾ÑÑÐ¸ÑÐ¾Ð²ÐºÐ° Ð¿Ð¾:"
 
 #: ../hosts/hosturllist.py:33
 msgid "Sort the list:"
@@ -4894,17 +4756,16 @@
 
 #: ../libs/weebtv.py:57
 msgid "Sorted most viewed channels now [live]"
-msgstr "Ð¡Ð¾ÑÑÐ¸ÑÐ¾Ð²ÐºÐ° ÐºÐ°Ð½Ð°Ð»Ð¾Ð², ÑÐ°Ð¼ÑÑ Ð¿Ð¾Ð¿ÑÐ»ÑÑÐ½ÑÑ Ð² Ð½Ð°ÑÑÐ¾ÑÑÐµÐµ Ð²ÑÐµÐ¼Ñ [Ð¿ÑÑÐ¼Ð¾Ð¹ ÑÑÐ¸Ñ]"
+msgstr "Ð¡Ð¾ÑÑÐ¸ÑÐ¾Ð²ÐºÐ° ÑÐ°Ð¼ÑÑ Ð¿Ð¾Ð¿ÑÐ»ÑÑÐ½ÑÑ Ð² Ð½Ð°ÑÑÐ¾ÑÑÐµÐµ Ð²ÑÐµÐ¼Ñ ÐºÐ°Ð½Ð°Ð»Ð¾Ð² [Ð¿ÑÑÐ¼Ð¾Ð¹ ÑÑÐ¸Ñ]"
 
 #: ../libs/urlparser.py:6101
 #, python-format
 msgid "Source %s"
-msgstr ""
+msgstr "ÐÑÑÐ¾ÑÐ½Ð¸Ðº %s"
 
 #: ../hosts/hostekstraklasatv.py:166
-#, fuzzy
 msgid "Source type"
-msgstr "Ð¢Ð¸Ð¿ Ð¿Ð¾Ð¸ÑÐºÐ°"
+msgstr "Ð¢Ð¸Ð¿ Ð¸ÑÑÐ¾ÑÐ½Ð¸ÐºÐ°"
 
 #: ../hosts/hosthdfull.py:34 ../hosts/hostngolos.py:26
 msgid "Spanish"
@@ -4912,14 +4773,13 @@
 
 #: ../hosts/hostvumedicom.py:82
 msgid "Specialities"
-msgstr ""
+msgstr "Ð¡Ð¿ÐµÑÐ¸Ð°Ð»ÑÐ½Ð¾ÑÑÐ¸"
 
 #: ../hosts/hosticefilmsinfo.py:78
 msgid "Stand-Up"
-msgstr "ÐÑÑÐ°Ð½ÑÑÐµ"
+msgstr "ÐÐ°Ð³Ð¾Ð²Ð¾Ñ"
 
 #: ../libs/weebtv.py:32
-#, fuzzy
 msgid "Standard"
 msgstr "Ð¡ÑÐ°Ð½Ð´Ð°ÑÑ"
 
@@ -4935,29 +4795,27 @@
 #: ../iptvupdate/updatemainwindow.py:87
 #, python-format
 msgid "Step [%s] cannot be aborted. Please wait."
-msgstr "ÐÐºÑÐ¸Ð²Ð°ÑÐ¸Ñ [%s] Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð¿ÑÐµÑÐ²Ð°Ð½Ð°. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ."
+msgstr "Ð­ÑÐ°Ð¿ [%s] Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð¿ÑÐµÑÐ²Ð°Ð½. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ."
 
 #: ../components/configextmovieplayer.py:327
 msgid "Stereo downmix mode for software decoder"
-msgstr "Ð¡ÑÐµÑÐµÐ¾ Ð¼Ð¸ÐºÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ Ð´Ð»Ñ Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð½Ð¾Ð³Ð¾ Ð´ÐµÐºÐ¾Ð´ÐµÑÐ°"
+msgstr "Ð¡ÑÐµÑÐµÐ¾Ð¼Ð¸ÐºÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ Ð´Ð»Ñ Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð½Ð¾Ð³Ð¾ Ð´ÐµÐºÐ¾Ð´ÐµÑÐ°"
 
 #: ../Web/webParts.py:258 ../Web/webParts.py:262 ../iptvdm/iptvdmui.py:76
 msgid "Stop"
 msgstr "Ð¡ÑÐ¾Ð¿"
 
 #: ../Web/webParts.py:313
-#, fuzzy
 msgid "Stop download"
-msgstr "ÐÑÑÐ°Ð½Ð¾Ð²ÐºÐ° Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸"
+msgstr "ÐÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ Ð·Ð°Ð³ÑÑÐ·ÐºÑ"
 
 #: ../iptvdm/iptvdmui.py:280
 msgid "Stop downloading"
 msgstr "ÐÑÑÐ°Ð½Ð¾Ð²ÐºÐ° Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸"
 
 #: ../components/iptvextmovieplayer.py:542
-#, fuzzy
 msgid "Stop playback with buffer save"
-msgstr "ÐÑÐ±ÑÐ°ÑÑ Ð¿Ð»ÐµÐµÑ Ð±ÐµÐ· ÑÐµÐ¶Ð¸Ð¼Ð° Ð±ÑÑÐµÑÐ¸Ð·Ð°ÑÐ¸Ð¸"
+msgstr "ÐÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ Ð²Ð¾ÑÐ¿ÑÐ¾Ð¸Ð·Ð²ÐµÐ´ÐµÐ½Ð¸Ðµ Ñ ÑÐ¾ÑÑÐ°Ð½ÐµÐ½Ð¸ÐµÐ¼ Ð±ÑÑÐµÑÐ°"
 
 #: ../iptvdm/iptvbuffui.py:267 ../iptvdm/iptvbuffui.py:297
 msgid "Stop playing?"
@@ -4966,28 +4824,27 @@
 #: ../hosts/hostekstraklasatv.py:342
 #, python-format
 msgid "Stream starts from %s"
-msgstr ""
+msgstr "ÐÐ°ÑÐ°Ð»Ð¾ Ð¿Ð¾ÑÐ¾ÐºÐ° Ñ %s"
 
 #: ../hosts/hostappletrailers.py:104
-#, fuzzy
 msgid "Studio:"
-msgstr "ÐÑÐ´Ð¸Ð¾"
+msgstr "Ð¡ÑÑÐ´Ð¸Ñ:"
 
 #: ../components/configextmovieplayer.py:353
 msgid "Subtitle background"
-msgstr "    Ð¤Ð¾Ð½ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
+msgstr "Ð¤Ð¾Ð½ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
 
 #: ../components/configextmovieplayer.py:364
 msgid "Subtitle border color"
-msgstr "    Ð¦Ð²ÐµÑ Ð³ÑÐ°Ð½Ð¸ÑÑ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
+msgstr "Ð¦Ð²ÐµÑ Ð³ÑÐ°Ð½Ð¸ÑÑ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
 
 #: ../components/configextmovieplayer.py:362
 msgid "Subtitle border enabled"
-msgstr "    ÐÐºÐ»ÑÑÐ¸ÑÑ Ð³ÑÐ°Ð½Ð¸ÑÑ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð² "
+msgstr "ÐÐºÐ»ÑÑÐ¸ÑÑ Ð³ÑÐ°Ð½Ð¸ÑÑ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
 
 #: ../components/configextmovieplayer.py:365
 msgid "Subtitle border width"
-msgstr "    Ð¨Ð¸ÑÐ¸Ð½Ð° Ð³ÑÐ°Ð½Ð¸ÑÑ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
+msgstr "Ð¨Ð¸ÑÐ¸Ð½Ð° Ð³ÑÐ°Ð½Ð¸ÑÑ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
 
 #: ../components/configextmovieplayer.py:358
 msgid "Subtitle box height"
@@ -4995,44 +4852,44 @@
 
 #: ../components/configextmovieplayer.py:355
 msgid "Subtitle box position"
-msgstr "    ÐÐ¾Ð·Ð¸ÑÐ¸Ñ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
+msgstr "ÐÐ¾Ð·Ð¸ÑÐ¸Ñ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
 
 #: ../components/configextmovieplayer.py:344
 msgid "Subtitle font"
-msgstr "    Ð¨ÑÐ¸ÑÑ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
+msgstr "Ð¨ÑÐ¸ÑÑ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
 
 #: ../components/configextmovieplayer.py:352
 msgid "Subtitle font color"
-msgstr "    Ð¦Ð²ÐµÑ ÑÑÐ¸ÑÑÐ° ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
+msgstr "Ð¦Ð²ÐµÑ ÑÑÐ¸ÑÑÐ° ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
 
 #: ../components/configextmovieplayer.py:345
 msgid "Subtitle font size"
-msgstr "    Ð Ð°Ð·Ð¼ÐµÑ ÑÑÐ¸ÑÑÐ° ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
+msgstr "Ð Ð°Ð·Ð¼ÐµÑ ÑÑÐ¸ÑÑÐ° ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
 
 #: ../components/configextmovieplayer.py:347
 #: ../components/configextmovieplayer.py:350
 msgid "Subtitle line height"
-msgstr "    ÐÑÑÐ¾ÑÐ° ÑÑÑÐ¾ÐºÐ¸ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
+msgstr "ÐÑÑÐ¾ÑÐ° ÑÑÑÐ¾ÐºÐ¸ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
 
 #: ../components/configextmovieplayer.py:343
 msgid "Subtitle line wrapping"
-msgstr "    ÐÐµÑÐµÐ½Ð¾Ñ ÑÑÑÐ¾Ðº ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
+msgstr "ÐÐµÑÐµÐ½Ð¾Ñ ÑÑÑÐ¾Ðº ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
 
 #: ../components/configextmovieplayer.py:370
 msgid "Subtitle shadow X offset"
-msgstr "    Ð¡Ð¼ÐµÑÐµÐ½Ð¸Ðµ ÑÐµÐ½Ð¸ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð² Ð¿Ð¾ X"
+msgstr "Ð¡Ð¼ÐµÑÐµÐ½Ð¸Ðµ ÑÐµÐ½Ð¸ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð² Ð¿Ð¾ X"
 
 #: ../components/configextmovieplayer.py:371
 msgid "Subtitle shadow Y offset"
-msgstr "    Ð¡Ð¼ÐµÑÐµÐ½Ð¸Ðµ ÑÐµÐ½Ð¸ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð² Ð¿Ð¾ Y"
+msgstr "Ð¡Ð¼ÐµÑÐµÐ½Ð¸Ðµ ÑÐµÐ½Ð¸ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð² Ð¿Ð¾ Y"
 
 #: ../components/configextmovieplayer.py:369
 msgid "Subtitle shadow color"
-msgstr "    Ð¦Ð²ÐµÑ ÑÐµÐ½Ð¸ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
+msgstr "Ð¦Ð²ÐµÑ ÑÐµÐ½Ð¸ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
 
 #: ../components/configextmovieplayer.py:367
 msgid "Subtitle shadow enabled"
-msgstr "    ÐÐºÐ»ÑÑÐ¸ÑÑ ÑÐµÐ½Ð¸ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
+msgstr "ÐÐºÐ»ÑÑÐ¸ÑÑ ÑÐµÐ½Ð¸ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð²"
 
 #: ../components/configextmovieplayer.py:359
 msgid "Subtitle vertical alignment"
@@ -5045,16 +4902,16 @@
 #: ../components/iptvsubdownloader.py:538
 #, python-format
 msgid "Subtitles \"%s\" downloaded correctly."
-msgstr "Ð¡ÑÐ±ÑÐ¸ÑÑÑ \"%s\" ÑÐºÐ°ÑÐ°Ð» Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¾."
+msgstr "Ð¡ÑÐ±ÑÐ¸ÑÑÑ \"%s\" Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½Ñ Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¾."
 
 #: ../components/iptvsubsimpledownloader.py:177
 msgid "Subtitles conversion to UTF-8 failed."
-msgstr "Ð¡ÑÐ±ÑÐ¸ÑÑÑ Ð¿ÑÐµÐ¾Ð±ÑÐ°Ð·Ð¾Ð²Ð°Ð½Ð¸Ðµ Ð² UTF-8 Ð½Ðµ ÑÐ´Ð°Ð»Ð¾ÑÑ."
+msgstr "ÐÑÐµÐ¾Ð±ÑÐ°Ð·Ð¾Ð²Ð°Ð½Ð¸Ðµ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð² Ð² UTF-8 Ð½Ðµ ÑÐ´Ð°Ð»Ð¾ÑÑ."
 
 #: ../components/iptvsubsimpledownloader.py:145
 #, python-format
 msgid "Subtitles downloaded successfully. [%s], conversion to UTF-8."
-msgstr "Ð¡ÑÐ±ÑÐ¸ÑÑÑ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½Ñ ÑÑÐ¿ÐµÑÐ½Ð¾. [%s], Ð¿ÑÐµÐ¾Ð±ÑÐ°Ð·Ð¾Ð²Ð°Ð½Ð¸Ðµ Ð² UTF-8."
+msgstr "Ð¡ÑÐ±ÑÐ¸ÑÑÑ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½Ñ ÑÑÐ¿ÐµÑÐ½Ð¾. [%s], Ð¿ÑÐµÐ¾Ð±ÑÐ°Ð·Ð¾Ð²Ð°Ð½Ð¾ Ð² UTF-8."
 
 #: ../components/iptvsubsimpledownloader.py:204
 #, python-format
@@ -5067,15 +4924,15 @@
 
 #: ../components/iptvextmovieplayer.py:842
 msgid "Synchronize"
-msgstr "Ð¡Ð¸Ð½ÑÑÐ¾Ð½Ð¸Ð·Ð¸ÑÐ¾Ð²Ð°ÑÑ"
+msgstr "Ð¡Ð¸Ð½ÑÑÐ¾Ð½Ð¸Ð·Ð¸Ð·Ð°ÑÐ¸Ñ"
 
 #: ../components/iptvconfigmenu.py:102
 msgid "System"
-msgstr ""
+msgstr "Ð¡Ð¸ÑÑÐµÐ¼Ð°"
 
 #: ../hosts/hostmythewatchseries.py:68
 msgid "THIS WEEK'S SERIES POPULAR"
-msgstr ""
+msgstr "ÐÐÐÐ£ÐÐ¯Ð ÐÐÐ¯ Ð¡ÐÐ ÐÐ¯ Ð­Ð¢ÐÐ ÐÐÐÐÐÐ"
 
 #: ../hosts/hostwatchwrestling.py:51
 msgid "TNA"
@@ -5083,24 +4940,24 @@
 
 #: ../hosts/hostnuteczki.py:94
 msgid "TOP 10"
-msgstr ""
+msgstr "Ð¢ÐÐ 10"
 
 #: ../hosts/hostgamatotvme.py:223
 msgid "TRAILER"
-msgstr ""
+msgstr "Ð¢Ð Ð­ÐÐÐÐ "
 
 #: ../libs/canlitvliveio.py:89 ../hosts/hostplayrtsiw.py:105
 #: ../hosts/hostredbull.py:52
 msgid "TV"
-msgstr ""
+msgstr "Ð¢Ð"
 
 #: ../hosts/hosthdstreams.py:73
 msgid "TV SERIES"
-msgstr ""
+msgstr "Ð¢ÐÐÐÐ¡ÐÐ ÐÐÐÐ«"
 
 #: ../hosts/hostfilma24hdcom.py:34 ../hosts/hostmovienightws.py:33
 msgid "TV Series"
-msgstr "Ð¢ÐµÐ»ÐµÑÐµÑÐ¸Ð°Ð»"
+msgstr "Ð¢ÐµÐ»ÐµÑÐµÑÐ¸Ð°Ð»Ñ"
 
 #: ../hosts/hostmrpiracy.py:744
 msgid "TV Show"
@@ -5108,7 +4965,7 @@
 
 #: ../hosts/hosticefilmsinfo.py:76
 msgid "TV Shows"
-msgstr "Ð¢Ð Ð¨Ð¾Ñ"
+msgstr "Ð¢Ð-ÑÐ¾Ñ"
 
 #: ../hosts/hostdrdk.py:42
 msgid "TV channels"
@@ -5116,16 +4973,15 @@
 
 #: ../hosts/hostfilmativa.py:37 ../hosts/hostgreekdocumentaries3.py:38
 msgid "TV series"
-msgstr "Ð¢ÐµÐ»ÐµÑÐµÑÐ¸Ð°Ð»"
+msgstr "Ð¢ÐµÐ»ÐµÑÐµÑÐ¸Ð°Ð»Ñ"
 
 #: ../hosts/hostfilmeonlineto.py:115
-#, fuzzy
 msgid "TV-Series"
-msgstr "Ð¢ÐµÐ»ÐµÑÐµÑÐ¸Ð°Ð»"
+msgstr "Ð¢Ð-ÑÐµÑÐ¸Ð¸"
 
 #: ../hosts/hostted.py:76 ../hosts/hostted.py:378 ../hosts/hostted.py:658
 msgid "Talks"
-msgstr ""
+msgstr "ÐÐµÑÐµÐ´Ñ"
 
 #: ../hosts/hosturllist.py:32
 msgid "Text files ytlist and urllist are in:"
@@ -5137,43 +4993,42 @@
 msgstr "Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÑÑ Ð² IPTV ÐÐ»ÐµÐµÑÐµ."
 
 #: ../setup/iptvsetupimpl.py:1161
-#, fuzzy, python-format
+#, python-format
 msgid "The \"%s\" utility is used by the %s as external movie player based on the ffmpeg and libeplayer."
-msgstr "Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÑÑ IPTV ÐÐ»ÐµÐµÑÐ¾Ð¼ Ð² ÐºÐ°ÑÐµÑÑÐ²Ðµ Ð²Ð½ÐµÑÐ½ÐµÐ³Ð¾ Ð²Ð¸Ð´ÐµÐ¾Ð¿Ð»ÐµÐµÑÐ°.Ð½Ð° Ð¾ÑÐ½Ð¾Ð²Ðµ FFmpeg Ð¸ libeplayer."
+msgstr "Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÑÑ %s, ÐºÐ°Ðº Ð²Ð½ÐµÑÐ½Ð¸Ð¹ Ð¿ÑÐ¾Ð¸Ð³ÑÑÐ²Ð°ÑÐµÐ»Ñ ÑÐ¸Ð»ÑÐ¼Ð¾Ð² Ð½Ð° Ð¾ÑÐ½Ð¾Ð²Ðµ ffmpeg Ð¸ libeplayer."
 
 #: ../setup/iptvsetupimpl.py:1215
-#, fuzzy, python-format
+#, python-format
 msgid "The \"%s\" utility is used by the %s as external movie player."
-msgstr "Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÑÑ IPTV ÐÐ»ÐµÐµÑÐ¾Ð¼ Ð² ÐºÐ°ÑÐµÑÑÐ²Ðµ Ð²Ð½ÐµÑÐ½ÐµÐ³Ð¾ Ð²Ð¸Ð´ÐµÐ¾Ð¿Ð»ÐµÐµÑÐ°."
+msgstr "Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÑÑ %s, ÐºÐ°Ðº Ð²Ð½ÐµÑÐ½Ð¸Ð¹ Ð¿ÑÐ¾Ð¸Ð³ÑÑÐ²Ð°ÑÐµÐ»Ñ ÑÐ¸Ð»ÑÐ¼Ð¾Ð²."
 
 #: ../setup/iptvsetupimpl.py:549 ../setup/iptvsetupimpl.py:615
 #: ../setup/iptvsetupimpl.py:1095
-#, fuzzy, python-format
+#, python-format
 msgid "The \"%s\" utility is used by the %s to buffering and downloading [%s] links."
-msgstr "Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÑÑ IPTV ÐÐ»ÐµÐµÑÐ¾Ð¼ Ð´Ð»Ñ ÐºÑÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ Ð¸ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸ Ð¼Ð°ÑÐµÑÐ¸Ð°Ð»Ð° Ð¸Ð· ÑÑÑÐ»Ð¾Ðº [%s]."
+msgstr "Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÑÑ %s Ð´Ð»Ñ Ð±ÑÑÐµÑÐ¸Ð·Ð°ÑÐ¸Ð¸ Ð¸ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸ ÑÑÑÐ»Ð¾Ðº [%s]."
 
 #: ../setup/iptvsetupimpl.py:678
-#, fuzzy, python-format
+#, python-format
 msgid "The \"%s\" utility is used by the %s to determine the encoding of the text."
-msgstr "Ð \"%s\" ÑÑÐ¸Ð»Ð¸ÑÐ° Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÑÑ IPTV ÐÐ»ÐµÐµÑÐ¾Ð¼ Ð´Ð»Ñ Ð¾Ð¿ÑÐµÐ´ÐµÐ»ÐµÐ½Ð¸Ñ ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐ¸ ÑÐµÐºÑÑÐ°."
+msgstr "Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÑÑ %s Ð´Ð»Ñ Ð¾Ð¿ÑÐµÐ´ÐµÐ»ÐµÐ½Ð¸Ñ ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐ¸ ÑÐµÐºÑÑÐ°."
 
 #: ../tools/e2ijs.py:42
 #, python-format
 msgid "The %s utility is necessary here but it was not detected."
-msgstr ""
+msgstr "ÐÐ´ÐµÑÑ Ð½ÑÐ¶Ð½Ð° ÑÑÐ¸Ð»Ð¸ÑÐ° %s, Ð½Ð¾ Ð¾Ð½Ð° Ð½Ðµ Ð±ÑÐ»Ð° Ð¾Ð±Ð½Ð°ÑÑÐ¶ÐµÐ½Ð°."
 
 #: ../subproviders/subprov_youtubecom.py:56
 msgid "The YouTube video ID is invalid."
-msgstr ""
+msgstr "ÐÐ´ÐµÐ½ÑÐ¸ÑÐ¸ÐºÐ°ÑÐ¾Ñ Ð²Ð¸Ð´ÐµÐ¾ YouTube Ð½ÐµÐ´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÐµÐ½."
 
 #: ../hosts/hostlaola1tv.py:28
 msgid "The best"
 msgstr "ÐÑÑÑÐ¸Ð¹"
 
 #: ../hosts/hostiptvplayerinfo.py:30
-#, fuzzy
 msgid "The color of the current version"
-msgstr "Ð¦Ð²ÐµÑ Ð¸Ð· ÑÐ°ÑÐ¾Ð² ÑÐ´ Ð¿ÑÐ½ÐºÑÐ°"
+msgstr "Ð¦Ð²ÐµÑ ÑÐµÐºÑÑÐµÐ¹ Ð²ÐµÑÑÐ¸Ð¸"
 
 #: ../hosts/hostfavourites.py:36
 msgid "The color of the viewed item"
@@ -5181,28 +5036,28 @@
 
 #: ../components/iptvconfigmenu.py:354
 msgid "The default aspect ratio for the external player"
-msgstr ""
+msgstr "Ð¡Ð¾Ð¾ÑÐ½Ð¾ÑÐµÐ½Ð¸Ðµ ÑÑÐ¾ÑÐ¾Ð½ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ Ð´Ð»Ñ Ð²Ð½ÐµÑÐ½ÐµÐ³Ð¾ Ð¿Ð»ÐµÐµÑÐ°"
 
 #: ../hosts/hostdixmax.py:475 ../hosts/hostorthobulletscom.py:212
 #: ../hosts/hostmaxtvgo.py:132 ../hosts/hostrtlmost.py:429
 #: ../hosts/hostvumedicom.py:361
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "The host %s requires registration. \n"
 "Please fill your login and password in the host configuration. Available under blue button."
 msgstr ""
-"Ð­ÑÐ¾Ñ ÑÐ·ÐµÐ» ÑÑÐµÐ±ÑÐµÑ ÑÐµÐ³Ð¸ÑÑÑÐ°ÑÐ¸Ð¸. \n"
-"ÐÐ°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ ÑÐ²Ð¾Ð¹ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ ÑÐ¾ÑÑ. ÐÐ¾ÑÑÑÐ¿ÐµÐ½ Ð¿Ð¾Ð´ ÑÐ¸Ð½ÑÑ ÐºÐ½Ð¾Ð¿ÐºÑ."
+"Ð£Ð·ÐµÐ» %s ÑÑÐµÐ±ÑÐµÑ ÑÐµÐ³Ð¸ÑÑÑÐ°ÑÐ¸Ð¸. \n"
+"ÐÐ°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ ÑÐ²Ð¾Ð¹ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ ÑÐ¾ÑÑÐ°. ÐÐ¾ÑÑÑÐ¿Ð½Ð¾ Ð¿Ð¾ ÑÐ¸Ð½ÐµÐ¹ ÐºÐ½Ð¾Ð¿ÐºÐµ."
 
 #: ../hosts/hosteurosportplayer.py:524 ../hosts/hostfilmynadzis.py:91
 #: ../hosts/hostekstraklasatv.py:100
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "The host %s requires subscription.\n"
 "Please fill your login and password in the host configuration - available under blue button."
 msgstr ""
-"Ð­ÑÐ¾Ñ ÑÐ·ÐµÐ» ÑÑÐµÐ±ÑÐµÑ ÑÐµÐ³Ð¸ÑÑÑÐ°ÑÐ¸Ð¸. \n"
-"ÐÐ°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ ÑÐ²Ð¾Ð¹ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ ÑÐ¾ÑÑ. ÐÐ¾ÑÑÑÐ¿ÐµÐ½ Ð¿Ð¾Ð´ ÑÐ¸Ð½ÑÑ ÐºÐ½Ð¾Ð¿ÐºÑ."
+"Ð¥Ð¾ÑÑ %s ÑÑÐµÐ±ÑÐµÑ Ð¿Ð¾Ð´Ð¿Ð¸ÑÐºÐ¸.\n"
+"ÐÐ°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ ÑÐ²Ð¾Ð¹ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ ÑÐ¾ÑÑÐ°. ÐÐ¾ÑÑÑÐ¿Ð½Ð¾ Ð¿Ð¾ ÑÐ¸Ð½ÐµÐ¹ ÐºÐ½Ð¾Ð¿ÐºÐµ."
 
 #: ../components/iptvconfigmenu.py:538
 msgid "The number of items in the search history"
@@ -5215,11 +5070,12 @@
 "It will be saved in the file:\n"
 "\"%s\""
 msgstr ""
+"ÐÑÑÐµÑ Ð²Ð¾ÑÐ¿ÑÐ¾Ð¸Ð·Ð²ÐµÐ´ÐµÐ½Ð¸Ñ Ð±ÑÐ» Ð¿ÐµÑÐµÐ¼ÐµÑÐµÐ½ Ð² Ð´Ð¸ÑÐ¿ÐµÑÑÐµÑ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸.\n"
+"\"%s\""
 
 #: ../components/iptvconfigmenu.py:374
-#, fuzzy
 msgid "The preferred update server"
-msgstr "ÐÑÐ±Ð¾Ñ ÑÐµÑÐ²ÐµÑÐ° Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ð¹"
+msgstr "ÐÑÐµÐ´Ð¿Ð¾ÑÑÐ¸ÑÐµÐ»ÑÐ½ÑÐ¹ ÑÐµÑÐ²ÐµÑ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ð¹"
 
 #: ../iptvupdate/updatemainwindow.py:240
 #, python-format
@@ -5228,7 +5084,7 @@
 
 #: ../tools/iptvfavourites.py:165
 msgid "The same item already exists in this group."
-msgstr "Ð¢Ð¾ Ð¶Ðµ ÑÐ°Ð¼Ð¾Ðµ, ÑÐ»ÐµÐ¼ÐµÐ½Ñ ÑÐ¶Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ Ð² ÑÑÐ¾Ð¹ Ð³ÑÑÐ¿Ð¿Ðµ."
+msgstr "Ð¢Ð°ÐºÐ¾Ð¹ Ð¶Ðµ ÑÐ»ÐµÐ¼ÐµÐ½Ñ ÑÐ¶Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ Ð² ÑÑÐ¾Ð¹ Ð³ÑÑÐ¿Ð¿Ðµ."
 
 #: ../hosts/hostlaola1tv.py:28
 msgid "The worst"
@@ -5236,21 +5092,21 @@
 
 #: ../components/iptvfavouriteswidgets.py:118
 msgid "There are no other favourite groups"
-msgstr "Ð¢Ð°Ð¼ Ð½ÐµÑ Ð³ÑÑÐ¿Ð¿Ñ Ð¸Ð·Ð±ÑÐ°Ð½Ð½Ð¾Ðµ."
+msgstr "ÐÐµÑ Ð´ÑÑÐ³Ð¸Ñ Ð³ÑÑÐ¿Ð¿ Ð¸Ð·Ð±ÑÐ°Ð½Ð½Ð¾Ð³Ð¾"
 
 #: ../components/iptvplayerwidget.py:1160
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "There is a new version available do you want to update? \n"
 "Your version [%s], latest version on server [%s]"
 msgstr ""
-"ÐÑÑÐ»Ð° Ð½Ð¾Ð²Ð°Ñ Ð²ÐµÑÑÐ¸Ñ Ð¿Ð»Ð°Ð³Ð¸Ð½Ð°. ÐÑ ÑÐ¾ÑÐ¸ÑÐµ, Ð¾Ð±Ð½Ð¾Ð²Ð¸ÑÑ? \n"
+"ÐÑÑÐ»Ð° Ð½Ð¾Ð²Ð°Ñ Ð²ÐµÑÑÐ¸Ñ Ð¿Ð»Ð°Ð³Ð¸Ð½Ð°. ÐÑ ÑÐ¾ÑÐ¸ÑÐµ Ð¾Ð±Ð½Ð¾Ð²Ð¸ÑÑ? \n"
 "ÐÐ°ÑÐ° Ð²ÐµÑÑÐ¸Ñ [%s], Ð½Ð¾Ð²Ð°Ñ Ð²ÐµÑÑÐ¸Ñ Ð½Ð° ÑÐµÑÐ²ÐµÑÐµ [%s]."
 
 #: ../components/iptvplayerwidget.py:1779
-#, fuzzy, python-format
+#, python-format
 msgid "There is no enough free space in the folder \"%s\"."
-msgstr "ÐÐ° Ð´Ð¸ÑÐºÐµ Ð½ÐµÑ ÑÐ²Ð¾Ð±Ð¾Ð´Ð½Ð¾Ð³Ð¾ Ð¼ÐµÑÑÐ° [%s]."
+msgstr "Ð Ð¿Ð°Ð¿ÐºÐµ \"%s\"Ð½ÐµÐ´Ð¾ÑÑÐ°ÑÐ¾ÑÐ½Ð¾ ÑÐ²Ð¾Ð±Ð¾Ð´Ð½Ð¾Ð³Ð¾ Ð¼ÐµÑÑÐ°."
 
 #: ../components/iptvplayerwidget.py:1450
 #, python-format
@@ -5258,9 +5114,8 @@
 msgstr "ÐÐ° Ð´Ð¸ÑÐºÐµ Ð½ÐµÑ ÑÐ²Ð¾Ð±Ð¾Ð´Ð½Ð¾Ð³Ð¾ Ð¼ÐµÑÑÐ° [%s]."
 
 #: ../components/iptvplayerwidget.py:1294
-#, fuzzy
 msgid "There is no hosts in this group."
-msgstr "Ð¢Ð¾ Ð¶Ðµ ÑÐ°Ð¼Ð¾Ðµ, ÑÐ»ÐµÐ¼ÐµÐ½Ñ ÑÐ¶Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ Ð² ÑÑÐ¾Ð¹ Ð³ÑÑÐ¿Ð¿Ðµ."
+msgstr "Ð ÑÑÐ¾Ð¹ Ð³ÑÑÐ¿Ð¿Ðµ Ð½ÐµÑ ÑÐ¾ÑÑÐ¾Ð²."
 
 #: ../iptvupdate/updatemainwindow.py:253
 #, python-format
@@ -5273,12 +5128,11 @@
 
 #: ../iptvupdate/updatemainwindow.py:874
 msgid "There is no update for the current configuration."
-msgstr "ÐÐ»Ñ ÑÐµÐºÑÑÐµÐ¹ Ð²ÐµÑÑÐ¸Ð¸, Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ñ Ð¾ÑÑÑÑÑÑÐ²ÑÑÑ."
+msgstr "ÐÐ»Ñ ÑÐµÐºÑÑÐµÐ¹ Ð²ÐµÑÑÐ¸Ð¸ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ñ Ð¾ÑÑÑÑÑÑÐ²ÑÑÑ."
 
 #: ../tools/iptvhostgroups.py:127
-#, fuzzy
 msgid "This host has been added already to this group."
-msgstr "Ð¢Ð¾ Ð¶Ðµ ÑÐ°Ð¼Ð¾Ðµ, ÑÐ»ÐµÐ¼ÐµÐ½Ñ ÑÐ¶Ðµ ÑÑÑÐµÑÑÐ²ÑÐµÑ Ð² ÑÑÐ¾Ð¹ Ð³ÑÑÐ¿Ð¿Ðµ."
+msgstr "Ð­ÑÐ¾Ñ ÑÐ¾ÑÑ ÑÐ¶Ðµ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½ Ð² ÑÑÑ Ð³ÑÑÐ¿Ð¿Ñ."
 
 #: ../libs/edemtv.py:97
 msgid ""
@@ -5286,23 +5140,23 @@
 "Please fill your login and password in the host configuration. Available under blue button."
 msgstr ""
 "Ð­ÑÐ¾Ñ ÑÐ·ÐµÐ» ÑÑÐµÐ±ÑÐµÑ ÑÐµÐ³Ð¸ÑÑÑÐ°ÑÐ¸Ð¸. \n"
-"ÐÐ°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ ÑÐ²Ð¾Ð¹ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ ÑÐ¾ÑÑ. ÐÐ¾ÑÑÑÐ¿ÐµÐ½ Ð¿Ð¾Ð´ ÑÐ¸Ð½ÑÑ ÐºÐ½Ð¾Ð¿ÐºÑ."
+"ÐÐ°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ ÑÐ²Ð¾Ð¹ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ ÑÐ¾ÑÑÐ°. ÐÐ¾ÑÑÑÐ¿ÐµÐ½ Ð¿Ð¾ ÑÐ¸Ð½ÐµÐ¹ ÐºÐ½Ð¾Ð¿ÐºÐµ."
 
 #: ../hosts/hostseriesonline.py:90
 msgid "This site is protected with Google reCaptcha v2."
-msgstr ""
+msgstr "Ð­ÑÐ¾Ñ ÑÐ°Ð¹Ñ Ð·Ð°ÑÐ¸ÑÐµÐ½ google recaptcha v2."
 
 #: ../setup/iptvsetupimpl.py:254
 msgid "This step is required to proper select binaries for installation."
-msgstr ""
+msgstr "Ð­ÑÐ¾Ñ ÑÐ°Ð³ Ð½ÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼ Ð´Ð»Ñ Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¾Ð³Ð¾ Ð²ÑÐ±Ð¾ÑÐ° Ð¸ÑÐ¿Ð¾Ð»Ð½ÑÐµÐ¼ÑÑ ÑÐ°Ð¹Ð»Ð¾Ð² Ð´Ð»Ñ ÑÑÑÐ°Ð½Ð¾Ð²ÐºÐ¸."
 
 #: ../components/iptvplayerwidget.py:1785
 msgid "Tip! You can connect USB flash drive to fix this problem."
-msgstr ""
+msgstr "Ð¡Ð¾Ð²ÐµÑ! ÐÑ Ð¼Ð¾Ð¶ÐµÑÐµ Ð¿Ð¾Ð´ÐºÐ»ÑÑÐ¸ÑÑ USB-Ð½Ð°ÐºÐ¾Ð¿Ð¸ÑÐµÐ»Ñ, ÑÑÐ¾Ð±Ñ ÑÐµÑÐ¸ÑÑ ÑÑÑ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ñ."
 
 #: ../Web/webParts.py:452
 msgid "Title:"
-msgstr ""
+msgstr "ÐÐ°Ð³Ð»Ð°Ð²Ð¸Ðµ:"
 
 #: ../libs/urlparser.py:2320
 msgid ""
@@ -5310,30 +5164,28 @@
 "Please fill your login and password in the IPTVPlayer configuration."
 msgstr ""
 "ÐÐ»Ñ Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑÐ° Ð²Ð¸Ð´ÐµÐ¾ Ñ http://vk.com/ Ð½ÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼Ð¾ Ð°Ð²ÑÐ¾ÑÐ¸Ð·Ð¾Ð²Ð°ÑÑÑÑ Ð½Ð° ÑÐ°Ð¹ÑÐµ.\n"
-"ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ° , Ð·Ð°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ ÑÐ²Ð¾Ð¹ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ IPTVPlayer."
+"ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð²Ð²ÐµÐ´Ð¸ÑÐµ ÑÐ²Ð¾Ð¹ Ð»Ð¾Ð³Ð¸Ð½ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ñ IPTVPlayer."
 
 #: ../hosts/hosteurosportplayer.py:421 ../hosts/hosttvnowde.py:151
 msgid "Today"
-msgstr ""
+msgstr "Ð¡ÐµÐ³Ð¾Ð´Ð½Ñ"
 
 #: ../hosts/hostefilmytv.py:121 ../hosts/hostefilmytv.py:131
 #: ../hosts/hostfilmpalast.py:52
 msgid "Top"
-msgstr "ÐÑÑÑÐ¸Ð¹"
+msgstr "ÐÐ¾Ð¿ÑÐ»ÑÑÐ½Ð¾Ðµ"
 
 #: ../hosts/hostfilmovizijastudio.py:49
 msgid "Top Movies"
 msgstr "ÐÑÑÑÐ¸Ðµ ÑÐ¸Ð»ÑÐ¼Ñ"
 
 #: ../hosts/hostserijeonline.py:59
-#, fuzzy
 msgid "Top Videos"
-msgstr "ÐÐ¸Ð´ÐµÐ¾"
+msgstr "ÐÑÑÑÐ¸Ðµ Ð²Ð¸Ð´ÐµÐ¾"
 
 #: ../hosts/hostmediasetplay.py:114
-#, fuzzy
 msgid "Top day"
-msgstr "Ð¡Ð°Ð¼ÑÐµ Ð¿Ð¾Ð¿ÑÐ»ÑÑÐ½ÑÐµ"
+msgstr "ÐÐ¾Ð¿ÑÐ»ÑÑÐ½ÑÐµ ÑÐµÐ³Ð¾Ð´Ð½Ñ"
 
 #: ../hosts/hostfilmezz.py:72
 msgid "Top movies"
@@ -5353,7 +5205,7 @@
 
 #: ../hosts/hostlocalmedia.py:440 ../hosts/hostlocalmedia.py:458
 msgid "Total size: "
-msgstr "Ð Ð°Ð·Ð¼ÐµÑ ÑÐ°Ð¹Ð»Ð°: "
+msgstr "ÐÐ±ÑÐ¸Ð¹ ÑÐ°Ð·Ð¼ÐµÑ: "
 
 #: ../hosts/hostshahiidanimenet.py:210 ../hosts/hostmrpiracy.py:438
 #: ../hosts/hostgamatocom.py:262 ../hosts/hostfenixsite.py:278
@@ -5371,34 +5223,30 @@
 msgstr "ÐÑÐ¾Ð·ÑÐ°ÑÐ½ÑÐ¹"
 
 #: ../components/iptvconfigmenu.py:75
-#, fuzzy
 msgid "Tree list"
-msgstr "Ð¡Ð¿Ð¸ÑÐ¾Ðº ÑÐµÑÐ¸Ð¸"
+msgstr "ÐÐµÑÐµÐ²Ð¾ ÑÐ¿Ð¸ÑÐºÐ°"
 
 #: ../hosts/hostyoutube.py:64 ../hosts/hostyoutube.py:176
 #: ../hosts/hostourmatchnet.py:38 ../hosts/hostdailymotion.py:55
 #: ../hosts/hosttwitchtv.py:118
-#, fuzzy
 msgid "Trending"
-msgstr "ÐÐ¾"
+msgstr "Ð ÑÑÐµÐ½Ð´Ðµ"
 
 #: ../hosts/hosttvplayercom.py:53
-#, fuzzy
 msgid "Try to bypass DRM (it may be illegal)"
-msgstr "ÐÐ¾ÐºÐ°Ð·ÑÐ²Ð°ÑÑ Ð¿Ð»Ð°ÑÐ½ÑÐµ Ð¿ÑÐµÐ´Ð¼ÐµÑÑ (ÑÑÐ¾ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð½ÐµÐ·Ð°ÐºÐ¾Ð½Ð½Ð¾)"
+msgstr "ÐÐ¾Ð¿ÑÐ¾Ð±Ð¾Ð²Ð°ÑÑ Ð¾Ð±Ð¾Ð¹ÑÐ¸ DRM (Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð½ÐµÐ·Ð°ÐºÐ¾Ð½Ð½Ð¾)"
 
 #: ../components/iptvextmovieplayer.py:1686
 msgid "Try to change extplayer or disable IFD in GSTplayer configuration"
-msgstr ""
+msgstr "ÐÐ¾Ð¿ÑÐ¾Ð±ÑÐ¹ÑÐµ ÑÐ¼ÐµÐ½Ð¸ÑÑ extplayer Ð¸Ð»Ð¸ Ð¾ÑÐºÐ»ÑÑÐ¸ÑÑ IFD Ð² Ð½Ð°ÑÑÑÐ¾Ð¹ÐºÐ°Ñ GSTplayer"
 
 #: ../hosts/hostwebstream.py:125
 msgid "Turn off buffering for http://prognoza.pogody.tv/"
 msgstr "ÐÑÐºÐ»ÑÑÐ¸ÑÑ Ð±ÑÑÐµÑÐ¸Ð·Ð°ÑÐ¸Ñ Ð´Ð»Ñ http://prognoza.pogody.tv/"
 
 #: ../hosts/hostiptvplayerinfo.py:52
-#, fuzzy
 msgid "Tutorials"
-msgstr "Ð ÐµÐ´Ð°ÐºÑÐ¸Ð¾Ð½Ð½ÑÐ¹"
+msgstr "ÐÐ°Ð½ÑÐ°Ð»Ñ"
 
 #: ../components/ihost.py:828 ../hosts/hostplayzcc.py:284
 #: ../hosts/hosteurosportplayer.py:725 ../hosts/hostdokumentalnenet.py:210
@@ -5479,9 +5327,9 @@
 msgstr "Ð¢Ð¸Ð¿: "
 
 #: ../hosts/hostshoutcast.py:139
-#, fuzzy, python-format
+#, python-format
 msgid "Type: %s"
-msgstr "Ð¢Ð¸Ð¿: "
+msgstr "Ð¢Ð¸Ð¿: %s"
 
 #: ../hosts/hostwatchwrestlinguno.py:40
 msgid "UFC"
@@ -5489,11 +5337,11 @@
 
 #: ../components/iptvconfigmenu.py:423
 msgid "Ukrainian proxy server url"
-msgstr "ÐÐ´ÑÐµÑ ÑÐºÑÐ°Ð¸Ð½ÑÐºÐ¾Ð³Ð¾ Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐµÑÐ²ÐµÑ"
+msgstr "URL ÑÐºÑÐ°Ð¸Ð½ÑÐºÐ¾Ð³Ð¾ Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐµÑÐ²ÐµÑÐ°"
 
 #: ../hosts/hostlocalmedia.py:615
 msgid "Umount iso file"
-msgstr "Ð Ð°Ð·Ð¼Ð¾Ð½ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ ÑÐ°Ð¹Ð» iso"
+msgstr "ÐÑÐ¼Ð¾Ð½ÑÐ¸ÑÐ¾Ð²Ð°ÑÑ iso-ÑÐ°Ð¹Ð»"
 
 #: ../hosts/hostserienstreamto.py:378 ../hosts/hostkinox.py:234
 #: ../hosts/hostkinox.py:421
@@ -5501,14 +5349,13 @@
 msgstr "ÐÐµÐ¸Ð·Ð²ÐµÑÑÐ½ÑÐ¹"
 
 #: ../libs/videostar.py:121
-#, fuzzy
 msgid "Unknown error."
-msgstr "ÐÐµÐ¸Ð·Ð²ÐµÑÑÐ½ÑÐ¹"
+msgstr "ÐÐµÐ¸Ð·Ð²ÐµÑÑÐ½Ð°Ñ Ð¾ÑÐ¸Ð±ÐºÐ°."
 
 #: ../components/isubprovider.py:461
 #, python-format
 msgid "Unknown file extension \"%s\"."
-msgstr ""
+msgstr "ÐÐµÐ¸Ð·Ð²ÐµÑÑÐ½Ð¾Ðµ ÑÐ°ÑÑÐ¸ÑÐµÐ½Ð¸Ðµ ÑÐ°Ð¹Ð»Ð° \"%s\"."
 
 #: ../components/iptvplayerwidget.py:1687
 #, python-format
@@ -5517,12 +5364,12 @@
 
 #: ../hosts/hostrtbfbe.py:609
 msgid "Unknown server response."
-msgstr ""
+msgstr "ÐÐµÐ¸Ð·Ð²ÐµÑÑÐ½ÑÐ¹ Ð¾ÑÐ²ÐµÑ ÑÐµÑÐ²ÐµÑÐ°."
 
 #: ../subproviders/subprov_napiprojektpl.py:335
 #, python-format
 msgid "Unknown subtitle parser for format \"%s\"."
-msgstr ""
+msgstr "ÐÐµÐ¸Ð·Ð²ÐµÑÑÐ½ÑÐ¹ ÑÐ¸Ð½ÑÐ°ÐºÑÐ¸ÑÐµÑÐºÐ¸Ð¹ Ð°Ð½Ð°Ð»Ð¸Ð·Ð°ÑÐ¾Ñ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð² Ð´Ð»Ñ ÑÐ¾ÑÐ¼Ð°ÑÐ° \"%s\"."
 
 #: ../iptvupdate/updatemainwindow.py:997
 msgid "Unpacking the archive completed successfully."
@@ -5531,7 +5378,7 @@
 #: ../components/isubprovider.py:566
 #, python-format
 msgid "Unrar error code[%s]."
-msgstr "Unrar ÐºÐ¾Ð´ Ð¾ÑÐ¸Ð±ÐºÐ¸[%s]."
+msgstr "ÐÐ¾Ð´ Ð¾ÑÐ¸Ð±ÐºÐ¸ unrar [%s]."
 
 #: ../hosts/hostfavourites.py:266
 msgid "Unset watched"
@@ -5540,12 +5387,12 @@
 #: ../components/isubprovider.py:543 ../subproviders/subprov_napisy24pl.py:344
 #, python-format
 msgid "Unzip error code[%s]."
-msgstr "Ð Ð°ÑÐ¿Ð°ÐºÑÐ¹ÑÐµ ÐºÐ¾Ð´ Ð¾ÑÐ¸Ð±ÐºÐ¸[%s]."
+msgstr "ÐÐ¾Ð´ Ð¾ÑÐ¸Ð±ÐºÐ¸ ÑÐ°ÑÐ¿Ð°ÐºÐ¾Ð²ÐºÐ¸ [%s]."
 
 #: ../components/iptvconfigmenu.py:381 ../components/iptvplayerwidget.py:1206
 #: ../components/iptvplayerwidget.py:1355
 msgid "Update"
-msgstr "ÐÐ±Ð½Ð¾Ð²Ð¸ÑÑ Ð¿Ð»ÐµÐµÑ (ÐÐ°Ð¶Ð¼Ð¸ÑÐµ OK)"
+msgstr "ÐÐ±Ð½Ð¾Ð²Ð¸ÑÑ"
 
 #: ../iptvupdate/updatemainwindow.py:368
 msgid "Update completed successfully. For the moment, the system will reboot."
@@ -5557,7 +5404,7 @@
 "Check the status by selecting interesting and pressing OK."
 msgstr ""
 "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð²ÑÐ¿Ð¾Ð»Ð½Ð¸ÑÑ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ.\n"
-"ÐÑÐ¾Ð²ÐµÑÑÑÐµ Ð½ÑÐ¶Ð½Ð¾Ðµ Ð²Ð°Ð¼, Ð¸ Ð½Ð°Ð¶Ð¼Ð¸ÑÐµ OK."
+"ÐÑÐ¾Ð²ÐµÑÑÑÐµ ÑÑÐ°ÑÑÑ, Ð²ÑÐ±ÑÐ°Ð² Ð¸Ð½ÑÐµÑÐµÑÐ½Ð¾Ðµ Ð¸ Ð½Ð°Ð¶Ð°Ð² OK."
 
 #: ../iptvupdate/updatemainwindow.py:876
 msgid "Update not available."
@@ -5569,28 +5416,27 @@
 
 #: ../iptvupdate/updatemainwindow.py:939
 msgid "Update packet was downloaded successfully."
-msgstr "ÐÐ±Ð½Ð¾Ð²Ð»ÐµÐ½Ð½ÑÐ¹ Ð¿Ð°ÐºÐµÑ Ð±ÑÐ» ÑÑÐ¿ÐµÑÐ½Ð¾ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½."
+msgstr "ÐÐ°ÐºÐµÑ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ð¹ Ð±ÑÐ» ÑÑÐ¿ÐµÑÐ½Ð¾ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½."
 
 #: ../iptvupdate/updatemainwindow.py:921
 msgid "Update server not selected."
-msgstr "Ð¡ÐµÑÐ²ÐµÑ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ð¹ Ð½Ðµ Ð²ÑÐ±ÑÐ°Ð½."
+msgstr "ÐÐµ Ð²ÑÐ±ÑÐ°Ð½ ÑÐµÑÐ²ÐµÑ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ð¹."
 
 #: ../libs/youtubeparser.py:37
 msgid "Upload date"
 msgstr "ÐÐ°ÑÐ° Ð¿ÑÐ±Ð»Ð¸ÐºÐ°ÑÐ¸Ð¸"
 
 #: ../hosts/hosttwitchtv.py:113
-#, fuzzy
 msgid "Uploads"
-msgstr "ÐÐ°ÑÐ° Ð¿ÑÐ±Ð»Ð¸ÐºÐ°ÑÐ¸Ð¸"
+msgstr "ÐÐ°Ð³ÑÑÐ·ÐºÐ¸"
 
 #: ../hosts/hosturllist.py:40
 msgid "Urllists player"
-msgstr "ÐÐ¸Ð¿ÐµÑÑÑÑÐ»ÐºÐ¸ ÐÐ»ÐµÐµÑ"
+msgstr "ÐÐ»ÐµÐµÑ URL-ÑÐ¿Ð¸ÑÐºÐ¾Ð²"
 
 #: ../hosts/hostwebstream.py:126
 msgid "Use Polish proxy for http://prognoza.pogody.tv/"
-msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐµÑÐ²ÐµÑ Ð´Ð»Ñ ÐÐ¾Ð»ÑÑÐºÐ¾Ð³Ð¾ http://prognoza.pogody.tv/"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð¿Ð¾Ð»ÑÑÐºÐ¸Ð¹ Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐµÑÐ²ÐµÑ Ð´Ð»Ñ http://prognoza.pogody.tv/"
 
 #: ../hosts/hostlaola1tv.py:39
 msgid "Use default quality:"
@@ -5604,27 +5450,23 @@
 #: ../hosts/hostyoutube.py:38 ../hosts/hostbbciplayer.py:33
 #: ../hosts/hostsvtplayse.py:47
 msgid "Use default video quality:"
-msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ ÐºÐ°ÑÐµÑÑÐ²Ð¾ Ð²Ð¸Ð´ÐµÐ¾ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ:"
+msgstr "ÐÐ¸Ð´ÐµÐ¾ÐºÐ°ÑÐµÑÑÐ²Ð¾ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ:"
 
 #: ../hosts/hostmrpiracy.py:54 ../hosts/hostbsto.py:40
-#, fuzzy
 msgid "Use links cache"
-msgstr "Ð¡ÑÑÐ»ÐºÐ¸ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ ÐºÐµÑ ÑÑÑÐ»Ð¾Ðº"
 
 #: ../hosts/hosttvplayercom.py:50
-#, fuzzy
 msgid "Use preferred bitrate"
-msgstr "ÐÑÐµÐ´Ð¿Ð¾ÑÑÐ¸ÑÐµÐ»ÑÐ½ÑÐ¹ Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»:"
+msgstr "ÐÑÐ¿. Ð¿ÑÐµÐ´Ð¿Ð¾ÑÑÐ¸ÑÐµÐ»ÑÐ½ÑÐ¹ Ð±Ð¸ÑÑÐµÐ¹Ñ"
 
 #: ../libs/videostar.py:45
-#, fuzzy
 msgid "Use preferred quality"
-msgstr "ÐÑÐµÐ´Ð¿Ð¾ÑÑÐ¸ÑÐµÐ»ÑÐ½Ð¾Ðµ ÐºÐ°ÑÐµÑÑÐ²Ð¾"
+msgstr "ÐÑÐ¿. Ð¿ÑÐµÐ´Ð¿Ð¾ÑÑÐ¸ÑÐµÐ»ÑÐ½Ð¾Ðµ ÐºÐ°ÑÐµÑÑÐ²Ð¾"
 
 #: ../hosts/hostddl.py:39
-#, fuzzy
 msgid "Use proxy"
-msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·ÑÐ¹ÑÐµ Ð¿ÑÐ¾ÐºÑÐ¸"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð¿ÑÐ¾ÐºÑÐ¸"
 
 #: ../hosts/hosticefilmsinfo.py:35 ../hosts/hostsolarmovie.py:37
 #: ../hosts/hostseriesonline.py:34 ../hosts/hostfilmeonlineto.py:35
@@ -5634,7 +5476,7 @@
 #: ../hosts/host123movieshd.py:32 ../hosts/hostkkiste.py:33
 #: ../hosts/hostfilmstreamvkcom.py:34 ../hosts/hostkinox.py:35
 msgid "Use proxy server:"
-msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð¿ÑÐ¾ÐºÑÐ¸ - ÑÐµÑÐ²ÐµÑ:"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐµÑÐ²ÐµÑ:"
 
 #: ../components/configextmovieplayer.py:318
 #: ../components/configextmovieplayer.py:319
@@ -5642,31 +5484,29 @@
 #: ../components/configextmovieplayer.py:322
 #: ../components/configextmovieplayer.py:323
 #: ../components/configextmovieplayer.py:324
-#, fuzzy, python-format
+#, python-format
 msgid "Use software decoder for the %s"
-msgstr "ÐÑÐ¸Ð¼ÐµÐ½Ð¸ÑÑ Ð½Ð°ÑÑÐ¶Ð½ÑÐ¹ Ð´ÐµÐºÐ¾Ð´ÐµÑ Ð´Ð»Ñ AAC"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð½ÑÐ¹ Ð´ÐµÐºÐ¾Ð´ÐµÑ Ð´Ð»Ñ %s"
 
 #: ../components/iptvconfigmenu.py:458
 msgid "Use subtitles parser extension if available"
-msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ ÑÑÐ±ÑÐ¸ÑÑÑ ÑÐ°ÑÑÐ¸ÑÐµÐ½Ð¸Ñ Ð¿Ð°ÑÑÐµÑ, ÐµÑÐ»Ð¸ Ð´Ð¾ÑÑÑÐ¿Ð½Ð¾"
+msgstr "Ð Ð°ÑÑÐ¸ÑÐµÐ½Ð½ÑÐ¹ Ð¿Ð°ÑÑÐµÑ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð², ÐµÑÐ»Ð¸ Ð´Ð¾ÑÑÑÐ¿ÐµÐ½"
 
 #: ../components/iptvconfigmenu.py:413
 msgid "Use the PyCurl for HTTP(S) requests"
-msgstr ""
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð·Ð°Ð¿ÑÐ¾ÑÑ PyCurl Ð´Ð»Ñ HTTP(S)"
 
 #: ../hosts/hostthewatchseriesto.py:30
-#, fuzzy
 msgid "Use web proxy gateway"
-msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐ»ÑÐ·"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ ÑÐ»ÑÐ· Ð²ÐµÐ±-Ð¿ÑÐ¾ÐºÑÐ¸"
 
 #: ../hosts/hostbbcsport.py:34 ../hosts/hostbbciplayer.py:35
 msgid "Use web-proxy (it may be illegal):"
-msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¸Ðµ Ð²ÐµÐ±-Ð¿ÑÐ¾ÐºÑÐ¸ (ÑÑÐ¾ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð½ÐµÐ·Ð°ÐºÐ¾Ð½Ð½Ð¾):"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¸Ðµ Ð²ÐµÐ±-Ð¿ÑÐ¾ÐºÑÐ¸ (Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð½ÐµÐ·Ð°ÐºÐ¾Ð½Ð½Ð¾):"
 
 #: ../hosts/hostplayrtsiw.py:32 ../hosts/host3player.py:31
-#, fuzzy
 msgid "Use web-proxy for VODs (it may be illegal):"
-msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¸Ðµ Ð²ÐµÐ±-Ð¿ÑÐ¾ÐºÑÐ¸ (ÑÑÐ¾ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð½ÐµÐ·Ð°ÐºÐ¾Ð½Ð½Ð¾):"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð²ÐµÐ±-Ð¿ÑÐ¾ÐºÑÐ¸ Ð´Ð»Ñ VODs (Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð½ÐµÐ·Ð°ÐºÐ¾Ð½Ð½Ð¾):"
 
 #: ../hosts/hosturllist.py:55
 msgid "User files"
@@ -5681,14 +5521,13 @@
 msgstr "Ð¡ÑÑÐ»ÐºÐ¸ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ, ÑÐ¾ÑÑÐ°Ð½ÐµÐ½Ð½ÑÐµ Ð² ÑÐ°Ð¹Ð»Ðµ ytlist.txt."
 
 #: ../hosts/hostfilmynadzis.py:31 ../hosts/hostekstraklasatv.py:41
-#, fuzzy
 msgid "Username"
-msgstr "ÐÐ¼Ñ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ:"
+msgstr "ÐÐ¼Ñ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ"
 
 #: ../hosts/hosteurosportplayer.py:503
 #, python-format
 msgid "Username in settings is different from %s"
-msgstr ""
+msgstr "ÐÐ¼Ñ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ Ð² Ð½Ð°ÑÑÑÐ¾Ð¹ÐºÐ°Ñ Ð¾ÑÐ»Ð¸ÑÐ°ÐµÑÑÑ Ð¾Ñ %s"
 
 #: ../libs/weebtv.py:39
 msgid "Username:"
@@ -5699,13 +5538,13 @@
 "Using this host in your country can be illegal.\n"
 "Do you want to continue at your own risk?"
 msgstr ""
-"ÐÑÐ¿Ð¾Ð»ÑÐ·ÑÑ ÑÑÐ¾Ñ ÑÐ¾ÑÑ Ð² Ð²Ð°ÑÐµÐ¹ ÑÑÑÐ°Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð½ÐµÐ·Ð°ÐºÐ¾Ð½Ð½ÑÐ¼.\n"
+"ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¸Ðµ ÑÑÐ¾ÑÐ³Ð¾ ÑÐ°Ð¹ÑÐ° Ð² ÐÐ°ÑÐµÐ¹ ÑÑÑÐ°Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð½ÐµÐ·Ð°ÐºÐ¾Ð½Ð½ÑÐ¼.\n"
 "ÐÑ ÑÐ¾ÑÐ¸ÑÐµ Ð¿ÑÐ¾Ð´Ð¾Ð»Ð¶Ð¸ÑÑ Ð½Ð° ÑÐ²Ð¾Ð¹ ÑÑÑÐ°Ñ Ð¸ ÑÐ¸ÑÐº?"
 
 #: ../iptvdm/ffmpegdownloader.py:74
-#, fuzzy, python-format
+#, python-format
 msgid "Utility \"%s\" can not be found."
-msgstr "Ð¤Ð¸Ð»ÑÐ¼ \"%s\" Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½."
+msgstr "Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð°."
 
 #: ../setup/iptvsetuphelper.py:134
 #, python-format
@@ -5713,8 +5552,8 @@
 "Utility \"%s\" has not been detected. \n"
 "Do you want to install it?"
 msgstr ""
-"Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" ÑÑÑÐ°ÑÐµÐ»Ð°. \n"
-"ÐÑ ÑÐ¾ÑÐ¸ÑÐµ, ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ Ð½Ð¾Ð²ÑÑ?"
+"Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" Ð½Ðµ Ð±ÑÐ»Ð° Ð¾Ð±Ð½Ð°ÑÑÐ¶ÐµÐ½Ð°. \n"
+"ÐÑ ÑÐ¾ÑÐ¸ÑÐµ ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ ÐµÑ?"
 
 #: ../setup/iptvsetuphelper.py:133
 #, python-format
@@ -5722,8 +5561,8 @@
 "Utility \"%s\" has not been detected. \n"
 "What do you want to do?"
 msgstr ""
-"Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" ÑÑÑÐ°ÑÐµÐ»Ð°. \n"
-"Ð§ÑÐ¾ Ð²Ñ ÑÐ¾ÑÐµÑÐµ ÑÐ´ÐµÐ»Ð°ÑÑ?"
+"Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" Ð½Ðµ Ð±ÑÐ»Ð° Ð¾Ð±Ð½Ð°ÑÑÐ¶ÐµÐ½Ð°. \n"
+"Ð§ÑÐ¾ ÐÑ ÑÐ¾ÑÐ¸ÑÐµ ÑÐ´ÐµÐ»Ð°ÑÑ?"
 
 #: ../setup/iptvsetuphelper.py:136
 #, python-format
@@ -5731,8 +5570,8 @@
 "Utility \"%s\" is deprecated. \n"
 "Do you want to install new one?"
 msgstr ""
-"Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" ÑÑÑÐ°ÑÐµÐ»Ð°. \n"
-"ÐÑ ÑÐ¾ÑÐ¸ÑÐµ, ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ Ð½Ð¾Ð²ÑÑ?"
+"Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" Ð½Ðµ ÑÐµÐºÐ¾Ð¼ÐµÐ½Ð´ÑÐµÑÑÑ.\n"
+"ÐÑ ÑÐ¾ÑÐ¸ÑÐµ ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ Ð½Ð¾Ð²ÑÑ?"
 
 #: ../setup/iptvsetuphelper.py:135
 #, python-format
@@ -5740,16 +5579,16 @@
 "Utility \"%s\" is deprecated. \n"
 "What do you want to do?"
 msgstr ""
-"Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" ÑÑÑÐ°ÑÐµÐ»Ð°. \n"
-"Ð§ÑÐ¾ Ð²Ñ ÑÐ¾ÑÐ¸ÑÐµ ÑÐ´ÐµÐ»Ð°ÑÑ?"
+"Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" Ð½Ðµ ÑÐµÐºÐ¾Ð¼ÐµÐ½Ð´ÑÐµÑÑÑ.\n"
+"Ð§ÑÐ¾ ÐÑ ÑÐ¾ÑÐ¸ÑÐµ ÑÐ´ÐµÐ»Ð°ÑÑ?"
 
 #: ../hosts/hostdancetrippin.py:39
 msgid "VENUES"
-msgstr ""
+msgstr "ÐÐÐÐ©ÐÐÐÐ"
 
 #: ../components/iptvconfigmenu.py:352
 msgid "VFD set current title:"
-msgstr ""
+msgstr "VFD ÑÑÑÐ°Ð½Ð°Ð²Ð»Ð¸Ð²Ð°ÐµÑ ÑÐµÐºÑÑÐµÐµ Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ðµ:"
 
 #: ../hosts/hostwatchwrestlinguno.py:50 ../hosts/hostwatchwrestlinguno.py:306
 #: ../hosts/hostwatchwrestling.py:66 ../hosts/hostwatchwrestling.py:315
@@ -5759,7 +5598,7 @@
 #: ../components/recaptcha_v2widget.py:90
 #: ../components/iptvmultipleinputbox.py:111
 msgid "Verify"
-msgstr "ÐÑÐ¾Ð²ÐµÑÐ¸ÑÑ"
+msgstr "ÐÑÐ¾Ð²ÐµÑÐºÐ°"
 
 #: ../iptvupdate/updatemainwindow.py:659
 #, python-format
@@ -5781,36 +5620,35 @@
 
 #: ../hosts/hostyoutube.py:36
 msgid "Video format:"
-msgstr "Ð¤Ð¾ÑÐ¼Ð°Ñ Ð²Ð¸Ð´ÐµÐ¾:"
+msgstr "ÐÐ¸Ð´ÐµÐ¾ÑÐ¾ÑÐ¼Ð°Ñ:"
 
 #: ../components/iptvextmovieplayer.py:683
 msgid "Video mode"
-msgstr "Ð ÐµÐ¶Ð¸Ð¼ Ð²Ð¸Ð´ÐµÐ¾"
+msgstr "ÐÐ¸Ð´ÐµÐ¾ÑÐµÐ¶Ð¸Ð¼"
 
 #: ../components/iptvextmovieplayer.py:539
 msgid "Video options"
-msgstr "ÐÐ°ÑÐ°Ð¼ÐµÑÑÑ Ð²Ð¸Ð´ÐµÐ¾"
+msgstr "ÐÐ¸Ð´ÐµÐ¾Ð¿Ð°ÑÐ°Ð¼ÐµÑÑÑ"
 
 #: ../components/iptvextmovieplayer.py:683
-#, fuzzy
 msgid "Video policy"
-msgstr "    ÐÐ¸Ð´ÐµÐ¾ ÑÐ¾Ð¾ÑÐ½Ð¾ÑÐµÐ½Ð¸Ðµ ÑÑÐ¾ÑÐ¾Ð½ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ"
+msgstr "ÐÐ¸Ð´ÐµÐ¾Ð¿Ð¾Ð»Ð¸ÑÐ¸ÐºÐ°"
 
 #: ../components/iptvextmovieplayer.py:683
-#, fuzzy
 msgid "Video policy for 4:3"
-msgstr "Ð¤Ð¾ÑÐ¼Ð°Ñ Ð²Ð¸Ð´ÐµÐ¾:"
+msgstr "ÐÐ¸Ð´ÐµÐ¾Ð¿Ð¾Ð»Ð¸ÑÐ¸ÐºÐ° Ð´Ð»Ñ 4:3"
 
 #: ../hosts/hosttvnowde.py:441
 msgid "Video with DRM protection."
 msgstr "ÐÐ¸Ð´ÐµÐ¾ Ñ Ð·Ð°ÑÐ¸ÑÐ¾Ð¹ DRM."
 
 #: ../libs/urlparser.py:2895
-#, fuzzy
 msgid ""
 "Videomega has blocked your IP for some time.\n"
 "Please retry this link after some time."
-msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½ÑÑ Ð¾ÑÐ¸Ð±ÐºÐ°: \"Videomega Ð·Ð°Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²Ð°Ð» Ð²Ð°Ñ IP Ð² ÑÐµÑÐµÐ½Ð¸Ðµ Ð½ÐµÐºÐ¾ÑÐ¾ÑÐ¾Ð³Ð¾ Ð²ÑÐµÐ¼ÐµÐ½Ð¸. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð²ÑÐ¾ÑÐ¸ÑÐµ Ð¿Ð¾Ð¿ÑÑÐºÑ Ð¾ÑÐºÑÑÑÑ ÑÑÑ ÑÑÑÐ»ÐºÑ Ð¿Ð¾ÑÐ»Ðµ Ð½ÐµÐºÐ¾ÑÐ¾ÑÐ¾Ð³Ð¾ Ð²ÑÐµÐ¼ÐµÐ½Ð¸.\""
+msgstr ""
+"Videomega Ð·Ð°Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²Ð°Ð» ÐÐ°Ñ IP Ð½Ð° Ð½ÐµÐºÐ¾ÑÐ¾ÑÐ¾Ðµ Ð²ÑÐµÐ¼Ñ.\n"
+"ÐÐ¾Ð²ÑÐ¾ÑÐ¸ÑÐµ Ð¿Ð¾Ð¿ÑÑÐºÑ ÑÐµÑÐµÐ· Ð½ÐµÐºÐ¾ÑÐ¾ÑÐ¾Ðµ Ð²ÑÐµÐ¼Ñ."
 
 #: ../hosts/hostvevo.py:415 ../hosts/hostyoutube.py:212
 #: ../hosts/hostvimeo.py:426 ../hosts/hosturllist.py:53
@@ -5820,14 +5658,14 @@
 msgstr "ÐÐ¸Ð´ÐµÐ¾"
 
 #: ../hosts/hosttwitchtv.py:291
-#, fuzzy, python-format
+#, python-format
 msgid "Videos %s"
-msgstr "ÐÐ¸Ð´ÐµÐ¾"
+msgstr "ÐÐ¸Ð´ÐµÐ¾ %s"
 
 #: ../hosts/hostuktvplay.py:154
-#, fuzzy, python-format
+#, python-format
 msgid "Videos count: %s"
-msgstr "ÐÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑÐ¾Ð²"
+msgstr "ÐÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ Ð²Ð¸Ð´ÐµÐ¾: %s"
 
 #: ../libs/youtubeparser.py:37
 msgid "View count"
@@ -5838,27 +5676,24 @@
 msgstr "ÐÑÐ¾ÑÐ¼Ð¾ÑÑÑ"
 
 #: ../hosts/hosthdstreams.py:218 ../hosts/hostfaselhdcom.py:133
-#, fuzzy
 msgid "Views:"
-msgstr "ÐÑÐ¾ÑÐ¼Ð¾ÑÑÑ"
+msgstr "ÐÑÐ¾ÑÐ¼Ð¾ÑÑÑ:"
 
 #: ../libs/livetvhdnet.py:97
-#, fuzzy
 msgid "Views: "
-msgstr "ÐÑÐ¾ÑÐ¼Ð¾ÑÑÑ"
+msgstr "ÐÑÐ¾ÑÐ¼Ð¾ÑÑÑ: "
 
 #: ../hosts/hostvimeo.py:31
-#, fuzzy
 msgid "Vimeo Suggestions"
-msgstr "ÐÐ°ÑÐ°Ð¼ÐµÑÑÑ Ð²Ð¸Ð´ÐµÐ¾"
+msgstr "ÐÑÐµÐ´Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ Vimeo"
 
 #: ../components/e2ivk.py:369 ../components/VirtualKeyBoard.py:156
 msgid "Virtual Keyboard"
-msgstr ""
+msgstr "ÐÐ¸ÑÑÑÐ°Ð»ÑÐ½Ð°Ñ ÐºÐ»Ð°Ð²Ð¸Ð°ÑÑÑÐ°"
 
 #: ../components/iptvconfigmenu.py:383
 msgid "Virtual Keyboard type"
-msgstr ""
+msgstr "Ð¢Ð¸Ð¿ Ð²Ð¸ÑÑÑÐ°Ð»ÑÐ½Ð¾Ð¹ ÐºÐ»Ð°Ð²Ð¸Ð°ÑÑÑÑ"
 
 #: ../hosts/hostwatchwrestlinguno.py:31 ../hosts/hostwatchwrestling.py:49
 msgid "WWE"
@@ -5871,12 +5706,12 @@
 #: ../Web/webSite.py:164
 #, python-format
 msgid "Waiting search thread to stop, please wait (%d)"
-msgstr ""
+msgstr "ÐÐ¶Ð¸Ð´Ð°Ð½Ð¸Ðµ Ð¿Ð¾Ð¸ÑÐºÐ¾Ð²Ð¾Ð¹ ÑÑÑÐ¾ÐºÐ¸ Ð´Ð»Ñ Ð¾ÑÑÐ°Ð½Ð¾Ð²ÐºÐ¸. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ (%d)"
 
 #: ../Web/webParts.py:312 ../Web/webParts.py:320 ../Web/webParts.py:328
 #: ../Web/webParts.py:336 ../Web/webParts.py:439
 msgid "Watch"
-msgstr ""
+msgstr "ÐÑÐ¾ÑÐ¼Ð¾ÑÑ"
 
 #: ../hosts/hostgreekdocumentaries3.py:159
 msgid "Watch Trailer"
@@ -5884,62 +5719,59 @@
 
 #: ../plugin.py:36
 msgid "Watch Videos Online"
-msgstr ""
+msgstr "ÐÑÐ¾ÑÐ¼Ð¾ÑÑ Ð²Ð¸Ð´ÐµÐ¾ Ð¾Ð½Ð»Ð°Ð¹Ð½"
 
 #: ../libs/urlparser.py:9390
 msgid "We can't find the file you are looking for. It maybe got deleted by the owner or was removed due a copyright violation."
-msgstr ""
+msgstr "ÐÑ Ð½Ðµ Ð¼Ð¾Ð¶ÐµÐ¼ Ð½Ð°Ð¹ÑÐ¸ ÑÐ°Ð¹Ð», ÐºÐ¾ÑÐ¾ÑÑÐ¹ Ð²Ñ Ð¸ÑÐµÑÐµ. ÐÐ¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾, Ð¾Ð½ Ð±ÑÐ» ÑÐ´Ð°Ð»ÐµÐ½ Ð²Ð»Ð°Ð´ÐµÐ»ÑÑÐµÐ¼ Ð¸Ð»Ð¸ Ð±ÑÐ» ÑÐ´Ð°Ð»ÐµÐ½ Ð¸Ð·-Ð·Ð° Ð½Ð°ÑÑÑÐµÐ½Ð¸Ñ Ð°Ð²ÑÐ¾ÑÑÐºÐ¸Ñ Ð¿ÑÐ°Ð²."
 
 #: ../Web/webSite.py:113
 msgid "Web component has been reset and all threads are stopped. :)"
-msgstr ""
+msgstr "ÐÐµÐ±-ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ Ð±ÑÐ» ÑÐ±ÑÐ¾ÑÐµÐ½, Ð¸ Ð²ÑÐµ Ð¿Ð¾ÑÐ¾ÐºÐ¸ Ð¾ÑÑÐ°Ð½Ð¾Ð²Ð»ÐµÐ½Ñ. :)"
 
 #: ../Web/webSite.py:115
 msgid "Web component has been reset, the following threads are still working:"
-msgstr ""
+msgstr "ÐÐµÐ±-ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ ÑÐ±ÑÐ¾ÑÐµÐ½. ÐÑÐ¾Ð´Ð¾Ð»Ð¶Ð°ÑÑ ÑÐ°Ð±Ð¾ÑÐ°ÑÑ ÑÐ»ÐµÐ´ÑÑÑÐ¸Ðµ Ð¿Ð¾ÑÐ¾ÐºÐ¸:"
 
 #: ../Web/webParts.py:67 ../Web/webParts.py:84
 msgid "Web interface version"
-msgstr ""
+msgstr "ÐÐµÑÑÐ¸Ñ Ð²ÐµÐ±-Ð¸Ð½ÑÐµÑÑÐµÐ¹ÑÐ°"
 
 #: ../hosts/hostddl.py:28
-#, fuzzy
 msgid "Web proxy"
-msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·ÑÐ¹ÑÐµ Ð¿ÑÐ¾ÐºÑÐ¸"
+msgstr "ÐÐµÐ±-Ð¿ÑÐ¾ÐºÑÐ¸"
 
 #: ../hosts/hostwatchwrestling.py:52
-#, fuzzy
 msgid "Weekly Indys"
-msgstr "ÐÐ¶ÐµÐ½ÐµÐ´ÐµÐ»ÑÐ½Ð¾"
+msgstr "ÐÐ¶ÐµÐ½ÐµÐ´ÐµÐ»ÑÐ½ÑÐµ ÐÐ½Ð´Ð¸"
 
 #: ../iptvdm/iptvbuffui.py:548
 msgid "Whole file must be downloaded to start playback!"
-msgstr ""
+msgstr "ÐÐ»Ñ Ð½Ð°ÑÐ°Ð»Ð° Ð²Ð¾ÑÐ¿ÑÐ¾Ð¸Ð·Ð²ÐµÐ´ÐµÐ½Ð¸Ñ Ð½ÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼Ð¾ Ð·Ð°Ð³ÑÑÐ·Ð¸ÑÑ Ð²ÐµÑÑ ÑÐ°Ð¹Ð»!"
 
 #: ../hosts/hostsvtplayse.py:155
 msgid "With closed captioned."
-msgstr ""
+msgstr "Ð¡ ÑÑÐ±ÑÐ¸ÑÑÐ°Ð¼Ð¸."
 
 #: ../components/iptvconfigmenu.py:353
 msgid "Write current title to file:"
-msgstr ""
+msgstr "ÐÐ¿Ð¸ÑÐ¸ÑÐµ ÑÐµÐºÑÑÐ¸Ð¹ Ð·Ð°Ð³Ð¾Ð»Ð¾Ð²Ð¾Ðº Ð² ÑÐ°Ð¹Ð»:"
 
 #: ../libs/urlparser.py:4450 ../hosts/hoststreamliveto.py:354
 msgid "Wrong answer."
 msgstr "ÐÐµÐ²ÐµÑÐ½ÑÐ¹ Ð¾ÑÐ²ÐµÑ."
 
 #: ../libs/firstonetvnet.py:336
-#, fuzzy
 msgid "Wrong captcha image data!"
-msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¿Ð¾Ð»ÑÑÐ¸ÑÑ Ð´Ð°Ð½Ð½ÑÐµ."
+msgstr "ÐÐµÐ²ÐµÑÐ½ÑÐµ Ð´Ð°Ð½Ð½ÑÐµ Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ñ Ñ ÐºÐ°ÑÑÐ¸Ð½ÐºÐ¸!"
 
 #: ../components/isubprovider.py:570
 msgid "Wrong format of rar archive."
-msgstr "ÐÐµÐ¿ÑÐ°Ð²Ð¸Ð»ÑÐ½ÑÐ¹ ÑÐ¾ÑÐ¼Ð°Ñ rar Ð°ÑÑÐ¸Ð²Ð°."
+msgstr "ÐÐµÐ¿ÑÐ°Ð²Ð¸Ð»ÑÐ½ÑÐ¹ ÑÐ¾ÑÐ¼Ð°Ñ rar-Ð°ÑÑÐ¸Ð²Ð°."
 
 #: ../components/isubprovider.py:547 ../subproviders/subprov_napisy24pl.py:348
 msgid "Wrong format of zip archive."
-msgstr "ÐÐµÐ¿ÑÐ°Ð²Ð¸Ð»ÑÐ½ÑÐ¹ ÑÐ¾ÑÐ¼Ð°Ñ Ð¿Ð¾ÑÑÐ¾Ð²Ð¾Ð³Ð¾ Ð°ÑÑÐ¸Ð²Ð°."
+msgstr "ÐÐµÐ¿ÑÐ°Ð²Ð¸Ð»ÑÐ½ÑÐ¹ ÑÐ¾ÑÐ¼Ð°Ñ zip-Ð°ÑÑÐ¸Ð²Ð°."
 
 #: ../tools/iptvfavourites.py:124 ../tools/iptvfavourites.py:188
 msgid "Wrong indexes."
@@ -5948,12 +5780,11 @@
 #: ../iptvupdate/updatemainwindow.py:955
 #, python-format
 msgid "Wrong the encryption key size: %s\n"
-msgstr ""
+msgstr "ÐÐµÐ²ÐµÑÐ½ÑÐ¹ ÑÐ°Ð·Ð¼ÐµÑ ÐºÐ»ÑÑÐ° ÑÐ¸ÑÑÐ¾Ð²Ð°Ð½Ð¸Ñ: %s\n"
 
 #: ../subproviders/subprov_popcornsubtitles.py:56
-#, fuzzy
 msgid "Wrong uri."
-msgstr "ÐÐµÐ²ÐµÑÐ½ÑÐ¹ Ð¾ÑÐ²ÐµÑ."
+msgstr "ÐÐµÐ¿ÑÐ°Ð²Ð¸Ð»ÑÐ½ÑÐ¹ uri."
 
 #: ../iptvupdate/updatemainwindow.py:325
 #, python-format
@@ -5963,13 +5794,13 @@
 msgstr "ÐÐµÐ²ÐµÑÐ½Ð°Ñ Ð²ÐµÑÑÐ¸Ñ. ÐÐ°Ð³ÑÑÐ¶ÐµÐ½Ð½Ð°Ñ Ð²ÐµÑÑÐ¸Ñ [%s] Ð¾ÑÐ»Ð¸ÑÐ°ÐµÑÑÑ Ð¾Ñ ÑÑÐµÐ±ÑÐµÐ¼Ð¾Ð¹ [%s]."
 
 #: ../iptvupdate/updatemainwindow.py:748
-#, fuzzy, python-format
+#, python-format
 msgid "Wrong version: [%s]."
-msgstr "ÐÑÐ±ÑÐ°Ð½Ð½ÑÐ¹ Ð²Ð°ÑÐ¸Ð°Ð½Ñ [%s]."
+msgstr "ÐÐµÐ¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð°Ñ Ð²ÐµÑÑÐ¸Ñ: [%s]."
 
 #: ../hosts/hosttwitchtv.py:56
 msgid "Xbox One"
-msgstr ""
+msgstr "Xbox One"
 
 #: ../hosts/hostfilmovizijastudio.py:52 ../hosts/hostcartoonhd.py:535
 #: ../hosts/hostlibrestream.py:28
@@ -5977,14 +5808,13 @@
 msgstr "ÐÐ¾Ð´"
 
 #: ../hosts/hostcineto.py:124
-#, fuzzy, python-format
+#, python-format
 msgid "Year %s"
-msgstr "ÐÐ¾Ð´: "
+msgstr "ÐÐ¾Ð´ %s"
 
 #: ../hosts/hostddl.py:565
-#, fuzzy
 msgid "Year:"
-msgstr "ÐÐ¾Ð´: "
+msgstr "ÐÐ¾Ð´:"
 
 #: ../hosts/hostgamatocom.py:88 ../hosts/hostgamatocom.py:91
 #: ../hosts/hostvizjerpl.py:184 ../hosts/hostfilman.py:199
@@ -5996,41 +5826,41 @@
 #: ../components/configextmovieplayer.py:26
 #: ../subproviders/subprov_subscenecom.py:273
 msgid "Yes"
-msgstr ""
+msgstr "ÐÐ°"
 
 #: ../hosts/hosttvnowde.py:153
 msgid "Yesterday"
-msgstr ""
+msgstr "ÐÑÐµÑÐ°"
 
 #: ../hosts/hostekstraklasatv.py:388
 msgid "You are not allowed to play this video"
-msgstr ""
+msgstr "ÐÐ°Ð¼ Ð½Ðµ ÑÐ°Ð·ÑÐµÑÐµÐ½Ð¾ Ð²Ð¾ÑÐ¿ÑÐ¾Ð¸Ð·Ð²Ð¾Ð´Ð¸ÑÑ ÑÑÐ¾ Ð²Ð¸Ð´ÐµÐ¾"
 
 #: ../Web/webSite.py:73
 msgid "You are using old version of OpenWebif.<br> To go to E2iPlayer web Select the following link<br>"
-msgstr ""
+msgstr "ÐÑ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÐµ ÑÑÐ°ÑÑÑ Ð²ÐµÑÑÐ¸Ñ OpenWebif. <br> ÐÐ»Ñ Ð¿ÐµÑÐµÑÐ¾Ð´Ð° Ð½Ð° Ð²ÐµÐ±-ÑÐ°Ð¹Ñ E2iPlayer Ð²ÑÐ±ÐµÑÐ¸ÑÐµ ÑÐ»ÐµÐ´ÑÑÑÑÑ ÑÑÑÐ»ÐºÑ <br>"
 
 #: ../libs/pCommon.py:416
 msgid "You can disable HTTPS certificates validation in the E2iPlayer configuration to suppress this problem."
-msgstr ""
+msgstr "ÐÑ Ð¼Ð¾Ð¶ÐµÑÐµ Ð¾ÑÐºÐ»ÑÑÐ¸ÑÑ Ð¿ÑÐ¾Ð²ÐµÑÐºÑ ÑÐµÑÑÐ¸ÑÐ¸ÐºÐ°ÑÐ¾Ð² HTTPS Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ E2iPlayer, ÑÑÐ¾Ð±Ñ ÑÑÑÑÐ°Ð½Ð¸ÑÑ ÑÑÑ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ñ."
 
 #: ../libs/pCommon.py:428
 msgid "You can enable PyCurl in the E2iPlayer configuration to fix this problem."
-msgstr ""
+msgstr "ÐÑ Ð¼Ð¾Ð¶ÐµÑÐµ Ð²ÐºÐ»ÑÑÐ¸ÑÑ PyCurl Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ E2iPlayer, ÑÑÐ¾Ð±Ñ ÑÑÑÑÐ°Ð½Ð¸ÑÑ ÑÑÑ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ñ."
 
 #: ../libs/pCommon.py:432
 #, python-format
 msgid "You can install PyCurl package from %s to fix this problem."
-msgstr ""
+msgstr "ÐÑ Ð¼Ð¾Ð¶ÐµÑÐµ ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ Ð¿Ð°ÐºÐµÑ PyCurl Ð¸Ð· %s, ÑÑÐ¾Ð±Ñ ÑÐµÑÐ¸ÑÑ ÑÑÑ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ñ."
 
 #: ../components/captcha_helper.py:67
 #, python-format
 msgid "You can use \"%s\" or \"%s\" services for automatic solution."
-msgstr ""
+msgstr "ÐÑ Ð¼Ð¾Ð¶ÐµÑÐµ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ ÑÐµÑÐ²Ð¸ÑÑ \"%s\" Ð¸Ð»Ð¸ \"%s\" Ð´Ð»Ñ Ð°Ð²ÑÐ¾Ð¼Ð°ÑÐ¸ÑÐµÑÐºÐ¾Ð³Ð¾ ÑÐµÑÐµÐ½Ð¸Ñ."
 
 #: ../iptvdm/iptvbuffui.py:550
 msgid "You can use external eplayer to start playback faster."
-msgstr ""
+msgstr "ÐÑ Ð¼Ð¾Ð¶ÐµÑÐµ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð²Ð½ÐµÑÐ½Ð¸Ð¹ eplayer Ð´Ð»Ñ ÑÑÐºÐ¾ÑÐµÐ½Ð¸Ñ Ð²Ð¾ÑÐ¿ÑÐ¾Ð¸Ð·Ð²ÐµÐ´ÐµÐ½Ð¸Ñ."
 
 #: ../libs/weebtv.py:192
 msgid "You do not have a premium account. Starting a sponsored broadcast."
@@ -6042,7 +5872,7 @@
 
 #: ../libs/pCommon.py:554 ../libs/pCommon.py:1218
 msgid "You should never perform block I/O operations in the __init__."
-msgstr ""
+msgstr "ÐÑ Ð½Ð¸ÐºÐ¾Ð³Ð´Ð° Ð½Ðµ Ð´Ð¾Ð»Ð¶Ð½Ñ Ð²ÑÐ¿Ð¾Ð»Ð½ÑÑÑ Ð¾Ð¿ÐµÑÐ°ÑÐ¸Ð¸ Ð±Ð»Ð¾ÑÐ½Ð¾Ð³Ð¾ Ð²Ð²Ð¾Ð´Ð°-Ð²ÑÐ²Ð¾Ð´Ð° Ð² __init__."
 
 #: ../hosts/hostserienstreamto.py:52
 msgid "Your language preference:"
@@ -6051,31 +5881,31 @@
 #: ../components/iptvplayerwidget.py:2030
 #: ../components/iptvplayerwidget.py:2034
 msgid "Your search entry"
-msgstr "ÐÐ²ÐµÐ´Ð¸ÑÐµ ÑÐ¸Ð¿ Ð¿Ð¾Ð¸ÑÐºÐ°"
+msgstr "ÐÐ°ÑÐ° ÑÑÐ°Ð·Ð° Ð¿Ð¾Ð¸ÑÐºÐ°"
 
 #: ../suggestions/google.py:22
 msgid "Youtube Suggestions"
-msgstr ""
+msgstr "ÐÑÐµÐ´Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ YouTube"
 
 #: ../components/confighost.py:45
 #, python-format
 msgid "[%s] - configuration"
-msgstr "[%s] - ÐÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ñ"
+msgstr "[%s] - ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ñ"
 
 #: ../setup/iptvsetupimpl.py:1357
-#, fuzzy, python-format
+#, python-format
 msgid "[%s] will be used by %s."
-msgstr "[%s] ÐÑÐ´ÐµÑ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑÑÑ IPTV Ð¿Ð»ÐµÐµÑÐ¾Ð¼."
+msgstr "[%s] ÐÑÐ´ÐµÑ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¾ %s."
 
 #: ../components/iptvplayerwidget.py:756 ../components/iptvplayerwidget.py:758
 #, python-format
 msgid "[%s] with buffering"
-msgstr "%s Ñ Ð±ÑÑÐµÑÐ¸Ð·Ð°ÑÐ¸ÐµÐ¹"
+msgstr "[%s] Ñ Ð±ÑÑÐµÑÐ¸Ð·Ð°ÑÐ¸ÐµÐ¹"
 
 #: ../components/iptvplayerwidget.py:760 ../components/iptvplayerwidget.py:762
 #, python-format
 msgid "[%s] without buffering"
-msgstr "%s Ð±ÐµÐ· Ð±ÑÑÐµÑÐ¸Ð·Ð°ÑÐ¸Ð¸"
+msgstr "[%s] Ð±ÐµÐ· Ð±ÑÑÐµÑÐ¸Ð·Ð°ÑÐ¸Ð¸"
 
 #: ../components/iptvconfigmenu.py:431
 msgid "[HLS/M3U8] buffering"
@@ -6087,7 +5917,7 @@
 
 #: ../hosts/hostnuteczki.py:182 ../hosts/hostnuteczki.py:307
 msgid "[Logged-in-only] "
-msgstr ""
+msgstr "[Ð¢Ð¾Ð»ÑÐºÐ¾ Ð·Ð°ÑÐµÐ³Ð¸ÑÑÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð½ÑÐ¹] "
 
 #: ../components/iptvconfigmenu.py:432
 msgid "[RTMP] buffering (rtmpdump required)"
@@ -6095,182 +5925,173 @@
 
 #: ../hosts/hostiptvplayerinfo.py:57
 msgid "[en]"
-msgstr ""
+msgstr "[en]"
 
 #: ../hosts/hostiptvplayerinfo.py:58
 msgid "[pl]"
-msgstr ""
+msgstr "[pl]"
 
 #: ../hosts/hostfilmeonlineto.py:277 ../hosts/hosttainieskaiseirestv.py:197
-#, fuzzy
 msgid "[trailer]"
-msgstr "[Ð¢ÑÐµÐ¹Ð»ÐµÑ]"
+msgstr "[ÑÑÐµÐ¹Ð»ÐµÑ]"
 
 #: ../subproviders/subprov_opensubtitlesorg.py:174
 msgid "_checkStatus except error"
-msgstr "ÐÑÐ¾Ð²ÐµÑÐºÐ° ÑÑÐ°ÑÑÑÐ°, Ð·Ð° Ð¸ÑÐºÐ»ÑÑÐµÐ½Ð¸ÐµÐ¼ Ð¾ÑÐ¸Ð±Ð¾Ðº"
+msgstr "_Ð¿ÑÐ¾Ð²ÐµÑÐºÐ° ÑÑÐ°ÑÑÑÐ°, Ð¸ÑÐºÐ»ÑÑÐ°Ñ Ð¾ÑÐ¸Ð±ÐºÐ¸"
 
 #: ../components/iptvconfigmenu.py:72
 msgid "after a week"
-msgstr "Ð§ÐµÑÐµÐ· Ð½ÐµÐ´ÐµÐ»Ñ"
+msgstr "ÑÐµÑÐµÐ· Ð½ÐµÐ´ÐµÐ»Ñ"
 
 #: ../components/iptvconfigmenu.py:72
 msgid "after closing"
-msgstr "ÐÐ¾ÑÐ»Ðµ Ð·Ð°ÐºÑÑÑÐ¸Ñ"
+msgstr "Ð¿Ð¾ÑÐ»Ðµ Ð·Ð°ÐºÑÑÑÐ¸Ñ"
 
 #: ../components/iptvconfigmenu.py:72
 msgid "after day"
-msgstr "ÐÐ¾ÑÐ»Ðµ Ð¾Ð´Ð½Ð¾Ð³Ð¾ Ð´Ð½Ñ"
+msgstr "ÑÐµÑÐµÐ· Ð´ÐµÐ½Ñ"
 
 #: ../components/iptvconfigmenu.py:72
 msgid "after three days"
-msgstr "ÐÐ¾ÑÐ»Ðµ ÑÑÐµÑ Ð´Ð½ÐµÐ¹"
+msgstr "ÑÐµÑÐµÐ· ÑÑÐ¸ Ð´Ð½Ñ"
 
 #: ../components/iptvconfigmenu.py:73 ../hosts/hostvevo.py:114
-#, fuzzy
 msgid "all"
-msgstr "ÐÐµÐ±Ð¾Ð»ÑÑÐ¾Ð¹"
+msgstr "Ð²ÑÐµ"
 
 #: ../components/iptvconfigmenu.py:231
 msgid "all types"
-msgstr "ÐÑÐµ ÑÐ¸Ð¿Ñ"
+msgstr "Ð²ÑÐµ ÑÐ¸Ð¿Ñ"
 
 #: ../hosts/hostgamatocom.py:71 ../hosts/hostgamatocom.py:91
 msgid "any"
-msgstr "ÐÑÐ±ÑÐµ"
+msgstr "Ð»ÑÐ±ÑÐµ"
 
 #: ../components/configbase.py:33
 msgid "aqua"
-msgstr "ÐÐ¾Ð´Ð°"
+msgstr "Ð°ÐºÐ²Ð°"
 
 #: ../components/iptvconfigmenu.py:56
 msgid "armv5t"
-msgstr ""
+msgstr "armv5t"
 
 #: ../components/iptvconfigmenu.py:56
 msgid "armv7"
-msgstr ""
+msgstr "armv7"
 
 #: ../components/iptvconfigmenu.py:110 ../hosts/hostdailymotion.py:23
 msgid "auto"
-msgstr ""
+msgstr "Ð°Ð²ÑÐ¾"
 
 #: ../libs/videostar.py:33
 msgid "average"
-msgstr "Ð¡ÑÐµÐ´Ð½Ð¸Ð¹"
+msgstr "ÑÑÐµÐ´Ð½Ð¸Ð¹"
 
 #: ../components/configbase.py:32
-#, fuzzy
 msgid "black"
-msgstr "Ð§ÐµÑÐ½ÑÐ¹"
+msgstr "ÑÑÑÐ½ÑÐ¹"
 
 #: ../components/configbase.py:33
 msgid "blue"
-msgstr "Ð¡Ð¸Ð½Ð¸Ð¹"
+msgstr "ÑÐ¸Ð½Ð¸Ð¹"
 
 #: ../components/configextmovieplayer.py:75
 msgid "bottom"
-msgstr "ÐÐµÐ¼Ð»Ñ"
+msgstr "Ð½Ð¸Ð¶Ð½Ð¸Ð¹"
 
 #: ../components/iptvplayerwidget.py:1774
-#, fuzzy
 msgid "buffering location"
-msgstr "ÐÑÐ¾Ð´Ð¾Ð»Ð¶Ð¸ÑÐµÐ»ÑÐ½Ð¾ÑÑÑ Ð±ÑÑÐµÑÐ¸Ð·Ð°ÑÐ¸Ð¸"
+msgstr "ÑÐ°ÑÐ¿Ð¾Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ Ð±ÑÑÐµÑÐ°"
 
 #: ../components/configextmovieplayer.py:75
 msgid "center"
-msgstr "Ð¦ÐµÐ½ÑÑ"
+msgstr "ÑÐµÐ½ÑÑ"
 
 #: ../setup/iptvsetupimpl.py:965
 msgid "cmdwrap tool"
-msgstr ""
+msgstr "Ð¸Ð½ÑÑÑÑÐ¼ÐµÐ½Ñ cmdwrap"
 
 #: ../hosts/hostardmediathek.py:469
 msgid "de"
-msgstr ""
+msgstr "de"
 
 #: ../libs/urlparser.py:8596 ../components/iptvconfigmenu.py:242
 #: ../components/iptvsubsimpledownloader.py:277 ../hosts/hostddl.py:31
 msgid "default"
-msgstr "ÐÐ¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ"
+msgstr "Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ"
 
 #: ../hosts/hosturllist.py:63
 msgid "direct link"
-msgstr "ÐÑÑÐ¼Ð°Ñ ÑÑÑÐ»ÐºÐ°"
+msgstr "Ð¿ÑÑÐ¼Ð°Ñ ÑÑÑÐ»ÐºÐ°"
 
 #: ../components/iptvplayerwidget.py:1774
-#, fuzzy
 msgid "downloads location"
-msgstr "ÐÐ°Ð³ÑÑÐ·Ð¸ÑÑ ÑÐ½Ð¾Ð²Ð°"
+msgstr "Ð¼ÐµÑÑÐ¾ Ð·Ð°Ð³ÑÑÐ·Ð¾Ðº"
 
 #: ../setup/iptvsetupimpl.py:1030
 msgid "duktape"
-msgstr ""
+msgstr "duktape"
 
 #: ../hosts/hosttvnowde.py:392
-#, fuzzy, python-format
+#, python-format
 msgid "duration: %s"
-msgstr "Ð¡ÑÐ°Ð½ÑÐ¸Ð¸"
+msgstr "Ð´Ð»Ð¸ÑÐµÐ»ÑÐ½Ð¾ÑÑÑ: %s"
 
 #: ../components/iptvconfigmenu.py:467 ../hosts/hosteurosportplayer.py:33
 #: ../hosts/hostfreediscpl.py:37 ../hosts/hostbbcsport.py:37
 #: ../hosts/hostmrpiracy.py:51 ../hosts/hostrtbfbe.py:44
 #: ../hosts/hostserienstreamto.py:54
-#, fuzzy
 msgid "e-mail"
-msgstr "Ð­Ð». Ð°Ð´ÑÐµÑ"
+msgstr "e-mail"
 
 #: ../libs/firstonetvnet.py:43 ../libs/internetowa.py:34
 #: ../libs/goldvodtv.py:42 ../hosts/hosttvplayercom.py:51
-#, fuzzy
 msgid "email"
-msgstr "Ð­Ð». Ð°Ð´ÑÐµÑ"
+msgstr "ÑÐ». Ð°Ð´ÑÐµÑ"
 
 #: ../hosts/hosttvnowde.py:392
-#, fuzzy, python-format
+#, python-format
 msgid "episode: %s"
-msgstr "Ð­Ð¿Ð¸Ð·Ð¾Ð´Ñ"
+msgstr "ÑÐ¿Ð¸Ð·Ð¾Ð´: %s"
 
 #: ../components/iptvconfigmenu.py:110 ../components/iptvextmovieplayer.py:298
 msgid "external eplayer3"
-msgstr "ÐÐ½ÐµÑÐ½Ð¸Ð¹ eplayer3"
+msgstr "Ð²Ð½ÐµÑÐ½Ð¸Ð¹ eplayer3"
 
 #: ../components/iptvconfigmenu.py:110 ../components/iptvextmovieplayer.py:289
 msgid "external gstplayer"
-msgstr "ÐÐ½ÐµÑÐ½Ð¸Ð¹ gstplayer"
+msgstr "Ð²Ð½ÐµÑÐ½Ð¸Ð¹ gstplayer"
 
-#: ../Web/webParts.py:370
 msgid "first check if host works properly in GUI and web <b>BEFORE</b> reporting error in it !!!"
-msgstr ""
+msgstr "Ð¡Ð½Ð°ÑÐ°Ð»Ð° Ð¿ÑÐ¾Ð²ÐµÑÑÑÐµ, Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¾ Ð»Ð¸ ÑÐ°Ð±Ð¾ÑÐ°ÐµÑ ÑÐ¾ÑÑ Ð² GUI Ð¸ Ð°Ð´ÑÐµÑ <b>ÐÐÐ ÐÐ</b> ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸ÐµÐ¼ Ð¾Ð± Ð¾ÑÐ¸Ð±ÐºÐµ!"
 
 #: ../hosts/hostzdfmediathek.py:33 ../hosts/hostardmediathek.py:33
 msgid "format"
-msgstr "Ð¤Ð¾ÑÐ¼Ð°Ñ"
+msgstr "ÑÐ¾ÑÐ¼Ð°Ñ"
 
 #: ../components/configextmovieplayer.py:45
 #: ../components/configextmovieplayer.py:46
 #: ../components/configextmovieplayer.py:52
 #: ../components/configextmovieplayer.py:53
 #: ../components/configextmovieplayer.py:54
-#, fuzzy
 msgid "from E2 settings"
-msgstr "ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ¸ E2"
+msgstr "Ð¸Ð· Ð½Ð°ÑÑÑÐ¾ÐµÐº E2"
 
 #: ../components/configbase.py:32
 msgid "fuchsia"
-msgstr "Ð¤ÑÐºÑÐ¸Ñ"
+msgstr "ÑÑÐºÑÐ¸Ñ"
 
 #: ../hosts/hostplayrtsiw.py:312
 msgid "geoblocked"
-msgstr ""
+msgstr "Ð³ÐµÐ¾Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²ÐºÐ°"
 
 #: ../components/configbase.py:32
 msgid "gray"
-msgstr "Ð¡ÐµÑÑÐ¹"
+msgstr "ÑÐµÑÑÐ¹"
 
 #: ../components/configbase.py:33
 msgid "green"
-msgstr ""
+msgstr "Ð·ÐµÐ»ÑÐ½ÑÐ¹"
 
 #: ../hosts/hostzdfmediathek.py:32 ../hosts/hostardmediathek.py:32
 msgid "hd"
@@ -6279,12 +6100,11 @@
 #: ../libs/videostar.py:33 ../hosts/hostzdfmediathek.py:32
 #: ../hosts/hostardmediathek.py:29 ../hosts/hostardmediathek.py:32
 msgid "high"
-msgstr "ÐÑÑÐ¾ÐºÐ¸Ð¹"
+msgstr "Ð²ÑÑÐ¾ÐºÐ¸Ð¹"
 
 #: ../hosts/hosttvplayercom.py:37
-#, fuzzy
 msgid "highest"
-msgstr "ÐÑÑÐ¾ÐºÐ¸Ð¹"
+msgstr "Ð²ÑÑÑÐ¸Ð¹"
 
 #: ../setup/iptvsetupimpl.py:904
 msgid "hlsdl downloader"
@@ -6292,15 +6112,15 @@
 
 #: ../hosts/hosttvjworg.py:31
 msgid "horizontal"
-msgstr ""
+msgstr "Ð³Ð¾ÑÐ¸Ð·Ð¾Ð½ÑÐ°Ð»ÑÐ½Ð¾"
 
 #: ../hosts/hostserienstreamto.py:56
 msgid "host"
-msgstr ""
+msgstr "ÑÐ¾ÑÑ"
 
 #: ../Web/webParts.py:451
 msgid "host:"
-msgstr ""
+msgstr "ÑÐ¾ÑÑ:"
 
 #: ../components/iptvconfigmenu.py:101
 msgid "http://zadmario.gitlab.io/"
@@ -6308,7 +6128,7 @@
 
 #: ../components/iptvconfigmenu.py:414
 msgid "https - validate SSL certificates"
-msgstr "ÐÑÐ¾Ð²ÐµÑÐºÐ° ÑÐµÑÑÐ¸ÑÐ¸ÐºÐ°ÑÐ¾Ð² SSL"
+msgstr "https - Ð¿ÑÐ¾Ð²ÐµÑÐºÐ° ÑÐµÑÑÐ¸ÑÐ¸ÐºÐ°ÑÐ¾Ð² SSL"
 
 #: ../components/iptvconfigmenu.py:56
 msgid "i686"
@@ -6316,35 +6136,35 @@
 
 #: ../hosts/hostwatchwrestlinguno.py:34
 msgid "iMPACT Wrestling"
-msgstr ""
+msgstr "ÐÐÐÐÐÐ¢ Ð±Ð¾ÑÑÐ±Ð°"
 
 #: ../components/iptvconfigmenu.py:110
 msgid "internal"
-msgstr "ÐÐ½ÑÑÑÐµÐ½Ð½Ð¸Ð¹"
+msgstr "Ð²Ð½ÑÑÑÐµÐ½Ð½Ð¸Ð¹"
 
 #: ../components/iptvconfigmenu.py:73
 msgid "jpeg"
-msgstr ""
+msgstr "jpeg"
 
 #: ../components/iptvconfigmenu.py:73
 msgid "jpeg,png"
-msgstr ""
+msgstr "jpeg,png"
 
 #: ../components/iptvconfigmenu.py:73
 msgid "jpeg,png,gif"
-msgstr ""
+msgstr "jpeg,png,gif"
 
 #: ../hosts/hostpinkbike.py:25 ../hosts/hostzdfmediathek.py:29
 msgid "large"
-msgstr "ÐÐ¾Ð»ÑÑÐ¾Ð¹"
+msgstr "Ð±Ð¾Ð»ÑÑÐ¾Ð¹"
 
 #: ../components/iptvplayer.py:33 ../components/iptvplayer.py:34
 msgid "leave movie player..."
-msgstr "ÐÑÑÐ°Ð²Ð¸ÑÑ Ð¿ÑÐ¾Ð¸Ð³ÑÑÐ²Ð°ÑÐµÐ»Ñ ÑÐ¸Ð»ÑÐ¼Ð¾Ð²..."
+msgstr "Ð¿Ð¾ÐºÐ¸Ð´Ð°Ð½Ð¸Ðµ Ð²Ð¸Ð´ÐµÐ¾Ð¿Ð»ÐµÐµÑÐ°..."
 
 #: ../components/configbase.py:33
 msgid "lime"
-msgstr "ÐÐ°Ð¹Ð¼"
+msgstr "Ð»Ð°Ð¹Ð¼"
 
 #: ../hosts/hostmediasetplay.py:344
 msgid "live"
@@ -6359,31 +6179,30 @@
 #: ../hosts/hostfilmezz.py:41 ../hosts/hostcartoonhd.py:39
 #: ../hosts/hostserijeonline.py:38 ../hosts/hostvumedicom.py:38
 msgid "login"
-msgstr "ÐÐ¾Ð¹ÑÐ¸"
+msgstr "Ð»Ð¾Ð³Ð¸Ð½"
 
 #: ../libs/videostar.py:33 ../hosts/hostzdfmediathek.py:32
 #: ../hosts/hostardmediathek.py:29 ../hosts/hostardmediathek.py:32
 msgid "low"
-msgstr "ÐÐ¸Ð·ÐºÐ¸Ð¹"
+msgstr "Ð½Ð¸Ð·ÐºÐ¸Ð¹"
 
 #: ../hosts/hosttvplayercom.py:43
-#, fuzzy
 msgid "lowest"
-msgstr "ÐÐ¾Ð²ÐµÐ¹ÑÐ¸Ð¹"
+msgstr "Ð½Ð°Ð¸ÑÑÐ´ÑÐ¸Ð¹"
 
 #: ../libs/webcamera.py:69
 msgid "main"
-msgstr ""
+msgstr "Ð³Ð»Ð°Ð²Ð½Ð¾Ðµ"
 
 #: ../components/configbase.py:32
 msgid "maroon"
-msgstr "Ð¢ÐµÐ¼Ð½Ð¾-Ð±Ð¾ÑÐ´Ð¾Ð²ÑÐ¹"
+msgstr "ÐºÐ°ÑÑÐ°Ð½Ð¾Ð²ÑÐ¹"
 
 #: ../hosts/hostpinkbike.py:25 ../hosts/hostzdfmediathek.py:29
 #: ../hosts/hostzdfmediathek.py:32 ../hosts/hostardmediathek.py:29
 #: ../hosts/hostardmediathek.py:32
 msgid "medium"
-msgstr "Ð¡ÑÐµÐ´Ð½Ð¸Ð¹"
+msgstr "ÑÑÐµÐ´Ð½Ð¸Ð¹"
 
 #: ../components/iptvconfigmenu.py:56
 msgid "mipsel"
@@ -6391,15 +6210,15 @@
 
 #: ../components/configbase.py:33
 msgid "navy"
-msgstr "ÐÐ¾ÑÑÐºÐ¾Ð¹ Ð²Ð¾Ð»Ð½Ñ"
+msgstr "Ð¼Ð¾ÑÑÐºÐ¾Ð¹ Ð²Ð¾Ð»Ð½Ñ"
 
 #: ../components/iptvconfigmenu.py:186
 msgid "no"
-msgstr "ÐÐµÑ"
+msgstr "Ð½ÐµÑ"
 
 #: ../components/configbase.py:33
 msgid "olive"
-msgstr "ÐÐ»Ð¸Ð²ÐºÐ¾Ð²ÑÐ¹"
+msgstr "Ð¾Ð»Ð¸Ð²ÐºÐ¾Ð²ÑÐ¹"
 
 #: ../libs/firstonetvnet.py:44 ../libs/internetowa.py:35 ../libs/wizjatv.py:40
 #: ../libs/filmonapi.py:34 ../libs/wagasworld.py:37 ../libs/goldvodtv.py:43
@@ -6415,7 +6234,7 @@
 #: ../hosts/hostserijeonline.py:39 ../hosts/hosttvplayercom.py:52
 #: ../hosts/hostrtlmost.py:50 ../hosts/hostvumedicom.py:39
 msgid "password"
-msgstr "ÐÐ°ÑÐ¾Ð»Ñ"
+msgstr "Ð¿Ð°ÑÐ¾Ð»Ñ"
 
 #: ../components/iptvconfigmenu.py:231
 msgid "precompiled"
@@ -6423,96 +6242,92 @@
 
 #: ../components/iptvconfigmenu.py:101
 msgid "private"
-msgstr ""
+msgstr "ÑÐ°ÑÑÐ½Ð¾Ðµ"
 
 #: ../components/configbase.py:32
 msgid "purple"
-msgstr "ÐÑÑÐ¿ÑÑÐ½ÑÐ¹"
+msgstr "Ð¿ÑÑÐ¿ÑÑÐ½ÑÐ¹"
 
 #: ../setup/iptvsetupimpl.py:838
 msgid "python-cjson"
-msgstr ""
+msgstr "python-cjson"
 
 #: ../hosts/hostzdfmediathek.py:33 ../hosts/hostardmediathek.py:33
 msgid "quality"
-msgstr "ÐÐ°ÑÐµÑÑÐ²Ð¾"
+msgstr "ÐºÐ°ÑÐµÑÑÐ²Ð¾"
 
 #: ../setup/iptvsetupimpl.py:51 ../setup/iptvsetupimpl.py:62
 #: ../setup/iptvsetupimpl.py:65 ../setup/iptvsetupimpl.py:72
 #: ../setup/iptvsetupimpl.py:75 ../setup/iptvsetupimpl.py:81
 #: ../setup/iptvsetupimpl.py:87
 msgid "recommended"
-msgstr "Ð ÐµÐºÐ¾Ð¼ÐµÐ½Ð´ÑÐµÐ¼ÑÐ¹"
+msgstr "ÑÐµÐºÐ¾Ð¼ÐµÐ½Ð´ÑÐµÐ¼ÑÐµ"
 
 #: ../components/configbase.py:32
 msgid "red"
-msgstr "ÐÑÐ°ÑÐ½ÑÐ¹"
+msgstr "ÐºÑÐ°ÑÐ½ÑÐ¹"
 
 #: ../hosts/hostlocalmedia.py:131
 msgid "rootfs"
-msgstr "ÐÐ¾ÑÐ½ÐµÐ²ÑÐµ ÑÐ°Ð¹Ð»Ñ"
+msgstr "ÐºÐ¾ÑÐ½ÐµÐ²Ð°Ñ ÑÐ¸ÑÑÐµÐ¼Ð°"
 
 #: ../components/configextmovieplayer.py:49
 msgid "second"
-msgstr "Ð¡ÐµÐºÑÐ½Ð´Ð°"
+msgstr "ÑÐµÐºÑÐ½Ð´Ð°"
 
 #: ../components/configextmovieplayer.py:49
 #: ../components/configextmovieplayer.py:50
 #: ../components/configextmovieplayer.py:51
 msgid "seconds"
-msgstr "Ð¡ÐµÐºÑÐ½Ð´"
+msgstr "ÑÐµÐºÑÐ½Ð´"
 
 #: ../components/iptvconfigmenu.py:56
 msgid "sh4"
 msgstr "sh4"
 
 #: ../hosts/hostplayrtsiw.py:473
-#, fuzzy
 msgid "shows"
 msgstr "Ð¨Ð¾Ñ"
 
 #: ../components/configbase.py:32
 msgid "silver"
-msgstr "Ð¡ÐµÑÐµÐ±ÑÐ¾"
+msgstr "ÑÐµÑÐµÐ±ÑÐ¸ÑÑÑÐ¹"
 
 #: ../hosts/hostpinkbike.py:25 ../hosts/hostzdfmediathek.py:29
 msgid "small"
-msgstr "ÐÐµÐ±Ð¾Ð»ÑÑÐ¾Ð¹"
+msgstr "Ð¼Ð°Ð»ÐµÐ½ÑÐºÐ¸Ð¹"
 
 #: ../components/iptvconfigmenu.py:110
 msgid "standard"
-msgstr "Ð¡ÑÐ°Ð½Ð´Ð°ÑÑ"
+msgstr "ÑÑÐ°Ð½Ð´Ð°ÑÑ"
 
-#: ../components/configbase.py:33
 msgid "teal"
-msgstr "Ð§Ð¸ÑÐ¾Ðº"
+msgstr "ÑÐ¸ÑÐ¾Ðº"
 
 #: ../libs/videostar.py:33 ../libs/youtube_dl/extractor/vevo.py:34
 #: ../libs/youtube_dl/extractor/bbc.py:22 ../libs/youtubeparser.py:32
 #: ../libs/moonwalkcc.py:30 ../hosts/hostsvtplayse.py:35
 msgid "the best"
-msgstr "ÐÑÑÑÐ¸Ð¹"
+msgstr "Ð»ÑÑÑÐ¸Ð¹"
 
 #: ../hosts/hostchristusvincit.py:34
-#, fuzzy
 msgid "the highest"
-msgstr "ÐÑÑÑÐ¸Ð¹"
+msgstr "Ð½Ð°Ð¸Ð²ÑÑÑÐµÐµ"
 
 #: ../hosts/hostchristusvincit.py:24
-#, fuzzy
 msgid "the lowest"
-msgstr "ÐÑÑÑÐ¸Ð¹"
+msgstr "Ð½Ð°Ð¸ÑÑÐ´ÑÐ¸Ð¹"
 
 #: ../libs/videostar.py:33 ../libs/youtube_dl/extractor/vevo.py:22
 #: ../libs/youtube_dl/extractor/bbc.py:18 ../libs/youtubeparser.py:32
 #: ../libs/moonwalkcc.py:30 ../hosts/hostkisscartoonme.py:25
 #: ../hosts/hostsvtplayse.py:31 ../hosts/hosttvjworg.py:32
 msgid "the worst"
-msgstr "Ð¥ÑÐ´ÑÐ¸Ð¹"
+msgstr "ÑÑÐ´ÑÐ¸Ð¹"
 
 #: ../components/configextmovieplayer.py:75
 msgid "top"
-msgstr "ÐÐ²ÐµÑÑ"
+msgstr "Ð²ÐµÑÑ"
 
 #: ../hosts/hosttfarjocom.py:271 ../hosts/hostfilma24io.py:168
 #: ../hosts/hosthdfull.py:369 ../hosts/hoststreaminghdfun.py:246
@@ -6522,68 +6337,67 @@
 #: ../hosts/hostddl.py:392 ../hosts/hostfilmaoncom.py:240
 #: ../hosts/hostaltadefinizione.py:174
 msgid "trailer"
-msgstr "Ð¢ÑÐµÐ¹Ð»ÐµÑ"
+msgstr "ÑÑÐµÐ¹Ð»ÐµÑ"
 
 #: ../components/iptvconfigmenu.py:56 ../components/iptvconfigmenu.py:111
 #: ../hosts/hosturllist.py:65
 msgid "unknown"
-msgstr "ÐÐµÐ¸Ð·Ð²ÐµÑÑÐ½ÑÐ¹"
+msgstr "Ð½ÐµÐ¸Ð·Ð²ÐµÑÑÐ½ÑÐ¹"
 
 #: ../Web/webParts.py:67 ../Web/webParts.py:84
-#, fuzzy
 msgid "version"
-msgstr "ÐÐµÑÑÐ¸Ñ"
+msgstr "Ð²ÐµÑÑÐ¸Ñ"
 
 #: ../hosts/hosttvjworg.py:31
 msgid "vertical"
-msgstr ""
+msgstr "Ð²ÐµÑÑÐ¸ÐºÐ°Ð»ÑÐ½Ð¾"
 
 #: ../hosts/hostzdfmediathek.py:32 ../hosts/hostardmediathek.py:32
 msgid "very high"
-msgstr "ÐÑÐµÐ½Ñ Ð²ÑÑÐ¾ÐºÐ¸Ð¹"
+msgstr "Ð¾ÑÐµÐ½Ñ Ð²ÑÑÐ¾ÐºÐ¸Ð¹"
 
 #: ../libs/youtubeparser.py:374
-#, fuzzy, python-format
+#, python-format
 msgid "videos: %s"
-msgstr "ÐÐ¸Ð´ÐµÐ¾"
+msgstr "Ð²Ð¸Ð´ÐµÐ¾: %s"
 
 #: ../hosts/hostdailymotion.py:168
 msgid "views"
-msgstr "ÐÑÐ¾ÑÐ¼Ð¾ÑÑÑ"
+msgstr "Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑÑ"
 
 #: ../Web/webThreads.py:85
 msgid "visit site"
-msgstr ""
+msgstr "Ð¿Ð¾ÑÐµÑÐ¸ÑÐµ ÑÐ°Ð¹Ñ"
 
 #: ../components/iptvplayerwidget.py:480
-#, fuzzy, python-format
+#, python-format
 msgid "wait %s second"
-msgstr "Ð¡ÐµÐºÑÐ½Ð´Ð°"
+msgstr "Ð¶Ð´Ð°ÑÑ %s ÑÐµÐºÑÐ½Ð´Ñ"
 
 #: ../components/iptvplayerwidget.py:478
-#, fuzzy, python-format
+#, python-format
 msgid "wait %s seconds"
-msgstr "Ð¡ÐµÐºÑÐ½Ð´"
+msgstr "Ð¶Ð´Ð°ÑÑ %s ÑÐµÐºÑÐ½Ð´"
 
 #: ../components/configbase.py:32
 msgid "white"
-msgstr "ÐÐµÐ»ÑÐ¹"
+msgstr "Ð±ÐµÐ»ÑÐ¹"
 
 #: ../components/iptvconfigmenu.py:231
 msgid "with source code"
-msgstr "Ð¡ Ð¸ÑÑÐ¾Ð´Ð½ÑÐ¼ ÐºÐ¾Ð´Ð¾Ð¼"
+msgstr "Ñ Ð¸ÑÑÐ¾Ð´Ð½ÑÐ¼ ÐºÐ¾Ð´Ð¾Ð¼"
 
 #: ../components/iptvplayerwidget.py:728
 msgid "www: "
-msgstr ""
+msgstr "www: "
 
 #: ../components/configbase.py:33
 msgid "yellow"
-msgstr "ÐÐµÐ»ÑÑÐ¹"
+msgstr "Ð¶ÑÐ»ÑÑÐ¹"
 
 #: ../components/iptvconfigmenu.py:186
 msgid "yes, to console"
-msgstr "ÐÐ°, Ð½Ð° ÐºÐ¾Ð½ÑÐ¾Ð»Ðµ"
+msgstr "Ð´Ð°, Ð² ÐºÐ¾Ð½ÑÐ¾Ð»Ð¸"
 
 #: ../components/iptvconfigmenu.py:187
 msgid "yes, to file /hdd/iptv.dbg"
@@ -6593,6 +6407,1653 @@
 msgid "yes, to file /home/root/logs/iptv.dbg"
 msgstr "Ð¤Ð°Ð¹Ð», Ð½Ð° /home/root/logs/iptv.dbg"
 
-#: ../components/iptvconfigmenu.py:188
-msgid "yes, to file /tmp/iptv.dbg"
-msgstr "Ð¤Ð°Ð¹Ð», Ð½Ð° /tmp/iptv.dbg"
+msgid "--- Featured videos ---"
+msgstr "--- Ð ÐµÐºÐ¾Ð¼ÐµÐ½Ð´ÑÐµÐ¼ÑÐµ Ð²Ð¸Ð´ÐµÐ¾ ---"
+
+msgid "--- Hits ---"
+msgstr "--- Ð¥Ð¸ÑÑ ---"
+
+msgid "--- Hot ---"
+msgstr "--- Ð¡Ð²ÐµÐ¶Ð¸Ðµ ---"
+
+msgid "--- Best Videos ---"
+msgstr "--- ÐÑÑÑÐ¸Ðµ ÐÐ¸Ð´ÐµÐ¾ ---"
+
+msgid "--- New Videos ---"
+msgstr "--- ÐÐ¾Ð²ÑÐµ ÐÐ¸Ð´ÐµÐ¾ ---"
+
+msgid "--- Tags alfabetical ---"
+msgstr "--- ÐÐ¾ Ð°Ð»ÑÐ°Ð²Ð¸ÑÑ ---"
+
+msgid "--- Pornstars ---"
+msgstr "--- ÐÐ¾ÑÐ½Ð¾ Ð·Ð²ÐµÐ·Ð´Ñ ---"
+
+msgid "--- New ---"
+msgstr "--- ÐÐ¾Ð²ÑÐµ ---"
+
+msgid "--- Top Rated ---"
+msgstr "--- Ð¡Ð°Ð¼ÑÐµ Ð¿Ð¾Ð¿ÑÐ»ÑÑÐ½ÑÐµ ---"
+
+msgid "--- Most Viewedo ---"
+msgstr "--- ÐÐ°Ð¸Ð±Ð¾Ð»ÐµÐµ Ð¿ÑÐ¾ÑÐ¼Ð°ÑÑÐ¸Ð²Ð°ÐµÐ¼ÑÐµ ---"
+
+msgid "--- Most Favorited ---"
+msgstr "--- ÐÐ·Ð±ÑÐ°Ð½Ð½ÑÐµ Ð±Ð¾Ð»ÑÑÐ¸Ð½ÑÑÐ²Ð¾Ð¼ ---"
+
+msgid "--- Most Discussed ---"
+msgstr "--- Ð¡Ð°Ð¼ÑÐµ Ð¾Ð±ÑÑÐ¶Ð´Ð°ÐµÐ¼ÑÐµ ---"
+
+msgid "--- Newest ---"
+msgstr "--- ÐÐ¾Ð²ÐµÐ¹ÑÐ¸Ðµ ---"
+
+msgid "--- Most Viewed ---"
+msgstr "--- ÐÐ°Ð¸Ð±Ð¾Ð»ÐµÐµ Ð¿ÑÐ¾ÑÐ¼Ð°ÑÑÐ¸Ð²Ð°ÐµÐ¼ÑÐµ ---"
+
+msgid "--- Most Favored ---"
+msgstr "--- ÐÐ¾Ð»ÑÐ·ÑÑÑÐ¸ÐµÑÑ Ð¿ÑÐµÐ¸Ð¼ÑÑÐµÑÑÐ²Ð¾Ð¼ ---"
+
+msgid "--- Popular ---"
+msgstr "--- ÐÐ¾Ð¿ÑÐ»ÑÑÐ½ÑÐµ ---"
+
+msgid "--- On Air ---"
+msgstr "--- Ð ÑÑÐ¸ÑÐµ ---"
+
+msgid "--- Most Recent ---"
+msgstr "--- Ð¡Ð°Ð¼Ð¾Ðµ Ð½Ð¾Ð²Ð¾Ðµ ---"
+
+msgid "--- Longest ---"
+msgstr "--- Ð¡Ð°Ð¼ÑÐ¹ Ð´Ð»Ð¸Ð½Ð½ÑÐ¹ ---"
+
+msgid "--- Most viewed ---"
+msgstr "--- ÐÐ°Ð¸Ð±Ð¾Ð»ÐµÐµ Ð¿ÑÐ¾ÑÐ¼Ð°ÑÑÐ¸Ð²Ð°ÐµÐ¼ÑÐµ ---"
+
+msgid "--- Lastest ---"
+msgstr "--- ÐÐ¾ÑÐ»ÐµÐ´Ð½ÐµÐµ ---"
+
+msgid "--- Highest Rated ---"
+msgstr "--- ÐÐ°Ð¸Ð²ÑÑÑÐ¸Ð¹ ÑÐµÐ¹ÑÐ¸Ð½Ð³ ---"
+
+msgid "--- Most Popular ---"
+msgstr "--- Ð¡Ð°Ð¼ÑÐ¹ Ð¿Ð¾Ð¿ÑÐ»ÑÑÐ½ÑÐµ ---"
+
+msgid " - Local version"
+msgstr " - ÐÐ¾ÐºÐ°Ð»ÑÐ½Ð°Ñ Ð²ÐµÑÑÐ¸Ñ"
+
+msgid "--- Channels ---"
+msgstr "--- ÐÐ°Ð½Ð°Ð»Ñ ---"
+
+msgid "---Search History"
+msgstr "---ÐÑÑÐ¾ÑÐ¸Ñ Ð¿Ð¾Ð¸ÑÐºÐ°"
+
+msgid "---Search"
+msgstr "---ÐÐ¾Ð¸ÑÐº"
+
+msgid "Search "
+msgstr "ÐÐ¾Ð¸ÑÐº "
+
+msgid "--- Cams ---"
+msgstr "--- Web-ÐºÐ°Ð¼ÐµÑÑ ---"
+
+msgid "Cams"
+msgstr "Web-ÐºÐ°Ð¼ÐµÑÑ"
+
+msgid "Update Now & Restart Enigma2"
+msgstr "ÐÐ±Ð½Ð¾Ð²Ð¸ÑÑ ÑÐµÐ¹ÑÐ°Ñ Ð¸ Ð¿ÐµÑÐµÐ·Ð°Ð³ÑÑÐ·Ð¸ÑÑ Enigma2"
+
+msgid "ERROR - Error unpacking %s' % source"
+msgstr "ÐÑÐ¸Ð±ÐºÐ°: Ð¡Ð±Ð¾Ð¹ ÑÐ°ÑÐ¿Ð°ÐºÐ¾Ð²ÐºÐ¸ %s' % Ð¸ÑÑÐ¾ÑÐ½Ð¸Ðº"
+
+msgid "Require pin:"
+msgstr "Ð¢ÑÐµÐ±Ð¾Ð²Ð°ÑÑ PIN-ÐºÐ¾Ð´:"
+
+msgid "File Location xxxlist.txt :"
+msgstr "Ð Ð°ÑÐ¿Ð¾Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ ÑÐ°Ð¹Ð»Ð° xxxlist.txt :"
+
+msgid "Sort xxxlist :"
+msgstr "Ð¡Ð¾ÑÑÐ¸ÑÐ¾Ð²ÐºÐ° xxxlist :"
+
+msgid "--- boy ---"
+msgstr "--- ÐÐ°Ð»ÑÑÐ¸ÐºÐ¸ ---"
+
+msgid "--- gay ---"
+msgstr "--- ÐÐµÐ¸ ---"
+
+msgid "--- Transgender ---"
+msgstr "--- Ð¢ÑÐ°Ð½ÑÐ³ÐµÐ½Ð´ÐµÑÑ ---"
+
+msgid "--- Couple ---"
+msgstr "--- ÐÐ°ÑÐ° ---"
+
+msgid "--- Mature ---"
+msgstr "--- ÐÑÐµÐ»ÑÐµ ---"
+
+msgid "--- Fetish ---"
+msgstr "--- Ð¤ÐµÑÐ¸Ñ ---"
+
+msgid "--- Lesbian ---"
+msgstr "--- ÐÐµÑÐ±Ð¸ÑÐ½ÐºÐ¸ ---"
+
+msgid "--- Soul_mate ---"
+msgstr "--- Ð Ð¾Ð´ÑÑÐ²ÐµÐ½Ð½ÑÐµ Ð´ÑÑÐ¸ ---"
+
+msgid "--- Hot_flirt ---"
+msgstr "--- ÐÐ¾ÑÑÑÐ¸Ð¹ ÑÐ»Ð¸ÑÑ ---"
+
+msgid "--- Girl ---"
+msgstr "--- ÐÐµÐ²ÑÑÐºÐ¸ ---"
+
+msgid "boy"
+msgstr "Ð¼Ð°Ð»ÑÑÐ¸ÐºÐ¸"
+
+msgid "gay"
+msgstr "Ð³ÐµÐ¸"
+
+msgid "Transgender"
+msgstr "Ð¢ÑÐ°Ð½ÑÐ³ÐµÐ½Ð´ÐµÑÑ"
+
+msgid "Couple"
+msgstr "ÐÐ°ÑÑ"
+
+msgid "Mature"
+msgstr "ÐÑÐµÐ»ÑÐµ"
+
+msgid "Fetish"
+msgstr "Ð¤ÐµÑÐ¸Ñ"
+
+msgid "Lesbian"
+msgstr "ÐÐµÑÐ±Ð¸ÑÐ½ÐºÐ¸"
+
+msgid "Soul_mate"
+msgstr "Ð Ð¾Ð´ÑÑÐ²ÐµÐ½Ð½ÑÐµ Ð´ÑÑÐ¸"
+
+msgid "Hot_flirt"
+msgstr "ÐÐ¾ÑÑÑÐ¸Ð¹ ÑÐ»Ð¸ÑÑ"
+
+msgid "Girl"
+msgstr "ÐÐµÐ²ÑÑÐºÐ¸"
+
+msgid "--- Couples ---"
+msgstr "--- ÐÐ°ÑÑ ---"
+
+msgid "--- Male ---"
+msgstr "--- ÐÑÐ¶ÑÐºÐ¸Ðµ ---"
+
+msgid "--- Transsexual ---"
+msgstr "--- Ð¢ÑÐ°Ð½ÑÑÐµÐºÑÑÐ°Ð»Ñ ---"
+
+msgid "--- Female ---"
+msgstr "--- ÐÐµÐ½ÑÐºÐ¸Ðµ ---"
+
+msgid "vapor"
+msgstr "Ð¿Ð°ÑÑ"
+
+msgid "Men"
+msgstr "ÐÑÐ¶ÑÐ¸Ð½Ñ"
+
+msgid "Shemale"
+msgstr "Ð¢ÑÐ°Ð½ÑÑÐµÐºÑÑÐ°Ð»"
+
+msgid "Women"
+msgstr "ÐÐµÐ½ÑÐ¸Ð½Ñ"
+
+msgid "new"
+msgstr "Ð½Ð¾Ð²ÑÐ¹"
+
+msgid "ERROR - Error downloading: "
+msgstr "ÐÐ¨ÐÐÐÐ. Ð¡Ð±Ð¾Ð¹ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸: "
+
+msgid "ERROR"
+msgstr "ÐÐ¨ÐÐÐÐ"
+
+msgid "ERROR - Error unpacking /tmp/iptv-host-xxx.tar.gz"
+msgstr "ÐÐ¨ÐÐÐÐ. Ð¡Ð±Ð¾Ð¹ ÑÐ°ÑÐ¿Ð°ÐºÐ¾Ð²ÐºÐ¸ /tmp/iptv-host-xxx.tar.gz"
+
+msgid "ERROR - Invalid file format /tmp/iptv-host-xxx.tar.gz"
+msgstr "ÐÐ¨ÐÐÐÐ. ÐÐµÐ²ÐµÑÐ½ÑÐ¹ ÑÐ¾ÑÐ¼Ð°Ñ ÑÐ°Ð¹Ð»Ð° /tmp/iptv-host-xxx.tar.gz"
+
+msgid "ERROR - copy error"
+msgstr "ÐÐ¨ÐÐÐÐ. Ð¡Ð±Ð¾Ð¹ ÐºÐ¾Ð¿Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ"
+
+msgid "Update End. Please manual restart enigma2"
+msgstr "ÐÐ±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ Ð·Ð°Ð²ÐµÑÑÐµÐ½Ð¾. ÐÐµÑÐµÐ·Ð°Ð¿ÑÑÑÐ¸ÑÐµ Enigma"
+
+msgid "---UPDATE---"
+msgstr "---ÐÐÐÐÐÐÐ¢Ð¬---"
+
+msgid "UPDATE MENU"
+msgstr "ÐÐÐÐ® ÐÐÐÐÐÐÐÐÐÐ¯"
+
+msgid " - Remote version"
+msgstr " - Ð£Ð´Ð°Ð»ÐµÐ½Ð½Ð°Ñ Ð²ÐµÑÑÐ¸Ñ"
+
+msgid "UPDATE"
+msgstr "ÐÐÐÐÐÐÐ¢Ð¬"
+
+msgid "UPDATE-CHANGES"
+msgstr "ÐÐÐÐÐÐÐÐÐ¯ Ð ÐÐÐÐÐÐÐÐÐÐ"
+
+msgid "UPDATE-NOW"
+msgstr "ÐÐÐÐÐÐÐ¢Ð¬ Ð¡ÐÐÐ§ÐÐ¡"
+
+msgid "CHANGES IN VERSION"
+msgstr "ÐÐ·Ð¼ÐµÐ½ÐµÐ½Ð¸Ñ Ð² Ð²ÐµÑÑÐ¸Ð¸"
+
+msgid "Update Now"
+msgstr "ÐÐ±Ð½Ð¾Ð²Ð¸ÑÑ ÑÐµÐ¹ÑÐ°Ñ"
+
+msgid "Remote XXXversion"
+msgstr "Ð£Ð¿ÑÐ°Ð²Ð»ÐµÐ½Ð¸Ðµ XXX-Ð²ÐµÑÑÐ¸ÐµÐ¹"
+
+msgid "Local  XXXversion"
+msgstr "ÐÐ¾ÐºÐ°Ð»ÑÐ½Ð°Ñ  XXX-Ð²ÐµÑÑÐ¸Ñ"
+
+msgid "Most Favorited"
+msgstr "Ð¡Ð°Ð¼ÑÐµ Ð¿Ð¾Ð¿ÑÐ»ÑÑÐ½ÑÐµ"
+
+msgid "xxxlist.txt"
+msgstr "Ð¤Ð°Ð¹Ð»-xxx.txt"
+
+msgid "+++ XXXLIST +++"
+msgstr "+++ Ð¤ÐÐÐ-XXX +++"
+
+msgid "Highest Rated"
+msgstr "ÐÐ°Ð¸Ð²ÑÑÑÐ¸Ð¹ ÑÐµÐ¹ÑÐ¸Ð½Ð³"
+
+msgid "Pornstars"
+msgstr "ÐÐ¾ÑÐ½Ð¾ Ð·Ð²ÐµÐ·Ð´Ñ"
+
+msgid "Last"
+msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ðµ"
+
+msgid "Most Favored"
+msgstr "ÐÐ¾Ð»ÑÐ·ÑÑÑÐ¸ÐµÑÑ Ð¿Ð¾Ð¿ÑÐ»ÑÑÐ½Ð¾ÑÑÑÑ"
+
+msgid "Featured videos"
+msgstr "ÐÐ·Ð±ÑÐ°Ð½Ð½ÑÐµ Ð²Ð¸Ð´ÐµÐ¾"
+
+msgid "New Videos"
+msgstr "ÐÐ¾Ð²ÑÐµ Ð²Ð¸Ð´ÐµÐ¾"
+
+msgid "Hits"
+msgstr "Ð¥Ð¸ÑÑ"
+
+msgid "Hot"
+msgstr "Ð¡Ð²ÐµÐ¶Ð¸Ðµ"
+
+msgid "LAST"
+msgstr "ÐÐÐ¡ÐÐÐÐÐÐ"
+
+msgid "Next"
+msgstr "Ð¡Ð»ÐµÐ´ÑÑÑÐ¸Ð¹"
+
+msgid "Page: "
+msgstr "Ð¡ÑÑÐ°Ð½Ð¸ÑÐ°: "
+
+msgid "Last Page"
+msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½ÑÑ ÑÑÑÐ°Ð½Ð¸ÑÐ°"
+
+msgid "IPTV Player download manager"
+msgstr "ÐÐµÐ½ÐµÐ´Ð¶ÐµÑ Ð·Ð°Ð³ÑÑÐ·Ð¾Ðº IPTVPlayer"
+
+msgid "Animation [dubbing]"
+msgstr "ÐÐ½Ð¸Ð¼Ð°ÑÐ¸Ñ [Ð¿ÐµÑÐµÐ·Ð°Ð¿Ð¸ÑÑ]"
+
+msgid "Series [dubbing]"
+msgstr "Ð¡ÐµÑÐ¸Ð¸ [Ð¿ÐµÑÐµÐ·Ð°Ð¿Ð¸ÑÑ]"
+
+msgid "Animation [subtitles]"
+msgstr "ÐÐ½Ð¸Ð¼Ð°ÑÐ¸Ñ [ÑÑÐ±ÑÐ¸ÑÑÑ]"
+
+msgid "Series [subtitles]"
+msgstr "Ð¡ÐµÑÐ¸Ð¸ [ÑÑÐ±ÑÐ¸ÑÑÑ]"
+
+msgid "HD Movies"
+msgstr "HD-ÑÐ¸Ð»ÑÐ¼Ñ"
+
+msgid "Latest Movies"
+msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ðµ ÑÐ¸Ð»ÑÐ¼Ñ"
+
+msgid "Latest TV Episodes"
+msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ðµ Ð¢Ð-ÑÐ¿Ð¸Ð·Ð¾Ð´Ñ"
+
+msgid "New TV Episodes"
+msgstr "ÐÐ¾Ð²ÑÐµ Ð¢Ð-ÑÐ¿Ð¸Ð·Ð¾Ð´Ñ"
+
+msgid "Coming Soon"
+msgstr "Ð¡ÐºÐ¾ÑÐ¾"
+
+msgid "Treat episode as TV Show"
+msgstr "Ð Ð°ÑÑÐ¼Ð°ÑÑÐ¸Ð²Ð°ÑÑ ÑÐ¿Ð¸Ð·Ð¾Ð´, ÐºÐ°Ðº Ð¢Ð-ÑÐ¾Ñ"
+
+msgid "Show recommended by Rafalcool1:"
+msgstr "ÐÐ¾ÐºÐ°Ð·Ð°ÑÑ ÑÐµÐºÐ¾Ð¼ÐµÐ½Ð´Ð¾Ð²Ð°Ð½Ð½Ð¾Ðµ Rafalcool1:"
+
+msgid "Recommended by Rafalcool1"
+msgstr "Ð ÐµÐºÐ¾Ð¼ÐµÐ½Ð´Ð¾Ð²Ð°Ð½Ð½ÑÐµ Rafalcool1"
+
+msgid "List of movies prepared by Rafalcool1"
+msgstr "Ð¡Ð¿Ð¸ÑÐ¾Ðº ÑÐ¸Ð»ÑÐ¼Ð¾Ð², Ð¿Ð¾Ð´Ð³Ð¾ÑÐ¾Ð²Ð»ÐµÐ½Ð½ÑÑ Rafalcool1"
+
+msgid "Use ru proxy server to get file lists"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ ÑÐ¾ÑÑÐ¸Ð¹ÑÐºÐ¸Ð¹ Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐµÑÐ²ÐµÑ Ð´Ð»Ñ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¸Ñ ÑÐ¿Ð¸ÑÐºÐ¾Ð² ÑÐ°Ð¹Ð»Ð¾Ð²"
+
+msgid "External player use software decoder for the WMA"
+msgstr "ÐÐ½ÐµÑÐ½Ð¸Ð¹ Ð¿Ð»ÐµÐµÑ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑ Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð½ÑÐ¹ Ð´ÐµÐºÐ¾Ð´ÐµÑ WMA"
+
+msgid "AAC mix mode"
+msgstr "Ð ÐµÐ¶Ð¸Ð¼ ÑÐ¼ÐµÑÐ¸ÑÐµÐ»Ñ AAC"
+
+msgid "Preferred protocol:"
+msgstr "ÐÑÐ±ÑÐ°Ð½Ð½ÑÐ¹ Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»:"
+
+msgid "Use the default video quality:"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ ÐºÐ°ÑÐµÑÑÐ²Ð¾ Ð²Ð¸Ð´ÐµÐ¾ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ:"
+
+msgid "password:"
+msgstr "Ð¿Ð°ÑÐ¾Ð»Ñ:"
+
+msgid "login:"
+msgstr "Ð»Ð¾Ð³Ð¸Ð½:"
+
+msgid "Sort results after:"
+msgstr "Ð¡Ð¾ÑÑÐ¸ÑÐ¾Ð²Ð°ÑÑ ÑÐµÐ·ÑÐ»ÑÑÐ°ÑÑ Ð¿Ð¾ÑÐ»Ðµ:"
+
+msgid "Najtrafniejsze"
+msgstr "ÐÐ¾Ð²ÐµÐ¹ÑÐ¸Ðµ"
+
+msgid "Folder start"
+msgstr "ÐÐ°ÑÐ°Ð»Ð¾ Ð¿Ð°Ð¿ÐºÐ¸"
+
+msgid "Name hamster (login)"
+msgstr "ÐÐ¼Ñ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ (Ð»Ð¾Ð³Ð¸Ð½)"
+
+msgid "Password for hamster"
+msgstr "ÐÐ°ÑÐ¾Ð»Ñ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ"
+
+msgid "Explore"
+msgstr "ÐÐ±Ð·Ð¾Ñ"
+
+msgid "Small films and anime"
+msgstr "ÐÐ¾ÑÐ¾ÑÐºÐ¸Ðµ ÑÐ¸Ð»ÑÐ¼Ñ Ð¸ Ð°Ð½Ð¸Ð¼Ðµ"
+
+msgid "Films Extremal"
+msgstr "Ð­ÐºÑÑÑÐµÐ¼Ð°Ð»ÑÐ½ÑÐµ ÑÐ¸Ð»ÑÐ¼Ñ"
+
+msgid "Automotive , accidents"
+msgstr "ÐÐ²ÑÐ¾Ð¿ÑÐ¾Ð¼ÑÑÐ»ÐµÐ½Ð½Ð¾ÑÑÑ, Ð°Ð²Ð°ÑÐ¸Ð¸"
+
+msgid "Muzik"
+msgstr "ÐÑÐ·ÑÐºÐ°"
+
+msgid "Straight from Polish"
+msgstr "ÐÑÑÐ¼Ð¾ Ñ ÐÐ¾Ð»ÑÑÐºÐ¾Ð³Ð¾"
+
+msgid "Miscellaneous"
+msgstr "Ð Ð°Ð·Ð½Ð¾Ðµ"
+
+msgid "Life of students"
+msgstr "ÐÐ¸Ð·Ð½Ñ ÑÑÑÐ´ÐµÐ½ÑÐ¾Ð²"
+
+msgid "Waiting room"
+msgstr "ÐÐ°Ð» Ð¾Ð¶Ð¸Ð´Ð°Ð½Ð¸Ñ"
+
+msgid "User Videos 3dEU?"
+msgstr "ÐÐ¸Ð´ÐµÐ¾ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ 3dEU?"
+
+msgid "  Filmy3dEU login:"
+msgstr " Filmy3dEU Ð»Ð¾Ð³Ð¸Ð½:"
+
+msgid "  Filmy3dEU password:"
+msgstr " Filmy3dEU Ð¿Ð°ÑÐ¾Ð»Ñ:"
+
+msgid "Added date"
+msgstr "ÐÐ¾Ð±Ð°Ð²Ð»ÐµÐ½Ð½Ð°Ñ Ð´Ð°ÑÐ°"
+
+msgid "Comment count"
+msgstr "ÐÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ ÐºÐ¾Ð¼Ð¼ÐµÐ½ÑÐ°ÑÐ¸ÐµÐ²"
+
+msgid "Most Watched"
+msgstr "Ð¡Ð°Ð¼ÑÐµ Ð¿ÑÐ¾ÑÐ¼Ð°ÑÑÐ¸Ð²Ð°ÐµÐ¼ÑÐµ"
+
+msgid "Homepage"
+msgstr "ÐÐ¾Ð¼Ð°ÑÐ½ÑÑ ÑÑÑÐ°Ð½Ð¸ÑÐ°"
+
+msgid "Category"
+msgstr "ÐÐ°ÑÐµÐ³Ð¾ÑÐ¸Ñ"
+
+msgid "Katalog A-Z"
+msgstr "ÐÐ°ÑÐ°Ð»Ð¾Ð³ A-Z"
+
+msgid "Argentina"
+msgstr "ÐÑÐ³ÐµÐ½ÑÐ¸Ð½Ð°"
+
+msgid "Australia"
+msgstr "ÐÐ²ÑÑÑÐ°Ð»Ð¸Ñ"
+
+msgid "Belgium"
+msgstr "ÐÐµÐ»ÑÐ³Ð¸Ñ"
+
+msgid "Brazil"
+msgstr "ÐÑÐ°Ð·Ð¸Ð»Ð¸Ñ"
+
+msgid "Canada"
+msgstr "ÐÐ°Ð½Ð°Ð´Ð°"
+
+msgid "France"
+msgstr "Ð¤ÑÐ°Ð½ÑÐ¸Ñ"
+
+msgid "Germany"
+msgstr "ÐÐµÑÐ¼Ð°Ð½Ð¸Ñ"
+
+msgid "India"
+msgstr "ÐÐ½Ð´Ð¸Ñ"
+
+msgid "Indonesia"
+msgstr "ÐÐ½Ð´Ð¾Ð½ÐµÐ·Ð¸Ñ"
+
+msgid "International"
+msgstr "ÐÐµÐ¶Ð´ÑÐ½Ð°ÑÐ¾Ð´Ð½ÑÐ¹"
+
+msgid "Ireland"
+msgstr "ÐÑÐ»Ð°Ð½Ð´Ð¸Ñ"
+
+msgid "Italy"
+msgstr "ÐÑÐ°Ð»Ð¸Ñ"
+
+msgid "Malaysia"
+msgstr "ÐÐ°Ð»Ð°Ð¹Ð·Ð¸Ñ"
+
+msgid "Morocco"
+msgstr "ÐÐ°ÑÐ¾ÐºÐºÐ¾"
+
+msgid "Netherlands"
+msgstr "ÐÐ¸Ð´ÐµÑÐ»Ð°Ð½Ð´Ñ"
+
+msgid "Pakistan"
+msgstr "ÐÐ°ÐºÐ¸ÑÑÐ°Ð½"
+
+msgid "Philippines"
+msgstr "Ð¤Ð¸Ð»Ð¸Ð¿Ð¿Ð¸Ð½Ñ"
+
+msgid "Portugal"
+msgstr "ÐÐ¾ÑÑÑÐ³Ð°Ð»Ð¸Ñ"
+
+msgid "Singapore"
+msgstr "Ð¡Ð¸Ð½Ð³Ð°Ð¿ÑÑ"
+
+msgid "Swiss"
+msgstr "Ð¨Ð²ÐµÐ¹ÑÐ°ÑÑÐºÐ¸Ðµ"
+
+msgid "Switzerland"
+msgstr "Ð¨Ð²ÐµÐ¹ÑÐ°ÑÐ¸Ñ"
+
+msgid "Schweiz"
+msgstr "Ð¨Ð²ÐµÐ´ÑÐºÐ¸Ðµ"
+
+msgid "Tunisia"
+msgstr "Ð¢ÑÐ½Ð¸Ñ"
+
+msgid "United States"
+msgstr "Ð¡Ð¾ÐµÐ´Ð¸Ð½ÐµÐ½Ð½ÑÐµ Ð¨ÑÐ°ÑÑ"
+
+msgid "United Kingdom"
+msgstr "ÐÐµÐ»Ð¸ÐºÐ¾Ð±ÑÐ¸ÑÐ°Ð½Ð¸Ñ"
+
+msgid "Turkey"
+msgstr "Ð¢ÑÑÑÐ¸Ñ"
+
+msgid "Spain"
+msgstr "ÐÑÐ¿Ð°Ð½Ð¸Ñ"
+
+msgid "Romania"
+msgstr "Ð ÑÐ¼ÑÐ½Ð¸Ñ"
+
+msgid "Mexico"
+msgstr "ÐÐµÐºÑÐ¸ÐºÐ°"
+
+msgid "Belgian"
+msgstr "ÐÐµÐ»ÑÐ³Ð¸Ð¹ÑÐºÐ¸Ðµ"
+
+msgid "Austria"
+msgstr "ÐÐ²ÑÑÑÐ¸Ñ"
+
+msgid "VietNam"
+msgstr "ÐÑÐµÑÐ½Ð°Ð¼"
+
+msgid "Japan"
+msgstr "Ð¯Ð¿Ð¾Ð½Ð¸Ñ"
+
+msgid "Czech Republic"
+msgstr "Ð§ÐµÑÑÐºÐ°Ñ Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°"
+
+msgid "Arab"
+msgstr "ÐÑÐ°Ð±ÑÐºÐ¸Ðµ"
+
+msgid "Korea"
+msgstr "ÐÐ¾ÑÐµÑ"
+
+msgid "China"
+msgstr "ÐÐ¸ÑÐ°Ð¹"
+
+msgid "sun sessions"
+msgstr "ÑÐ¾Ð»Ð½ÐµÑÐ½ÑÐµ ÑÐµÑÑÐ¸Ð¸"
+
+msgid "Other videos"
+msgstr "ÐÑÑÐ³Ð¸Ðµ Ð²Ð¸Ð´ÐµÐ¾"
+
+msgid "Ibiza Global Radio"
+msgstr "Ibiza Global Radio"
+
+msgid "Top 100"
+msgstr "Ð¢Ð¾Ð¿ 100"
+
+msgid "24 h"
+msgstr "24 Ñ"
+
+msgid "Quarter"
+msgstr "Ð§ÐµÑÐ²ÐµÑÑÑ"
+
+msgid "Most"
+msgstr "ÐÐ°Ð¸Ð±Ð¾Ð»ÐµÐµ"
+
+msgid "List of anime"
+msgstr "Ð¡Ð¿Ð¸ÑÐ¾Ðº Ð°Ð½Ð¸Ð¼Ðµ"
+
+msgid "List of films"
+msgstr "Ð¡Ð¿Ð¸ÑÐ¾Ðº ÑÐ¸Ð»ÑÐ¼Ð¾Ð²"
+
+msgid "Anime Issued"
+msgstr "ÐÑÐ¿ÑÑÐµÐ½Ð½ÑÐµ Ð°Ð½Ð¸Ð¼Ðµ"
+
+msgid "New episodes broadcast"
+msgstr "Ð¢ÑÐ°Ð½Ð»ÑÑÐ¸Ð¸ Ð½Ð¾Ð²ÑÑ ÑÐ¿Ð¸Ð·Ð¾Ð´Ð¾Ð²"
+
+msgid "Recently added episodes from previous seasons"
+msgstr "ÐÐµÐ´Ð°Ð²Ð½Ð¾ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð½ÑÐµ ÑÐ¿Ð¸Ð·Ð¾Ð´Ñ Ð¸Ð· Ð¿ÑÐ¾ÑÐ»ÑÑ ÑÐµÐ·Ð¾Ð½Ð¾Ð²"
+
+msgid "Harbinger"
+msgstr "ÐÑÐµÐ´Ð²ÐµÑÑÐ½Ð¸Ðº"
+
+msgid "User PREMIUM KinomanTV?"
+msgstr "ÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ PREMIUM KinomanTV?"
+
+msgid "  KinomanTV login:"
+msgstr "  KinomanTV Ð»Ð¾Ð³Ð¸Ð½:"
+
+msgid "  KinomanTV password:"
+msgstr "  KinomanTV Ð¿Ð°ÑÐ¾Ð»Ñ:"
+
+msgid "Categories films"
+msgstr "ÐÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð¸ ÑÐ¸Ð»ÑÐ¼Ð¾Ð²"
+
+msgid "Last added"
+msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ðµ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½ÑÐµ"
+
+msgid "My Favorites"
+msgstr "ÐÐ¾Ð¸ Ð»ÑÐ±Ð¸Ð¼ÑÐµ"
+
+msgid "Enter data into your account (blue key)."
+msgstr "ÐÐ²ÐµÐ´Ð¸ÑÐµ Ð´Ð°Ð½Ð½ÑÐµ ÐÐ°ÑÐµÐ³Ð¾ Ð°ÐºÐºÐ°ÑÐ½ÑÐ° (ÑÐ¸Ð½ÑÑ ÐºÐ»Ð°Ð²Ð¸ÑÐ°)."
+
+msgid "Latest series"
+msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ðµ ÑÐµÑÐ¸Ð¸"
+
+msgid "bitrate: worst"
+msgstr "Ð±Ð¸ÑÑÐµÐ¹Ñ: Ð½Ð°Ð¸ÑÑÐ´ÑÐ¸Ð¹"
+
+msgid "bitrate: 200p"
+msgstr "Ð±Ð¸ÑÑÐµÐ¹Ñ: 200p"
+
+msgid "bitrate: 450p"
+msgstr "Ð±Ð¸ÑÑÐµÐ¹Ñ: 450p"
+
+msgid "bitrate: 900"
+msgstr "Ð±Ð¸ÑÑÐµÐ¹Ñ: 900"
+
+msgid "bitrate: 1800"
+msgstr "Ð±Ð¸ÑÑÐµÐ¹Ñ: 1800"
+
+msgid "bitrate: the best"
+msgstr "Ð±Ð¸ÑÑÐµÐ¹Ñ: Ð»ÑÑÑÐ¸Ð¹"
+
+msgid "The default video format:"
+msgstr "ÐÐ¸Ð´ÐµÐ¾ÑÐ¾ÑÐ¼Ð°Ñ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ:"
+
+msgid "Use the default video format:"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð²Ð¸Ð´ÐµÐ¾ÑÐ¾ÑÐ¼Ð°Ñ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ:"
+
+msgid "Ekstraklasa use a proxy?"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐµÑÐ²ÐµÑ ÑÐºÑÑÑÐ°ÐºÐ»Ð°ÑÑÐ°?"
+
+msgid "Goals"
+msgstr "Ð¦ÐµÐ»Ð¸"
+
+msgid "Shortcuts"
+msgstr "Ð¯ÑÐ»ÑÐºÐ¸"
+
+msgid "Gateway queue"
+msgstr "ÐÑÐµÑÐµÐ´Ñ ÑÐ»ÑÐ·Ð°"
+
+msgid "Warehouse"
+msgstr "Ð¥ÑÐ°Ð½Ð¸ÑÑ"
+
+msgid "The most relevant"
+msgstr "ÐÐ°Ð¸Ð±Ð¾Ð»ÐµÐµ Ð°ÐºÑÑÐ°Ð»ÑÐ½Ð¾Ðµ"
+
+msgid "Popularity"
+msgstr "ÐÐ¾Ð¿ÑÐ»ÑÑÐ½Ð¾ÑÑÑ"
+
+msgid "Recent Items (Popular)"
+msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ðµ Ð¿ÑÐ½ÐºÑÑ (Ð¿Ð¾Ð¿ÑÐ»ÑÑÐ½ÑÐµ)"
+
+msgid "Recent Items (All)"
+msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ðµ Ð¿ÑÐ½ÐºÑÑ (Ð²ÑÐµ)"
+
+msgid "Feature Potential Items"
+msgstr "ÐÐ¾ÑÐµÐ½ÑÐ¸Ð°Ð»ÑÐ½Ð¾ Ð¿Ð¾ÑÐ»ÐµÐ´Ð½Ð¸Ðµ Ð¿ÑÐ½ÐºÑÑ"
+
+msgid "Top Items (Today)"
+msgstr "ÐÑÑÑÐ¸Ðµ Ð¿ÑÐ½ÐºÑÑ (ÑÐµÐ³Ð¾Ð´Ð½Ñ)"
+
+msgid "Top Items (This Week)"
+msgstr "ÐÑÑÑÐ¸Ðµ Ð¿ÑÐ½ÐºÑÑ (Ð½Ð° ÑÑÐ¾Ð¹ Ð½ÐµÐ´ÐµÐ»Ðµ)"
+
+msgid "Top Items (This Month)"
+msgstr "ÐÑÑÑÐ¸Ðµ Ð¿ÑÐ½ÐºÑÑ (Ð² ÑÑÐ¾Ð¼ Ð¼ÐµÑÑÑÐµ)"
+
+msgid "Top Items (All time)"
+msgstr "ÐÑÑÑÐ¸Ðµ ÑÐ¾Ð²Ð°ÑÑ (Ð·Ð° Ð²ÑÑ Ð²ÑÐµÐ¼Ñ)"
+
+msgid "Yoursay"
+msgstr "Ð¢Ñ Ð³Ð¾Ð²Ð¾ÑÐ¸ÑÑ"
+
+msgid "Liveleakers"
+msgstr "Ð¢ÐµÐºÑÑÐ¸Ðµ"
+
+msgid "Must See"
+msgstr "ÐÑÐ¶Ð½Ð¾ ÑÐ²Ð¸Ð´ÐµÑÑ"
+
+msgid "Syria"
+msgstr "Ð¡Ð¸ÑÐ¸Ñ"
+
+msgid "Entertainment"
+msgstr "Ð Ð°Ð·Ð²Ð»ÐµÐºÐ°ÑÐµÐ»ÑÐ½ÑÐµ"
+
+msgid "Browse Channels"
+msgstr "ÐÐ±Ð·Ð¾Ñ ÐºÐ°Ð½Ð°Ð»Ð¾Ð²"
+
+msgid "By default, sort by:"
+msgstr "ÐÐ¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ ÑÐ¾ÑÑÐ¸ÑÐ¾Ð²Ð°ÑÑ Ð¿Ð¾:"
+
+msgid "***Any***"
+msgstr "***ÐÑÐ±ÑÐµ***"
+
+msgid "most viewed"
+msgstr "Ð½Ð°Ð¸Ð±Ð¾Ð»ÐµÐµ Ð¿ÑÐ¾ÑÐ¼Ð°ÑÑÐ¸Ð²Ð°ÐµÐ¼ÑÐµ"
+
+msgid "top rated"
+msgstr "ÑÐ°Ð¼ÑÐµ Ð¿Ð¾Ð¿ÑÐ»ÑÑÐ½ÑÐµ"
+
+msgid "Use a proxy"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð¿ÑÐ¾ÐºÑÐ¸"
+
+msgid "Films"
+msgstr "Ð¤Ð¸Ð»ÑÐ¼Ñ"
+
+msgid "Documents"
+msgstr "ÐÐ¾ÐºÑÐ¼ÐµÐ½ÑÑ"
+
+msgid "Tales"
+msgstr "Ð Ð¾ÑÑÐºÐ°Ð·Ð½Ð¸"
+
+msgid "preferred streaming protocol"
+msgstr "Ð¿ÑÐµÐ´Ð¿Ð¾ÑÑÐ¸ÑÐµÐ»ÑÐ½ÑÐ¹ Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð» Ð¿Ð¾ÑÐ¾ÐºÐ°"
+
+msgid "Age viewer:"
+msgstr "ÐÐ¾Ð·ÑÐ°ÑÑ Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑÐ°:"
+
+msgid "Hide Video in the list above the age of the viewer:"
+msgstr "Ð¡ÐºÑÑÑÑ Ð²Ð¸Ð´ÐµÐ¾ Ð² ÑÐ¿Ð¸ÑÐºÐµ ÑÐ²ÑÑÐµ Ð²Ð¾Ð·ÑÐ°ÑÑÐ° Ð·ÑÐ¸ÑÐµÐ»Ñ:"
+
+msgid "TOP100 Always"
+msgstr "Ð¢Ð¾Ð¿ 100 Ð²ÑÐµÐ³Ð´Ð°"
+
+msgid "TOP100 Of the week"
+msgstr "Ð¢Ð¾Ð¿ 100 Ð½ÐµÐ´ÐµÐ»Ð¸"
+
+msgid "TOP100 Month"
+msgstr "Ð¢Ð¾Ð¿ 100 Ð¼ÐµÑÑÑÐ°"
+
+msgid "MOB: low"
+msgstr "MOB: Ð½Ð¸Ð·ÐºÐ¸Ð¹"
+
+msgid "SD: standard"
+msgstr "SD: ÑÑÐ°Ð½Ð´Ð°ÑÑÐ½ÑÐ¹"
+
+msgid "HD: high"
+msgstr "HD: Ð²ÑÑÐ¾ÐºÐ¸Ð¹"
+
+msgid "FHD: very high"
+msgstr "FHD: Ð¾ÑÐµÐ½Ñ Ð²ÑÑÐ¾ÐºÐ¸Ð¹"
+
+msgid "Popular movies"
+msgstr "ÐÐ¾Ð¿ÑÐ»ÑÑÐ½ÑÐµ ÑÐ¸Ð»ÑÐ¼Ñ"
+
+msgid "Topics films"
+msgstr "Ð¢ÐµÐ¼Ñ ÑÐ¸Ð»ÑÐ¼Ð¾Ð²"
+
+msgid "Editorial"
+msgstr "Ð ÐµÐ´Ð°ÐºÑÐ¸Ð¾Ð½Ð½ÑÐµ"
+
+msgid "Action RPG"
+msgstr "ÐÐµÐ¹ÑÑÐ²Ð¸Ðµ RPG"
+
+msgid "The Witcher"
+msgstr "ÐÐµÐ´ÑÐ¼Ð°Ðº"
+
+msgid "Size of the icons"
+msgstr "Ð Ð°Ð·Ð¼ÐµÑ Ð¸ÐºÐ¾Ð½Ð¾Ðº"
+
+msgid "Connection type:"
+msgstr "Ð¢Ð¸Ð¿ ÑÐ¾ÐµÐ´Ð¸Ð½ÐµÐ½Ð¸Ñ:"
+
+msgid "Very high"
+msgstr "ÐÑÐµÐ½Ñ Ð²ÑÑÐ¾ÐºÐ¾Ðµ"
+
+msgid "Best"
+msgstr "ÐÑÑÑÐ¸Ðµ"
+
+msgid "Worst"
+msgstr "ÐÐ°Ð¸ÑÑÐ´ÑÐµÐµ"
+
+msgid "Very low"
+msgstr "ÐÑÐµÐ½Ñ Ð½Ð¸Ð·ÐºÐ¾Ðµ"
+
+msgid "Average"
+msgstr "Ð¡ÑÐµÐ´Ð½ÐµÐµ"
+
+msgid "TVN Introduce yourself as:"
+msgstr "TVN Ð¿ÑÐµÐ´ÑÑÐ°Ð²Ð»ÑÐµÑ ÑÐµÐ±Ñ ÐºÐ°Ðº:"
+
+msgid "TVN use a proxy?"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐµÑÐ²ÐµÑ Ð´Ð»Ñ TVN?"
+
+msgid "No name"
+msgstr "ÐÐµÐ· Ð¸Ð¼ÐµÐ½Ð¸"
+
+msgid "Audience zone"
+msgstr "ÐÑÐ´Ð¸ÑÐ¾ÑÐ½Ð°Ñ Ð·Ð¾Ð½Ð°"
+
+msgid "  password:"
+msgstr " ÐÐ°ÑÐ¾Ð»Ñ:"
+
+msgid "The default video format"
+msgstr "ÐÐ¸Ð´ÐµÐ¾ÑÐ¾ÑÐ¼Ð°Ñ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ"
+
+msgid "Use Proxy?"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð¿ÑÐ¾ÐºÑÐ¸?"
+
+msgid "More as next page"
+msgstr "ÐÐ¾Ð´ÑÐ¾Ð±Ð½ÐµÐµ Ð½Ð° ÑÐ»ÐµÐ´ÑÑÑÐµÐ¹ ÑÑÑÐ°Ð½Ð¸ÑÐµ"
+
+msgid ":for"
+msgstr ":Ð´Ð»Ñ"
+
+msgid "Information & journalism"
+msgstr "ÐÐ½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ñ Ð¸ Ð¶ÑÑÐ½Ð°Ð»Ð¸ÑÑÐ¸ÐºÐ°"
+
+msgid "Information Services"
+msgstr "ÐÐ½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ð¾Ð½Ð½ÑÐµ ÐºÐ°Ð½Ð°Ð»Ñ"
+
+msgid "Journalism"
+msgstr "ÐÑÑÐ½Ð°Ð»Ð¸ÑÑÐ¸ÐºÐ°"
+
+msgid "SORT"
+msgstr "Ð¡ÐÐ Ð¢ÐÐ ÐÐÐÐ¢Ð¬"
+
+msgid "LATEST VIDEOS"
+msgstr "ÐÐÐ¡ÐÐÐÐÐÐ ÐÐÐÐÐ"
+
+msgid "SHOW REPLAY"
+msgstr "ÐÐÐ ÐÐÐ«Ð Ð¨ÐÐ£"
+
+msgid "WWE NETWORK"
+msgstr "Ð¡ÐÐ¢Ð¬ WWE"
+
+msgid "SMACKDOWN"
+msgstr "ÐÐÐ Ð£Ð¨ÐÐÐÐ"
+
+msgid "LUCHA UNDERGROUND"
+msgstr "ÐÐÐÐÐÐÐ¬ÐÐ«Ð ÐÐÐÐ¦ÐÐÐ¡ÐÐÐ"
+
+msgid "DEFAULT"
+msgstr "ÐÐ Ð£ÐÐÐÐ§ÐÐÐÐ®"
+
+msgid "format: best"
+msgstr "ÑÐ¾ÑÐ¼Ð°Ñ: Ð»ÑÑÑÐ¸Ð¹"
+
+msgid "format: worst"
+msgstr "ÑÐ¾ÑÐ¼Ð°Ñ: Ð½Ð°Ð¸ÑÑÐ´ÑÐ¸Ð¹"
+
+msgid "format: 720"
+msgstr "ÑÐ¾ÑÐ¼Ð°Ñ: 720"
+
+msgid "format: 240p"
+msgstr "ÑÐ¾ÑÐ¼Ð°Ñ: 240p"
+
+msgid "format: 360p"
+msgstr "ÑÐ¾ÑÐ¼Ð°Ñ: 360p"
+
+msgid "format: 480p"
+msgstr "ÑÐ¾ÑÐ¼Ð°Ñ: 480p"
+
+msgid "Cannot find player content"
+msgstr "ÐÐµÐ²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾ Ð½Ð°Ð¹ÑÐ¸ Ð¿Ð»ÐµÐµÑ ÐºÐ¾Ð½ÑÐµÐ½ÑÐ°"
+
+msgid "Sort movies: "
+msgstr "Ð¡Ð¾ÑÑÐ¸ÑÐ¾Ð²Ð°ÑÑ ÑÐ¸Ð»ÑÐ¼Ñ: "
+
+msgid "last added"
+msgstr "Ð¿Ð¾ÑÐ»ÐµÐ´Ð½Ð¸Ðµ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð½ÑÐµ"
+
+msgid "last watched"
+msgstr "Ð¿Ð¾ÑÐ»ÐµÐ´Ð½Ð¸Ðµ Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑÐµÐ½Ð½ÑÐµ"
+
+msgid "favorite"
+msgstr "Ð»ÑÐ±Ð¸Ð¼ÑÐµ"
+
+msgid "TOP100 Week"
+msgstr "TOP 100 Ð·Ð° Ð½ÐµÐ´ÐµÐ»Ñ"
+
+msgid "TOP100 of the Month"
+msgstr "TOP 100 Ð·Ð° Ð¼ÐµÑÑÑ"
+
+msgid "Iplex use a proxy?"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐµÑÐ²ÐµÑ Ð´Ð»Ñ Iplex?"
+
+msgid "WrestlingNet._listVideos - no markers [m1][m2] found!"
+msgstr "WrestlingNet._listÐÐ¸Ð´ÐµÐ¾: Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ñ Ð¼Ð°ÑÐºÐµÑÑ [Ð¼1][Ð¼2]!"
+
+msgid ""
+"Please visit '%s' from using web-browser form the PC. If links are available please report this problem.\n"
+"Email: samsamsam@o2.pl"
+msgstr ""
+"ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾ÑÐµÑÐ¸ÑÐµ '%s', Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÑ web-Ð±ÑÐ°ÑÐ·ÐµÑ ÐÐ. ÐÑÐ»Ð¸ ÑÑÑÐ»ÐºÐ¸ Ð´Ð¾ÑÑÑÐ¿Ð½Ñ, Ð¿Ð¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, ÑÐ¾Ð¾Ð±ÑÐ¸ÑÐµ Ð¾Ð± ÑÑÐ¾Ð¹ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ðµ.\n"
+"E-mail: samsamsam@o2.pl"
+
+msgid "Last error: \"Videomega has blocked your IP for some time. Please retry this link after some time.\""
+msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½ÑÑ Ð¾ÑÐ¸Ð±ÐºÐ°: \"Videomega Ð·Ð°Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²Ð°Ð» Ð²Ð°Ñ IP Ð½Ð° Ð½ÐµÐºÐ¾ÑÐ¾ÑÐ¾Ðµ Ð²ÑÐµÐ¼Ñ. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð²ÑÐ¾ÑÐ¸ÑÐµ Ð¿Ð¾Ð¿ÑÑÐºÑ Ð¾ÑÐºÑÑÑÑ ÑÑÑ ÑÑÑÐ»ÐºÑ ÑÐµÑÐµÐ· Ð½ÐµÐºÐ¾ÑÐ¾ÑÐ¾Ðµ Ð²ÑÐµÐ¼Ñ.\""
+
+msgid "Newest added"
+msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ðµ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð½ÑÐµ"
+
+msgid "Oldest added"
+msgstr "ÐÐ¾Ð±Ð°Ð²Ð»ÐµÐ½Ð½ÑÐµ Ð´Ð°Ð²Ð½Ð¾"
+
+msgid "Newest year"
+msgstr "ÐÐ¾Ð²ÐµÐ¹ÑÐ¸Ðµ Ð·Ð° Ð³Ð¾Ð´"
+
+msgid "Oldest year"
+msgstr "Ð¡ÑÐ°ÑÑÐµ Ð·Ð° Ð³Ð¾Ð´"
+
+msgid "Best rating"
+msgstr "Ð¡ÐÐ¡-Ð³Ð¾Ð»Ð¾ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ"
+
+msgid "Worse rating"
+msgstr "Ð¥ÑÐ´ÑÐ¸Ðµ Ð¿Ð¾ ÑÐµÐ¹ÑÐ¸Ð½Ð³Ñ"
+
+msgid "Less viewed"
+msgstr "ÐÐµÐ½ÐµÐµ Ð¿ÑÐ¾ÑÐ¼Ð°ÑÑÐ¸Ð²Ð°ÐµÐ¼ÑÐµ"
+
+msgid "The problem with user logon \"%s\".\n"
+msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð²ÑÐ¾Ð´Ð¾Ð¼ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ \"%s\".\n"
+
+msgid "New Releases"
+msgstr "ÐÐ¾Ð²ÑÐµ ÑÐµÐ»Ð¸Ð·Ñ"
+
+msgid "Categorization:"
+msgstr "ÐÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð·Ð°ÑÐ¸Ñ:"
+
+msgid "Latest Update"
+msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½ÐµÐµ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ"
+
+msgid "Anime List"
+msgstr "Ð¡Ð¿Ð¸ÑÐ¾Ðº Ð°Ð½Ð¸Ð¼Ðµ"
+
+msgid "Create Date"
+msgstr "ÐÐ°ÑÐ° ÑÐ¾Ð·Ð´Ð°Ð½Ð¸Ñ"
+
+msgid "New HD Videos"
+msgstr "ÐÐ¾Ð²ÑÐµ HD-Ð²Ð¸Ð´ÐµÐ¾"
+
+msgid "Use proxy gateway"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐ»ÑÐ·"
+
+msgid "show iframe for audio item"
+msgstr "Ð²ÐºÐ»ÑÑÐ¸ÑÑ Ð·Ð°ÑÑÐ°Ð²ÐºÑ Ð² Ð°ÑÐ´Ð¸Ð¾ÑÐµÐ¶Ð¸Ð¼Ðµ"
+
+msgid "Iframe file"
+msgstr "Ð¤Ð°Ð¹Ð» Ð·Ð°ÑÑÐ°Ð²ÐºÐ¸"
+
+msgid "Clear iframe file"
+msgstr "ÐÑÐ¸ÑÑÐ¸ÑÑ ÑÐ°Ð¹Ð» Ð·Ð°ÑÑÐ°Ð²ÐºÐ¸"
+
+msgid "Mounted on %s"
+msgstr "Ð¡Ð¼Ð¾Ð½ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¾ Ð½Ð° %s"
+
+msgid "Mangas"
+msgstr "ÐÐ°Ð½Ð³Ð°Ñ"
+
+msgid "Recently Added"
+msgstr "ÐÐµÐ´Ð°Ð²Ð½Ð¾ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð½ÑÐµ"
+
+msgid "SovDub"
+msgstr "Ð¡Ð¾Ð²ÐµÑÑÐºÐ¸Ð¹ Ð´ÑÐ±Ð»ÑÐ¶"
+
+msgid "Foreign films"
+msgstr "ÐÐ°ÑÑÐ±ÐµÐ¶Ð½ÑÐµ ÑÐ¸Ð»ÑÐ¼Ñ"
+
+msgid "Major rankings"
+msgstr "ÐÑÐ½Ð¾Ð²Ð½ÑÐµ ÑÐµÐ¹ÑÐ¸Ð½Ð³Ð¸"
+
+msgid ""
+"Fatal Error!\n"
+"Your Openssl is not supported."
+msgstr ""
+"Ð¤Ð°ÑÐ°Ð»ÑÐ½Ð°Ñ Ð¾ÑÐ¸Ð±ÐºÐ°!\n"
+"ÐÐ°Ñ Openssl Ð½Ðµ Ð¿Ð¾Ð´Ð´ÐµÑÐ¶Ð¸Ð²Ð°ÐµÑÑÑ."
+
+msgid ""
+"OpenSSL in your image is not supported.\n"
+"Some functions may not work correctly."
+msgstr ""
+"OpenSSL Ð² Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ð¸ Ð½Ðµ Ð¿Ð¾Ð´Ð´ÐµÑÐ¶Ð¸Ð²Ð°ÐµÑÑÑ.\n"
+"ÐÐµÐºÐ¾ÑÐ¾ÑÑÐµ ÑÑÐ½ÐºÑÐ¸Ð¸ Ð¼Ð¾Ð³ÑÑ ÑÐ°Ð±Ð¾ÑÐ°ÑÑ Ð½ÐµÐºÐ¾ÑÑÐµÐºÑÐ½Ð¾."
+
+msgid "bestfit"
+msgstr "Ð¾Ð¿ÑÐ¸Ð¼Ð°Ð»ÑÐ½Ð¾Ðµ"
+
+msgid "panscan"
+msgstr "Ð¿Ð°Ð½Ð¾ÑÐ°Ð¼Ð°"
+
+msgid "letterbox"
+msgstr "letterbox"
+
+msgid "nonlinear"
+msgstr "Ð±ÐµÐ· ÑÑÑÐ½ÑÑ Ð¿Ð¾Ð»Ð¾Ñ"
+
+msgid "Most Viewed"
+msgstr "ÐÐ°Ð¸Ð±Ð¾Ð»ÐµÐµ Ð¿ÑÐ¾ÑÐ¼Ð°ÑÑÐ¸Ð²Ð°ÐµÐ¼ÑÐµ"
+
+msgid "Windows Media Video 9 Screen decoder"
+msgstr "Ð­ÐºÑÐ°Ð½Ð½ÑÐ¹ Ð´ÐµÐºÐ¾Ð´ÐµÑ Windows Media Video 9"
+
+msgid "Get free credits"
+msgstr "ÐÐ¾Ð»ÑÑÐ¸ÑÑ ÐºÑÐµÐ´Ð¸ÑÑ Ð±ÐµÑÐ¿Ð»Ð°ÑÐ½Ð¾"
+
+msgid "Fail to get \"%s\""
+msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¿Ð¾Ð»ÑÑÐ¸ÑÑ \"%s\""
+
+msgid "file://"
+msgstr "ÑÐ°Ð¹Ð»://"
+
+msgid "Top Cartoons"
+msgstr "ÐÑÑÑÐ¸Ðµ Ð¼ÑÐ»ÑÑÐ¸ÐºÐ¸"
+
+msgid "Cartoon List"
+msgstr "Ð¡Ð¿Ð¸ÑÐ¾Ðº Ð¼ÑÐ»ÑÑÑÐ¸Ð»ÑÐ¼Ð¾Ð²"
+
+msgid "only Anime"
+msgstr "ÑÐ¾Ð»ÑÐºÐ¾ Ð°Ð½Ð¸Ð¼Ðµ"
+
+msgid "only Cartoons"
+msgstr "ÑÐ¾Ð»ÑÐºÐ¾ Ð¼ÑÐ»ÑÑÑÐ¸Ð»ÑÐ¼Ñ"
+
+msgid "json load error 2"
+msgstr "ÐÑÐ¸Ð±ÐºÐ° 2 Ð¿ÑÐ¸ Ð·Ð°Ð³ÑÑÐ·ÐºÐµ json"
+
+msgid ""
+"Download subtitles error.\n"
+"wget error code[%d]."
+msgstr ""
+"ÐÑÐ¸Ð±ÐºÐ° Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸ ÑÑÐ±ÑÐ¸ÑÑÐ¾Ð².\n"
+"ÐÐ¾Ð´ Ð¾ÑÐ¸Ð±ÐºÐ¸ wget[%d]."
+
+msgid "unzip error - please check if utitlity unzip is available"
+msgstr "ÐÑÐ¸Ð±ÐºÐ° unzip: Ð¿Ð¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿ÑÐ¾Ð²ÐµÑÑÑÐµ Ð´Ð¾ÑÑÑÐ¿Ð½Ð¾ÑÑÑ ÑÑÐ¸Ð»Ð¸ÑÑ ÑÐ°ÑÐ¿Ð°ÐºÐ¾Ð²ÐºÐ¸"
+
+msgid "write error"
+msgstr "ÐÑÐ¸Ð±ÐºÐ° Ð·Ð°Ð¿Ð¸ÑÐ¸"
+
+msgid "decode error"
+msgstr "ÐÑÐ¸Ð±ÐºÐ° Ð´ÐµÐºÐ¾Ð´Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ"
+
+msgid "read error"
+msgstr "ÐÑÐ¸Ð±ÐºÐ° ÑÑÐµÐ½Ð¸Ñ"
+
+msgid "gzip error"
+msgstr "ÐÑÐ¸Ð±ÐºÐ° gzip"
+
+msgid "OpenSubtitles.org"
+msgstr "OpenSubtitles.org"
+
+msgid "Napisy24.pl"
+msgstr "Napisy24.pl"
+
+msgid "Titlovi.com"
+msgstr "Titlovi.com"
+
+msgid "Youtube.com"
+msgstr "Youtube.com"
+
+msgid "Subscene.com"
+msgstr "Subscene.com"
+
+msgid "If available you can choose other source."
+msgstr "ÐÑÐ»Ð¸ Ð´Ð¾ÑÑÑÐ¿Ð½Ð¾, ÐÑ Ð¼Ð¾Ð¶ÐµÑÐµ Ð²ÑÐ±ÑÐ°ÑÑ Ð´ÑÑÐ³Ð¾Ð¹ Ð¸ÑÑÐ¾ÑÐ½Ð¸Ðº."
+
+msgid "Use UA proxy server to get file lists"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ UA Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐµÑÐ²ÐµÑ Ð´Ð»Ñ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¸Ñ ÑÐ¿Ð¸ÑÐºÐ¾Ð² ÑÐ°Ð¹Ð»Ð¾Ð²"
+
+msgid "IPTVPlayer - Start"
+msgstr "ÐÐ°Ð¿ÑÑÐº IPTVPlayer"
+
+msgid "Info..."
+msgstr "ÐÐ½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ñ."
+
+msgid "Global sorting :"
+msgstr "ÐÐ»Ð¾Ð±Ð°Ð»ÑÐ½Ð°Ñ ÑÐ¾ÑÑÐ¸ÑÐ¾Ð²ÐºÐ°:"
+
+msgid "External player use software decoder for the AC3"
+msgstr "ÐÑÐ¸Ð¼ÐµÐ½Ð¸ÑÑ Ð²Ð½ÐµÑÐ½Ð¸Ð¹ Ð´ÐµÐºÐ¾Ð´ÐµÑ AC3 Ð´Ð»Ñ External player"
+
+msgid "External player use software decoder for the EAC3"
+msgstr "ÐÑÐ¸Ð¼ÐµÐ½Ð¸ÑÑ Ð²Ð½ÐµÑÐ½Ð¸Ð¹ Ð´ÐµÐºÐ¾Ð´ÐµÑ EAC3 Ð´Ð»Ñ External player"
+
+msgid "External player use software decoder for the MP3"
+msgstr "ÐÑÐ¸Ð¼ÐµÐ½Ð¸ÑÑ Ð²Ð½ÐµÑÐ½Ð¸Ð¹ Ð´ÐµÐºÐ¾Ð´ÐµÑ MP3 Ð´Ð»Ñ External player"
+
+msgid "By title"
+msgstr "ÐÐ¾ Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ñ"
+
+msgid "Dokumentalne"
+msgstr "ÐÐ¾ÐºÑÐ¼ÐµÐ½ÑÐ°Ð»ÑÐ½ÑÐµ"
+
+msgid "Dla dzieci"
+msgstr "ÐÐ»Ñ Ð´ÐµÑÐµÐ¹"
+
+msgid "The problem with user logon \"%s\"."
+msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð²ÑÐ¾Ð´Ð¾Ð¼ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ \"%s\"."
+
+msgid ""
+"Access to this service requires login.\n"
+"Please register on the site \"%s\" and then put your e-mail and password in the host configuration under blue button."
+msgstr ""
+"ÐÐ»Ñ Ð´Ð¾ÑÑÑÐ¿Ð° Ðº ÑÑÐ¾Ð¹ ÑÑÐ»ÑÐ³Ðµ ÑÑÐµÐ±ÑÐµÑÑÑ Ð²ÑÐ¾Ð´ Ð² ÑÐ¸ÑÑÐµÐ¼Ñ.\n"
+"ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð·Ð°ÑÐµÐ³Ð¸ÑÑÑÐ¸ÑÑÐ¹ÑÐµÑÑ Ð½Ð° ÑÐ°Ð¹ÑÐµ \"%s\", Ð¿Ð¾ÑÐ»Ðµ ÑÐµÐ³Ð¾ Ð²Ð²ÐµÐ´Ð¸ÑÐµ ÑÐ²Ð¾Ñ ÑÐ»ÐµÐºÑÑÐ¾Ð½Ð½ÑÑ Ð¿Ð¾ÑÑÑ Ð¸ Ð¿Ð°ÑÐ¾Ð»Ñ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ñ ÑÐ¾ÑÑÐ° Ð¿Ð¾ Ð³Ð¾Ð»ÑÐ±Ð¾Ð¹ ÐºÐ½Ð¾Ð¿ÐºÐµ."
+
+msgid "Login mode"
+msgstr "Ð ÐµÐ¶Ð¸Ð¼ Ð²ÑÐ¾Ð´Ð°"
+
+msgid "Secure cookie name"
+msgstr "ÐÐµÐ·Ð¾Ð¿Ð°ÑÐ½Ð¾Ðµ Ð¸Ð¼Ñ ÑÐ°Ð¹Ð»Ð° cookie"
+
+msgid "Secure cookie value"
+msgstr "ÐÐµÐ·Ð¾Ð¿Ð°ÑÐ½Ð¾Ðµ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ cookie"
+
+msgid "Name"
+msgstr "ÐÐ¼Ñ"
+
+msgid "This service requires a new Enigma2 image with a Python version %s or later."
+msgstr "Ð­ÑÐ¾Ñ ÑÐµÑÐ²Ð¸Ñ ÑÑÐµÐ±ÑÐµÑ Ð½Ð¾Ð²Ð¾Ð³Ð¾ Ð¸Ð¼Ð¸Ð´Ð¶Ð° enigma2 Ñ Ð²ÐµÑÑÐ¸ÐµÐ¹ Python %s Ð¸Ð»Ð¸ Ð±Ð¾Ð»ÐµÐµ Ð¿Ð¾Ð·Ð´Ð½ÐµÐ¹ Ð²ÐµÑÑÐ¸ÐµÐ¹."
+
+msgid "Advance (cookie item)"
+msgstr "ÐÐ²Ð°Ð½ÑÐ¾Ð²ÑÐ¹ (ÑÐ»ÐµÐ¼ÐµÐ½Ñ cookie)"
+
+msgid "Simple (e-mail, password)"
+msgstr "ÐÑÐ¾ÑÑÐ¾Ð¹ (Ð°Ð´ÑÐµÑ ÑÐ»ÐµÐºÑÑÐ¾Ð½Ð½Ð¾Ð¹ Ð¿Ð¾ÑÑÑ, Ð¿Ð°ÑÐ¾Ð»Ñ)"
+
+msgid "Cinemamovies"
+msgstr "Ð¤Ð¸Ð»ÑÐ¼Ñ Ð² ÐºÐ¸Ð½Ð¾ÑÐµÐ°ÑÑÐ°Ñ"
+
+msgid "Najnowsze"
+msgstr "ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ð¹"
+
+msgid "PopularnoÅÄ"
+msgstr "ÐÐ¾Ð¿ÑÐ»ÑÑÐ½Ð¾ÑÑÑ"
+
+msgid "Najlepiej oceniane"
+msgstr "ÐÑÑÑÐ¸Ðµ Ð¿Ð¾ ÑÐµÐ¹ÑÐ¸Ð½Ð³Ñ"
+
+msgid "Sortuj wyniki wyszukiwania po:"
+msgstr "Ð¡Ð¾ÑÑÐ¸ÑÐ¾Ð²Ð°ÑÑ ÑÐµÐ·ÑÐ»ÑÑÐ°ÑÑ Ð¿Ð¾Ð¸ÑÐºÐ° Ð¿Ð¾:"
+
+msgid "Alfabetycznie"
+msgstr "ÐÐ¾ Ð°Ð»ÑÐ°Ð²Ð¸ÑÑ"
+
+msgid "Stacje Radiowe"
+msgstr "Ð Ð°Ð´Ð¸Ð¾ÑÑÐ°Ð½ÑÐ¸Ð¸"
+
+msgid "KanaÅy Muzyczne"
+msgstr "ÐÑÐ·ÑÐºÐ°Ð»ÑÐ½ÑÐµ ÐºÐ°Ð½Ð°Ð»Ñ"
+
+msgid "Sety Muzyczne"
+msgstr "Sety Muzyczne"
+
+msgid "Radia RMFON"
+msgstr "Ð Ð°Ð´Ð¸Ð¾ RMFON"
+
+msgid "Radia ZET"
+msgstr "Ð Ð°Ð´Ð¸Ð¾ ZET"
+
+msgid "Radia Lokalne"
+msgstr "ÐÐµÑÑÐ½Ð¾Ðµ ÑÐ°Ð´Ð¸Ð¾"
+
+msgid "Wszystkie"
+msgstr "ÐÑÐµ"
+
+msgid "Nastroje"
+msgstr "ÐÐ°Ð¿ÑÐ¸Ð·Ñ"
+
+msgid "Programy onetu"
+msgstr "ÐÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ñ Onet"
+
+msgid "Programy TV"
+msgstr "Ð¢Ð Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ñ"
+
+msgid "Brak nazwy"
+msgstr "ÐÐµÑ Ð¸Ð¼ÐµÐ½Ð¸"
+
+msgid ", odcinek "
+msgstr ", ÑÐ¿Ð¸Ð·Ð¾Ð´ "
+
+msgid ", sezon "
+msgstr ", ÑÐµÐ·Ð¾Ð½ "
+
+msgid " (planowany)"
+msgstr " (Ð·Ð°Ð¿Ð»Ð°Ð½Ð¸ÑÐ¾Ð²Ð°Ð½Ð½ÑÐµ)"
+
+msgid "NastÄpna strona"
+msgstr "Ð¡Ð»ÐµÐ´ÑÑÑÐ°Ñ ÑÑÑÐ°Ð½Ð¸ÑÐ°"
+
+msgid "UÅ¼ywaj danych z pamiÄci podrÄcznej:"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð´Ð°Ð½Ð½ÑÐµ ÐºÐµÑÐ°:"
+
+msgid "DomyÅlny format video:"
+msgstr "Ð¤Ð¾ÑÐ¼Ð°Ñ Ð²Ð¸Ð´ÐµÐ¾ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ:"
+
+msgid "UÅ¼ywaj domyÅlnego format video:"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·ÑÐ¹ÑÐµ ÑÐ¾ÑÐ¼Ð°Ñ Ð²Ð¸Ð´ÐµÐ¾ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ:"
+
+#, python-format
+msgid "%s"
+msgstr "%s"
+
+msgid "[en] External subtitles download - how to"
+msgstr "[en] ÐÐ°Ðº ÑÐºÐ°ÑÐ°ÑÑ Ð²Ð½ÐµÑÐ½Ð¸Ðµ ÑÑÐ±ÑÐ¸ÑÑÑ"
+
+msgid "[pl] External subtitles download - how to"
+msgstr "[pl] ÐÐ°Ðº ÑÐºÐ°ÑÐ°ÑÑ Ð²Ð½ÐµÑÐ½Ð¸Ðµ ÑÑÐ±ÑÐ¸ÑÑÑ"
+
+msgid "[dash] "
+msgstr "[Ð´ÐµÑÐ¸Ñ] "
+
+msgid "You can try to use WebProxy as workaround, check options under blue button."
+msgstr "ÐÑ Ð¼Ð¾Ð¶ÐµÑÐµ Ð¿Ð¾Ð¿ÑÐ¾Ð±Ð¾Ð²Ð°ÑÑ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ ÐÐµÐ±-Ð¿ÑÐ¾ÐºÑÐ¸ Ð² ÐºÐ°ÑÐµÑÑÐ²Ðµ Ð¾Ð±ÑÐ¾Ð´Ð½Ð¾Ð³Ð¾ Ð¿ÑÑÐ¸. ÐÑÐ¾Ð²ÐµÑÐºÐ° Ð¿Ð°ÑÐ°Ð¼ÐµÑÑÐ¾Ð² Ð¿Ð¾ ÑÐ¸Ð½ÐµÐ¹ ÐºÐ½Ð¾Ð¿ÐºÐµ."
+
+msgid "--Wszystkie--"
+msgstr "-- ÐÑÐµ --"
+
+msgid "You can disable HTTPS certificates validation in the IPTVPlayer configuration to suppress this problem."
+msgstr "ÐÑ Ð¼Ð¾Ð¶ÐµÑÐµ Ð¾ÑÐºÐ»ÑÑÐ¸ÑÑ Ð¿ÑÐ¾Ð²ÐµÑÐºÑ ÑÐµÑÑÐ¸ÑÐ¸ÐºÐ°ÑÐ¾Ð² HTTPS Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ IPTVPlayer, ÑÑÐ¾Ð±Ñ ÑÑÑÑÐ°Ð½Ð¸ÑÑ ÑÑÑ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ñ."
+
+msgid "You can enable PyCurl in the IPTVPlayer configuration to fix this problem."
+msgstr "ÐÑ Ð¼Ð¾Ð¶ÐµÑÐµ Ð²ÐºÐ»ÑÑÐ¸ÑÑ PyCurl Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ IPTVPlayer, ÑÑÐ¾Ð±Ñ ÑÑÑÑÐ°Ð½Ð¸ÑÑ ÑÑÑ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ñ."
+
+msgid "Please report this problem to the developer iptvplayere2@gmail.com."
+msgstr "Ð¡Ð¾Ð¾Ð±ÑÐ¸ÑÐµ Ð¾Ð± ÑÑÐ¾Ð¹ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ðµ ÑÐ°Ð·ÑÐ°Ð±Ð¾ÑÑÐ¸ÐºÑ iptvplayere2@gmail.com."
+
+msgid "You can install PyCurl package from http://www.iptvplayer.gitlab.io/ to fix this problem."
+msgstr "ÐÐ°ÐºÐµÑ PyCurl Ð¼Ð¾Ð¶Ð½Ð¾ ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ Ñ http://www.iptvplayer.gitlab.io/, ÑÑÐ¾Ð±Ñ ÑÑÑÑÐ°Ð½Ð¸ÑÑ ÑÑÑ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ñ."
+
+#, python-format
+msgid "UÅ¼ytkownika \"%s\" zalogowany poprawnie. Brak premium!"
+msgstr "ÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ \"%s\" Ð·Ð°ÑÐµÐ³Ð¸ÑÑÑÐ¸ÑÐ¾Ð²Ð°Ð½ Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¾. ÐÐ¸ÐºÐ°ÐºÐ¾Ð³Ð¾ Ð¿ÑÐµÐ¼Ð¸ÑÐ¼Ð°!"
+
+#, python-format
+msgid "Problem z zalogowanie uÅ¼ytkownika \"%s\". SprawdÅº dane do logowania w konfiguracji hosta."
+msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸ÐµÐ¼ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ \"%s\". ÐÑÐ¾Ð²ÐµÑÑÑÐµ Ð´Ð°Ð½Ð½ÑÐµ Ð²ÑÐ¾Ð´Ð° Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ñ ÑÐ¾ÑÑÐ°."
+
+msgid "Login on https://1fichier.com/ failed."
+msgstr "ÐÑÐ¾Ð´ Ð¿Ð¾ https://1fichier.com/ Ð½Ðµ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½."
+
+msgid "https://openload.co/ link extractor error."
+msgstr "ÐÑÐ¸Ð±ÐºÐ° Ð¾ÑÐ¸Ð±ÐºÐ° Ð²ÑÐ´ÐµÐ»ÐµÐ½Ð¸Ñ ÐºÐ°Ð½Ð°Ð»Ð° https://openload.co/."
+
+#, python-format
+msgid "Problem z zalogowanie uÅ¼ytkownika \"%s. SprawdÅº dane do logowania w konfiguracji hosta.\""
+msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸ÐµÐ¼ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ \"%s. ÐÑÐ¾Ð²ÐµÑÑÑÐµ Ð´Ð°Ð½Ð½ÑÐµ Ð´Ð»Ñ Ð²ÑÐ¾Ð´Ð° Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ñ ÑÐ¾ÑÑÐ°.\""
+
+#, python-format
+msgid "Could not find JS function %r"
+msgstr "ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð½Ð°Ð¹ÑÐ¸  JS-ÑÑÐ½ÐºÑÐ¸Ñ %r"
+
+msgid "Preferred slanguage"
+msgstr "ÐÑÐµÐ´Ð¿Ð¾ÑÑÐ¸ÑÐµÐ»ÑÐ½ÑÐ¹ ÑÐ·ÑÐº"
+
+#, python-format
+msgid ""
+"OpenSSL in your image has different library names then these used by IPTVPlayer.\n"
+"There is need to create following symlinks:\n"
+"%s\n"
+"to be able to install binary components from IPTVPlayer server.\n"
+"Do you want to proceed?"
+msgstr ""
+"OpenSSL Ð½Ð° ÐÐ°ÑÐµÐ¼ Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ð¸ Ð¸Ð¼ÐµÐµÑ ÑÐ°Ð·Ð½ÑÐµ Ð¸Ð¼ÐµÐ½Ð° Ð±Ð¸Ð±Ð»Ð¸Ð¾ÑÐµÐº, Ð° Ð¾Ð½Ð¸ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÑÑÑÑ IPTVPlayer.\n"
+"ÐÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼Ð¾ ÑÐ¾Ð·Ð´Ð°ÑÑ ÑÐ»ÐµÐ´ÑÑÑÐ¸Ðµ ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¸ÑÐµÑÐºÐ¸Ðµ ÑÑÑÐ»ÐºÐ¸:\n"
+"%s\n"
+", ÑÑÐ¾Ð±Ñ Ð¸Ð¼ÐµÑÑ Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾ÑÑÑ ÑÑÑÐ°Ð½Ð°Ð²Ð»Ð¸Ð²Ð°ÑÑ Ð±Ð¸Ð½Ð°ÑÐ½ÑÐµ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÑ Ñ ÑÐµÑÐ²ÐµÑÐ° IPTVPlayer.\n"
+"ÐÑ ÑÐ¾ÑÐ¸ÑÐµ Ð¿ÑÐ¾Ð´Ð¾Ð»Ð¶Ð¸ÑÑ?"
+
+msgid "Configure E2iPlayer"
+msgstr "ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ¸ E2iPlayer"
+
+msgid "Use black iframe at normal video playback finish"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ ÑÐµÑÐ½ÑÐ¹ iframe Ð¿ÑÐ¸ Ð½Ð¾ÑÐ¼Ð°Ð»ÑÐ½Ð¾Ð¼ Ð²Ð¾ÑÐ¿ÑÐ¾Ð¸Ð·Ð²ÐµÐ´ÐµÐ½Ð¸Ð¸ Ð²Ð¸Ð´ÐµÐ¾"
+
+msgid "Create summary screen"
+msgstr "Ð¡Ð¾Ð·Ð´Ð°ÑÑ Ð¸ÑÐ¾Ð³Ð¾Ð²ÑÐ¹ ÑÐºÑÐ°Ð½"
+
+msgid "Please visit http://www.iptvplayer.gitlab.io/captcha.html to learn how to redirect this task to the external device."
+msgstr "ÐÐ¾ÑÐµÑÐ¸ÑÐµ http://www.iptvplayer.gitlab.io/captcha.html, ÑÑÐ¾Ð±Ñ ÑÐ·Ð½Ð°ÑÑ, ÐºÐ°Ðº Ð¿ÐµÑÐµÐ½Ð°Ð¿ÑÐ°Ð²Ð¸ÑÑ ÑÑÑ Ð·Ð°Ð´Ð°ÑÑ Ð½Ð° Ð²Ð½ÐµÑÐ½ÐµÐµ ÑÑÑÑÐ¾Ð¹ÑÑÐ²Ð¾."
+
+msgid "My JDownloader e-mail"
+msgstr "ÐÐ¾Ñ ÑÐ»ÐµÐºÑÑÐ¾Ð½Ð½Ð°Ñ Ð¿Ð¾ÑÑÐ° JDownloader"
+
+msgid "My JDownloader password"
+msgstr "ÐÐ¾Ð¹ Ð¿Ð°ÑÐ¾Ð»Ñ JDownloader"
+
+msgid "My JDownloader device name"
+msgstr "ÐÐ¼Ñ ÑÑÑÑÐ¾Ð¹ÑÑÐ²Ð° JDownloader"
+
+msgid "Info Banner clock format"
+msgstr "Ð¤Ð¾ÑÐ¼Ð°Ñ Ð¸Ð½ÑÐ¾Ð±Ð°Ð½ÐµÑÐ° ÑÐ°ÑÐ¾Ð²"
+
+msgid "Info Banner timeout"
+msgstr "ÐÑÐµÐ¼Ñ Ð¾Ð¶Ð¸Ð´Ð°Ð½Ð¸Ñ Ð¸Ð½ÑÐ¾Ð±Ð°Ð½ÐµÑÐ°"
+
+msgid "    Allow suggestions"
+msgstr "    Ð Ð°Ð·ÑÐµÑÐ¸ÑÑ Ð¿ÑÐµÐ´Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ"
+
+msgid "Such as downloading and installation additional binaries"
+msgstr "Ð¢Ð°ÐºÐ¸Ñ, ÐºÐ°Ðº Ð·Ð°Ð³ÑÑÐ·ÐºÐ° Ð¸ ÑÑÑÐ°Ð½Ð¾Ð²ÐºÐ° Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½ÑÑ Ð±Ð¸Ð½Ð°ÑÐ½ÑÑ Ð¼Ð¾Ð´ÑÐ»ÐµÐ¹"
+
+msgid "Teletext decoder"
+msgstr "ÐÐµÐºÐ¾Ð´ÐµÑ ÑÐµÐ»ÐµÑÐµÐºÑÑÐ°"
+
+msgid "Testers: "
+msgstr "Ð¢ÐµÑÑÐµÑÑ: "
+
+msgid "The \"%s\" utility is used by the IPTVPlayer as external movie player based on the ffmpeg and libeplayer."
+msgstr "Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÑÑ IPTV ÐÐ»ÐµÐµÑÐ¾Ð¼ Ð² ÐºÐ°ÑÐµÑÑÐ²Ðµ Ð²Ð½ÐµÑÐ½ÐµÐ³Ð¾ Ð²Ð¸Ð´ÐµÐ¾Ð¿Ð»ÐµÐµÑÐ° Ð½Ð° Ð¾ÑÐ½Ð¾Ð²Ðµ FFmpeg Ð¸ libeplayer."
+
+msgid "The \"%s\" utility is used by the IPTVPlayer as external movie player."
+msgstr "Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÑÑ IPTV ÐÐ»ÐµÐµÑÐ¾Ð¼ Ð² ÐºÐ°ÑÐµÑÑÐ²Ðµ Ð²Ð½ÐµÑÐ½ÐµÐ³Ð¾ Ð²Ð¸Ð´ÐµÐ¾Ð¿Ð»ÐµÐµÑÐ°."
+
+msgid "The current host crashed"
+msgstr "ÐÐ°Ð½Ð½ÑÐ¹ ÑÐ¾ÑÑ Ð½Ðµ ÑÐ°Ð±Ð¾ÑÐ°ÐµÑ"
+
+msgid "The default video quality:"
+msgstr "ÐÐ°ÑÐµÑÑÐ²Ð¾ Ð²Ð¸Ð´ÐµÐ¾ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ:"
+
+#, python-format
+msgid "The \"%s\" utility is used by the IPTVPlayer to buffering and downloading [%s] links."
+msgstr "Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÑÑ IPTVPlayer-Ð¾Ð¼ Ð´Ð»Ñ ÐºÑÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ Ð¸ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸ ÑÑÑÐ»Ð¾Ðº [%s]."
+
+#, python-format
+msgid "The \"%s\" utility is used by the IPTVPlayer to determine the encoding of the text."
+msgstr "Ð£ÑÐ¸Ð»Ð¸ÑÐ° \"%s\" Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÑÑ IPTVPlayer-Ð¾Ð¼ Ð´Ð»Ñ Ð¾Ð¿ÑÐµÐ´ÐµÐ»ÐµÐ½Ð¸Ñ ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐ¸ ÑÐµÐºÑÑÐ°."
+
+msgid "The problem with obtaining the gateway proxy!"
+msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¸ÐµÐ¼ ÑÐ»ÑÐ·Ð° Ð¿ÑÐ¾ÐºÑÐ¸!"
+
+msgid "The problem with the logged-in user \"%s\". Check your login details in the host configuration."
+msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð°Ð²ÑÐ¾ÑÐ¸Ð·Ð¸ÑÐ°ÑÐ¸ÐµÐ¹ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ \"%s\". ÐÑÐ¾Ð²ÐµÑÑÑÐµ ÑÐ²Ð¾Ð¸ ÑÐµÐ³Ð¸ÑÑÑÐ°ÑÐ¸Ð¾Ð½Ð½ÑÐµ Ð´Ð°Ð½Ð½ÑÐµ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ ÑÐ¾ÑÑÐ°."
+
+msgid "The problem with the user's logon \"%s\". Check your login details in the host configuration."
+msgstr "ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° Ñ Ð²ÑÐ¾Ð´Ð¾Ð¼ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ \"%s\". ÐÑÐ¾Ð²ÐµÑÑÑÐµ ÑÐ²Ð¾Ð¸ ÑÐµÐ³Ð¸ÑÑÑÐ°ÑÐ¸Ð¾Ð½Ð½ÑÐµ Ð´Ð°Ð½Ð½ÑÐµ Ð² ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ ÑÐ¾ÑÑÐ°."
+
+msgid "The user Last.fm"
+msgstr "ÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ Last.fm"
+
+msgid ""
+"There are no active premium account.\n"
+"Using a limited version that may not work properly with congested links."
+msgstr ""
+"ÐÐµÑ Ð°ÐºÑÐ¸Ð²Ð½ÑÑ Ð¿ÑÐµÐ¼Ð¸ÑÐ¼-Ð°ÐºÐºÐ°ÑÐ½ÑÐ¾Ð².\n"
+"ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð¾Ð³ÑÐ°Ð½Ð¸ÑÐµÐ½Ð½ÑÑ Ð²ÐµÑÑÐ¸Ñ, ÐºÐ¾ÑÐ¾ÑÐ°Ñ Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑ ÑÐ°Ð±Ð¾ÑÐ°ÑÑ Ð´Ð¾Ð»Ð¶Ð½ÑÐ¼ Ð¾Ð±ÑÐ°Ð·Ð¾Ð¼ Ñ Ð¿ÐµÑÐµÐ³ÑÑÐ¶ÐµÐ½Ð½ÑÐ¼Ð¸ ÑÑÑÐ»ÐºÐ°Ð¼Ð¸."
+
+msgid "There was an error Download."
+msgstr "ÐÑÐ»Ð° Ð¾ÑÐ¸Ð±ÐºÐ° Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸."
+
+msgid ""
+"There was an error Download. \n"
+"Status[%s], tmpBuffSize[%r], canRunMoviePlayer[%r]"
+msgstr ""
+"ÐÑÐ»Ð° Ð¾ÑÐ¸Ð±ÐºÐ° Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸. \n"
+"Ð¡ÑÐ°ÑÑÑ[%s], tmpÐÑÑÑÐ Ð°Ð·Ð¼ÐµÑ[%r], Ð¼Ð¾Ð¶ÐµÑ ÑÐ°Ð±Ð¾ÑÐ°ÑÑ Gameplayer[%r]"
+
+msgid "There was an error downloading."
+msgstr "ÐÑÐ¸Ð±ÐºÐ° Ð¿ÑÐ¸ Ð·Ð°Ð³ÑÑÐ·ÐºÐµ."
+
+msgid "This site requires login. Please complete host configuration data."
+msgstr "Ð­ÑÐ¾Ñ ÑÐ°Ð¹Ñ ÑÑÐµÐ±ÑÐµÑ Ð»Ð¾Ð³Ð¸Ð½. ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð·Ð°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ Ð´Ð°Ð½Ð½ÑÐµ ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ ÑÐ¾ÑÑÐ¾Ð²."
+
+msgid "Today, too many people are watching a movie with"
+msgstr "Ð¡ÐµÐ³Ð¾Ð´Ð½Ñ ÑÐ»Ð¸ÑÐºÐ¾Ð¼ Ð¼Ð½Ð¾Ð³Ð¾ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÐµÐ¹ ÑÐ¼Ð¾ÑÑÑÑ ÑÐ¸Ð»ÑÐ¼ Ñ"
+
+msgid "Try again for some time"
+msgstr "ÐÐ¾Ð¿ÑÐ¾Ð±ÑÐ¹ÑÐµ ÑÐ½Ð¾Ð²Ð° ÑÐµÑÐµÐ· Ð½ÐµÐºÐ¾ÑÐ¾ÑÐ¾Ðµ Ð²ÑÐµÐ¼Ñ"
+
+msgid "Unknown protocol %s"
+msgstr "ÐÐµÐ¸Ð·Ð²ÐµÑÑÐ½ÑÐ¹ Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð» %s"
+
+msgid "Update failed. Check the status by selectiong interesting and pressing ok."
+msgstr "ÐÐ±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ Ð½Ðµ ÑÐ´Ð°Ð»Ð¾ÑÑ. ÐÑÐ¾Ð²ÐµÑÑÑÐµ ÑÑÐ°ÑÑÑ Ð²ÑÐ±ÑÐ°Ð½Ð½Ð¾Ð³Ð¾ Ð¸ Ð½Ð°Ð¶Ð¼Ð¸ÑÐµ ÐºÐ½Ð¾Ð¿ÐºÑ ÐÐ."
+
+msgid "Use German proxy for link request"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð½ÐµÐ¼ÐµÑÐºÐ¸Ð¹ Ð¿ÑÐ¾ÐºÑÐ¸ Ð´Ð»Ñ Ð·Ð°Ð¿ÑÐ¾ÑÐ° ÑÑÑÐ»ÐºÐ¸"
+
+msgid "Use a proxy gateway"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐ»ÑÐ·"
+
+msgid "Use defauult qality:"
+msgstr "ÐÐ°ÑÐµÑÑÐ²Ð¾ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ:"
+
+msgid "Use ru proxy server:"
+msgstr "ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ ÑÑÑÑÐºÐ¸Ð¹ Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐµÑÐ²ÐµÑ:"
+
+msgid "User Last.fm"
+msgstr "ÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ Last.fm"
+
+msgid "User [%s] logon failure."
+msgstr "ÐÑÐ¸Ð±ÐºÐ° Ð²ÑÐ¾Ð´Ð° Ð² ÑÐ¸ÑÑÐµÐ¼Ñ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ [%s]."
+
+msgid "Video buffer size [MB]"
+msgstr "Ð Ð°Ð·Ð¼ÐµÑ Ð²Ð¸Ð´ÐµÐ¾Ð±ÑÑÐµÑÐ° Ð² [ÐÐ]"
+
+msgid "WWE Main Event"
+msgstr "ÐÐ»Ð°Ð²Ð½Ð¾Ðµ ÑÐ¾Ð±ÑÑÐ¸Ðµ WWE"
+
+msgid "Watch video materials from IPTV services"
+msgstr "ÐÑÐ¾ÑÐ¼Ð¾ÑÑ Ð²Ð¸Ð´ÐµÐ¾ Ð¸Ð· ÑÐµÑÐ²Ð¸ÑÐ¾Ð² IPTV"
+
+msgid "Web streams player"
+msgstr "ÐÑÐ¾Ð¸Ð³ÑÑÐ²Ð°ÑÑÐµÐ»Ñ web-Ð¿Ð¾ÑÐ¾ÐºÐ¾Ð²"
+
+msgid "Webpages: "
+msgstr "Web-ÑÑÑÐ°Ð½Ð¸ÑÐ°: "
+
+msgid "Week"
+msgstr "ÐÐµÐ´ÐµÐ»Ñ"
+
+msgid "Weekly"
+msgstr "ÐÐ¶ÐµÐ½ÐµÐ´ÐµÐ»ÑÐ½Ð¾"
+
+msgid "Writer"
+msgstr "ÐÐ²ÑÐ¾Ñ"
+
+msgid "You can use Russian proxy server as a workaround."
+msgstr "ÐÑ Ð¼Ð¾Ð¶ÐµÑÐµ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ ÑÐ¾ÑÑÐ¸Ð¹ÑÐºÐ¾Ð¹ Ð¿ÑÐ¾ÐºÑÐ¸-ÑÐµÑÐ²ÐµÑ Ð² ÐºÐ°ÑÐµÑÑÐ²Ðµ Ð¾Ð±ÑÐ¾Ð´Ð½Ð¾Ð³Ð¾ Ð¿ÑÑÐ¸."
+
+msgid "You probably have not access to this page due to geolocation restriction."
+msgstr "ÐÑ, Ð½Ð°Ð²ÐµÑÐ½Ð¾Ðµ, Ð½Ðµ Ð¸Ð¼ÐµÐµÑÐµ Ð´Ð¾ÑÑÑÐ¿ Ðº ÑÑÐ¾Ð¹ ÑÑÑÐ°Ð½Ð¸ÑÐµ Ð² ÑÐ²ÑÐ·Ð¸ Ñ Ð³ÐµÐ¾Ð³ÑÐ°ÑÐ¸ÑÐµÑÐºÐ¸Ð¼ Ð¾Ð³ÑÐ°Ð½Ð¸ÑÐµÐ½Ð¸ÐµÐ¼."
+
+msgid "Your OpenSSL version is [%s]"
+msgstr "ÐÐ°ÑÐ° Ð²ÐµÑÑÐ¸Ñ OpenSSL ÑÐ²Ð»ÑÐµÑÑÑ [%s]"
+
+msgid "Your platform is [%s]"
+msgstr "ÐÐ°ÑÐ° Ð¿Ð»Ð°ÑÑÐ¾ÑÐ¼Ð° [%s]"
+
+msgid "Youtube player"
+msgstr "Youtube-Ð¿Ð»ÐµÐµÑ"
+
+msgid "Youtubes player"
+msgstr "Youtube-Ð¿Ð»ÐµÐµÑ"
+
+msgid "[%s] will be used by IPTVPlayer."
+msgstr "[%s] Ð±ÑÐ´ÐµÑ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑÑÑ IPTVPlayer."
+
+msgid "[For download only] "
+msgstr "[Ð¢Ð¾Ð»ÑÐºÐ¾ Ð·Ð°Ð³ÑÑÐ·ÐºÐ°] "
+
+msgid "[group]"
+msgstr "[Ð³ÑÑÐ¿Ð¿Ð°]"
+
+msgid "active"
+msgstr "Ð°ÐºÑÐ¸Ð²Ð½ÑÐ¹"
+
+msgid "back_pressed prev sel index %s"
+msgstr "Ð½Ð°Ð·Ð°Ð´, Ðº Ð¿ÑÐµÐ´ÑÐ´ÑÑÐµÐ¼Ñ Ð¸Ð½Ð´ÐµÐºÑÑ %s"
+
+msgid "based on IP"
+msgstr "Ð½Ð° Ð¾ÑÐ½Ð¾Ð²Ðµ IP"
+
+msgid "buffer-duration"
+msgstr "Ð²ÑÐµÐ¼Ñ Ð±ÑÑÐµÑÐ¸Ð·Ð°ÑÐ¸Ð¸"
+
+msgid "buffer-size"
+msgstr "ÑÐ°Ð·Ð¼ÐµÑ Ð±ÑÑÐµÑÐ°"
+
+msgid "channel"
+msgstr "ÐºÐ°Ð½Ð°Ð»"
+
+msgid "console"
+msgstr "ÐºÐ¾Ð½ÑÐ¾Ð»Ñ"
+
+msgid "cover"
+msgstr "Ð¾Ð±Ð»Ð¾Ð¶ÐºÐ°"
+
+msgid "data"
+msgstr "Ð´Ð°Ð½Ð½ÑÐµ"
+
+msgid "date added"
+msgstr "Ð´Ð°ÑÐ° Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð°"
+
+msgid "date-add"
+msgstr "Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ Ð´Ð°ÑÑ"
+
+msgid "descending"
+msgstr "Ð½Ð¸ÑÑÐ¾Ð´ÑÑÐ¸Ð¹"
+
+msgid "deutsch"
+msgstr "Ð½ÐµÐ¼ÐµÑÐºÐ¸Ðµ"
+
+msgid "download-buffer-path"
+msgstr "Ð¼Ð°ÑÑÑÑÑ Ð±ÑÑÐµÑÐ° Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸"
+
+msgid "downmix"
+msgstr "Ð¼Ð¸ÐºÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ"
+
+msgid "english"
+msgstr "Ð°Ð½Ð³Ð»Ð¸Ð¹ÑÐºÐ¸Ð¹"
+
+msgid "espanol"
+msgstr "Ð¸ÑÐ¿Ð°Ð½ÑÐºÐ¸Ð¹"
+
+msgid "favourtes"
+msgstr "Ð¸Ð·Ð±ÑÐ°Ð½Ð½Ð¾Ðµ"
+
+msgid "free premium player."
+msgstr "ÑÐ²Ð¾Ð±Ð¾Ð´Ð½ÑÐ¹ Ð¿Ð»ÐµÐµÑ."
+
+msgid "good"
+msgstr "ÑÐ¾ÑÐ¾ÑÐ¸Ð¹"
+
+msgid "group"
+msgstr "Ð³ÑÑÐ¿Ð¿Ð°"
+
+msgid "headertext"
+msgstr "ÑÐµÐºÑÑ Ð·Ð°Ð³Ð¾Ð»Ð¾Ð²ÐºÐ°"
+
+msgid "Upcoming"
+msgstr "ÐÑÐµÐ´ÑÑÐ¾ÑÑÐ¸Ðµ"
+
+msgid "Allow watched flag to be set (experimental)"
+msgstr "Ð Ð°Ð·ÑÐµÑÐ¸ÑÑ Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑ ÑÑÑÐ°Ð½Ð¾Ð²Ð»ÐµÐ½Ð½Ð¾Ð³Ð¾ ÑÐ»Ð°Ð³Ð° (ÑÐºÑÐ¿ÐµÑÐ¸Ð¼ÐµÐ½ÑÐ°Ð»ÑÐ½ÑÐ¹)"
+
+msgid "The color of the watched item"
+msgstr "Ð¦Ð²ÐµÑ Ð½Ð°Ð±Ð»ÑÐ´Ð°ÐµÐ¼Ð¾Ð³Ð¾ ÑÐ»ÐµÐ¼ÐµÐ½ÑÐ°"
+
+msgid "External movie player default aspect ratio:"
+msgstr "ÐÐµÑÐ¾Ð»ÑÐ½Ð¾Ðµ ÑÐ¾Ð¾ÑÐ½. ÑÑÐ¾ÑÐ¾Ð½ Ð²Ð¸Ð´ÐµÐ¾ Ð´Ð»Ñ ext-Ð¿Ð»ÐµÐµÑÐ°:"
+
+msgid "You can also install SNI patch for you python if available."
+msgstr "ÐÑ ÑÐ°ÐºÐ¶Ðµ Ð¼Ð¾Ð¶ÐµÑÐµ ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ Ð¿Ð°ÑÑ SNI Ð´Ð»Ñ python, ÐµÑÐ»Ð¸ Ð¾Ð½ Ð´Ð¾ÑÑÑÐ¿ÐµÐ½."
+
+msgid "IPTVPlayer enable/disabled groups"
+msgstr "ÐÐºÐ»ÑÑÐµÐ½Ð¸Ðµ/Ð²ÑÐºÐ»ÑÑÐµÐ½Ð¸Ðµ Ð³ÑÑÐ¿Ð¿ IPTVPlayer"
+
+msgid "<font color=\"#FE642E\">REMEMBER:</font></b> IPTVPlayer <b>IS ONLY</b> specialized Web browser. It does <b>NOT</b> host any materials!!!</font>"
+msgstr "<font color=\"#FE642E\">ÐÐÐÐÐÐÐÐ¢Ð:</font></b> IPTVPlayer <b>Ð¢ÐÐÐ¬ÐÐ</b> ÑÐ¿ÐµÑÐ¸Ð°Ð»Ð¸Ð·Ð¸ÑÐ¾Ð²Ð°Ð½Ð½ÑÐ¹ Ð²ÐµÐ±-Ð±ÑÐ°ÑÐ·ÐµÑ. ÐÐ½ <b>ÐÐ</b> ÑÐ°ÑÐ¿ÑÐ¾ÑÑÑÐ°Ð½ÑÐµÑ Ð½Ð¸ÐºÐ°ÐºÐ¸Ðµ Ð¼Ð°ÑÐµÑÐ¸Ð°Ð»Ñ!</font>"
+
+msgid "You are using old version of OpenWebif.<br> To go to IPTVPlayer web Select the following link<br>"
+msgstr "ÐÑ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÐµ ÑÑÐ°ÑÑÑ Ð²ÐµÑÑÐ¸Ñ OpenWebif. <br> ÐÐµÑÐµÐ¹ÑÐ¸ Ð½Ð° Ð²ÐµÐ±-ÐÑÐ±Ð¾Ñ IPTVPlayer ÑÐ»ÐµÐ´ÑÑÑÐµÐ¹ ÑÑÑÐ»ÐºÐ¸<br>"
+
+msgid "lector hd free "
+msgstr "Ð±ÐµÑÐ¿Ð»Ð°ÑÐ½ÑÐ¹ Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑ HD "
+
+msgid "lector normal free "
+msgstr "Ð±ÐµÑÐ¿Ð»Ð°ÑÐ½ÑÐ¹ Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑ SD "
+
+msgid "live transfers"
+msgstr "Ð¿ÑÑÐ¼ÑÐµ Ð¿Ð¾ÑÐ¾ÐºÐ¸"
+
+msgid "mobile"
+msgstr "Ð¼Ð¾Ð±Ð¸Ð»ÑÐ½ÑÐ¹"
+
+msgid "movie"
+msgstr "ÑÐ¸Ð»ÑÐ¼"
+
+msgid "name"
+msgstr "Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ðµ"
+
+msgid "number of views"
+msgstr "ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑÐ¾Ð²"
+
+msgid "passthrough"
+msgstr "ÑÐºÐ²Ð¾Ð·Ð½Ð¾Ð¹"
+
+msgid "picture link"
+msgstr "ÑÑÑÐ»ÐºÐ° Ð½Ð° ÑÐ¾ÑÐ¾"
+
+msgid "playerlogo"
+msgstr "Ð»Ð¾Ð³Ð¾ÑÐ¸Ð¿ Ð¿Ð»ÐµÐµÑÐ°"
+
+msgid "playlist"
+msgstr "Ð¿Ð»ÐµÐ¹Ð»Ð¸ÑÑ"
+
+msgid "polski"
+msgstr "Ð¿Ð¾Ð»ÑÑÐºÐ¸Ð¹"
+
+msgid "release date"
+msgstr "Ð´Ð°ÑÐ° Ð²ÑÑÐ¾Ð´Ð°"
+
+msgid "ring-buffer-max-size"
+msgstr "Ð¼Ð°ÐºÑÐ¸Ð¼ÑÐ¼ ring-Ð±ÑÑÐµÑÐ°"
+
+msgid "sequencer"
+msgstr "ÑÐµÐºÐ²ÐµÐ½ÑÐµÑ"
+
+msgid "statustext"
+msgstr "ÑÑÐ°ÑÑÑ-ÑÐµÐºÑÑ"
+
+msgid "the name"
+msgstr "Ð¸Ð¼Ñ"
+
+msgid "video"
+msgstr "Ð²Ð¸Ð´ÐµÐ¾"
+
+msgid "web-live.tv login:"
+msgstr "Ð»Ð¾Ð³Ð¸Ð½ web-live.tv:"
+
+msgid "web-live.tv password:"
+msgstr "Ð¿Ð°ÑÐ¾Ð»Ñ web-live.tv:"
+
+msgid "web-live.tv premium user?"
+msgstr "Ð¿ÑÐµÐ¼Ð¸ÑÐ¼ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ web-live.tv?"
+
+msgid "worst"
+msgstr "Ð½Ð°Ð¸ÑÑÐ´ÑÐµÐµ"
+
+msgid " File Not Found."
+msgstr " Ð¤Ð°Ð¹Ð» Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½."
+
+msgid " Login Protected."
+msgstr " ÐÐ¾Ð³Ð¸Ð½ Ð·Ð°ÑÐ¸ÑÐµÐ½."
+
+msgid " This video is a private."
+msgstr " Ð­ÑÐ¾ Ð²Ð¸Ð´ÐµÐ¾ ÑÐ²Ð»ÑÐµÑÑÑ ÑÐ°ÑÑÐ½ÑÐ¼."
+
+#, python-format
+msgid "%s uses \"geo-blocking\" measures to prevent you from accessing the services from outside the %s Territory."
+msgstr "%s Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑ \"Ð³ÐµÐ¾Ð±Ð»Ð¾ÐºÐ¸ÑÑÑÑÐ¸Ðµ\" Ð¼ÐµÑÑ, ÑÑÐ¾Ð±Ñ Ð¿ÑÐµÐ´Ð¾ÑÐ²ÑÐ°ÑÐ¸ÑÑ Ð´Ð¾ÑÑÑÐ¿ Ðº ÑÐµÑÐ²Ð¸ÑÐ°Ð¼ Ð·Ð° Ð¿ÑÐµÐ´ÐµÐ»Ð°Ð¼Ð¸ ÑÐµÑÑÐ¸ÑÐ¾ÑÐ¸Ð¸ %s."
+
+#, python-format
+msgid "Popularity: %s"
+msgstr "ÐÐ¾Ð¿ÑÐ»ÑÑÐ½Ð¾ÑÑÑ: %s"
+
+msgid "Science"
+msgstr "ÐÐ°ÑÐºÐ°"
+
+msgid "Documentary"
+msgstr "ÐÐ¾ÐºÑÐ¼ÐµÐ½ÑÐ°Ð»ÑÐ½Ð¾Ðµ ÐºÐ¸Ð½Ð¾"
+
+msgid "Movies and series"
+msgstr "Ð¤Ð¸Ð»ÑÐ¼Ñ Ð¸ ÑÐµÑÐ¸Ð°Ð»Ñ"
+
+msgid "Olympics"
+msgstr "ÐÐ»Ð¸Ð¼Ð¿Ð¸Ð¹ÑÐºÐ¸Ðµ Ð¸Ð³ÑÑ"
+
+msgid "Cartoons and anime"
+msgstr "ÐÑÐ»ÑÑÑÐ¸Ð»ÑÐ¼Ñ Ð¸ Ð°Ð½Ð¸Ð¼Ðµ"
+
+msgid "User defined"
+msgstr "ÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÑÑÐºÐ¸Ðµ"
+
+msgid "Balkans"
+msgstr "ÐÐ°Ð»ÐºÐ°Ð½ÑÐºÐ¸Ðµ"
+
+msgid "Greek"
+msgstr "ÐÑÐµÑÐµÑÐºÐ¸Ðµ"
+
+msgid "Latino"
+msgstr "ÐÐ°ÑÐ¸Ð½Ð¾Ð°Ð¼ÐµÑÐ¸ÐºÐ°Ð½ÑÐºÐ¸Ðµ"
+
+msgid "Arabic"
+msgstr "ÐÑÐ°Ð±ÑÐºÐ¸Ðµ"
+
+msgid "Add tags to XHAMSTER :"
+msgstr "ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ ÑÐµÐ³Ð¸ Ð² XHAMSTER:"
+
+
+msgid "Update Archive Type:"
+msgstr "ÐÐ±Ð½Ð¾Ð²Ð¸ÑÑ ÑÐ¸Ð¿ Ð°ÑÑÐ¸Ð²Ð°:"
+
+msgid "Xtream Host:"
+msgstr "Ð¥Ð¾ÑÑ Xtream:"
+
+msgid "Xtream Pass:"
+msgstr "ÐÐ°ÑÐ¾Ð»Ñ Xtream:"
+
+msgid "Xtream User Agent:"
+msgstr "ÐÐ¾Ð»ÑÐ·. Ð°Ð³ÐµÐ½Ñ Xtream:"
+
+msgid "Xtream User:"
+msgstr "ÐÐ¾Ð³Ð¸Ð½ Xtream:"
+
+msgid "YOURPORN Server :"
+msgstr "Ð¡ÐµÑÐ²ÐµÑ YOURPORN:"
+
+msgid "Trending Feeds"
+msgstr "ÐÐ°Ð½Ð°Ð»Ñ Ð² ÑÑÐµÐ½Ð´Ðµ"
diff -ruN o/IPTVPlayer/plugin.py pc/IPTVPlayer/plugin.py
--- o/IPTVPlayer/plugin.py	2023-04-03 13:25:47.550165541 +0300
+++ pc/IPTVPlayer/plugin.py	2023-05-03 17:16:32.670022845 +0300
@@ -6,7 +6,6 @@
 from Plugins.Extensions.IPTVPlayer.components.iptvconfigmenu import ConfigMenu
 from Plugins.Extensions.IPTVPlayer.components.iptvpin import IPTVPinWidget
 from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _, IPTVPlayerNeedInit
-from Plugins.Extensions.IPTVPlayer.setup.iptvsetupwidget import IPTVSetupMainWidget
 from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, IsExecutable, IsWebInterfaceModuleAvailable
 ###################################################
 
@@ -148,8 +147,8 @@
         else:
             printDBG('allToolsFromOPKG() >>> All required packages installed :)')
             return True
-    
-    for DBGfile in ['/hdd/iptv.dbg','/tmp/iptv.dbg','/home/root/logs/iptv.dbg', '/tmp/print.log']:
+
+    for DBGfile in ['/media/hdd/iptv.dbg', '/tmp/iptv.dbg', '/tmp/print.log']:
         if os.path.exists(DBGfile):
             try: os.remove(DBGfile)
             except Exception: pass
@@ -159,10 +158,6 @@
     f4mdumppath = IsExecutable(config.plugins.iptvplayer.f4mdumppath.value)
     platform = config.plugins.iptvplayer.plarform.value
     if platform in ["auto", "unknown"] or not wgetpath or not rtmpdumppath or not f4mdumppath:
-        session.openWithCallback(boundFunction(nextFunction, session), IPTVSetupMainWidget)
-    elif IPTVPlayerNeedInit() and os.path.exists('/var/lib/opkg/info/') and not allToolsFromOPKG():
-        session.openWithCallback(boundFunction(nextFunction, session), IPTVSetupMainWidget, True)
-    else:
         nextFunction(session)
 
 
diff -ruN o/IPTVPlayer/setup/iptvsetupimpl.py pc/IPTVPlayer/setup/iptvsetupimpl.py
--- o/IPTVPlayer/setup/iptvsetupimpl.py	2022-07-03 14:10:10.901103924 +0300
+++ pc/IPTVPlayer/setup/iptvsetupimpl.py	2023-05-03 17:16:32.670022845 +0300
@@ -483,7 +483,7 @@
                 return True, False
             else:
                 return False, True
-        self.workingObj = CCmdValidator(self.getFFmpegVerFinished, _verValidator, ['/iptvplayer_rootfs/usr/bin/ffmpeg -version', 'ffmpeg -version'])
+        self.workingObj = CCmdValidator(self.getFFmpegVerFinished, _verValidator, ['/usr/bin/ffmpeg -version', 'ffmpeg -version'])
         self.workingObj.start()
 
     def getFFmpegVerFinished(self, stsTab, dataTab):
diff -ruN o/IPTVPlayer/tools/iptvsubtitles.py pc/IPTVPlayer/tools/iptvsubtitles.py
--- o/IPTVPlayer/tools/iptvsubtitles.py	2022-07-03 14:10:10.901103924 +0300
+++ pc/IPTVPlayer/tools/iptvsubtitles.py	2023-05-03 17:16:32.670022845 +0300
@@ -374,5 +374,5 @@
 
 if __name__ == "__main__":
     obj = IPTVSubtitlesHandler()
-    obj.loadSubtitles('/hdd/_Back.To.The.Future[1985]DvDrip-aXXo.pl.srt')
+    obj.loadSubtitles('/media/hdd/_Back.To.The.Future[1985]DvDrip-aXXo.pl.srt')
     obj.getSubtitles(10000)
diff -ruN o/IPTVPlayer/tools/iptvtools.py pc/IPTVPlayer/tools/iptvtools.py
--- o/IPTVPlayer/tools/iptvtools.py	2023-04-03 13:25:47.550165541 +0300
+++ pc/IPTVPlayer/tools/iptvtools.py	2023-05-03 17:16:32.670022845 +0300
@@ -347,8 +347,8 @@
     baseName = resolveFilename(SCOPE_PLUGINS, 'Extensions/IPTVPlayer/scripts/') + name
     if fileExists(baseName + '.py'):
         baseName += '.py'
-    elif fileExists(baseName + '.pyo'):
-        baseName += '.pyo'
+    elif fileExists(baseName + '.pyc'):
+        baseName += '.pyc'
     if baseName != '':
         for item in ['python', 'python2.7', 'python2.6']:
             pyPath = Which(item)
@@ -558,7 +558,7 @@
             if is_exe(program):
                 return program
         else:
-            pathTab = ['/iptvplayer_rootfs/bin', '/iptvplayer_rootfs/usr/bin', '/iptvplayer_rootfs/sbin', '/iptvplayer_rootfs/usr/sbin']
+            pathTab = ['/bin', '/usr/bin', '/sbin', '/usr/sbin']
             pathTab.extend(os.environ["PATH"].split(os.pathsep))
             for path in pathTab:
                 path = path.strip('"')
@@ -693,7 +693,7 @@
         print(DBGtxt)
     else:
         if DBG == 'debugfile':
-            DBGfile = '/hdd/iptv.dbg' #backward compatibility
+            DBGfile = '/media/hdd/iptv.dbg' #backward compatibility
         else:
             DBGfile = DBG
         try:
diff -ruN o/IPTVPlayer/Web/initiator.py pc/IPTVPlayer/Web/initiator.py
--- o/IPTVPlayer/Web/initiator.py	2022-07-03 14:10:10.733100820 +0300
+++ pc/IPTVPlayer/Web/initiator.py	2023-05-03 17:16:32.674022998 +0300
@@ -55,7 +55,7 @@
     # Old openwebif version (prior July the 14th 2017) has a bug and does not populate links to all properly registered web addons except fancontrol
     # see: https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/pull/629
     #  A HACK: we will canibalize fancontrol entry point (if not installed) to present IPTVplayer option on the web
-    if checkForFC() == True and not os.path.exists(resolveFilename(SCOPE_PLUGINS, 'Extensions/FanControl2/FC2webSite.pyo')):
+    if checkForFC() == True and not os.path.exists(resolveFilename(SCOPE_PLUGINS, 'Extensions/FanControl2/FC2webSite.pyc')):
         fcRoot = static.File(GetPluginDir('Web/'))
         fcRoot.putChild("", redirectionPage())
         try:
diff -ruN o/IPTVPlayer/Web/webSite.py pc/IPTVPlayer/Web/webSite.py
--- o/IPTVPlayer/Web/webSite.py	2022-07-03 14:10:10.737100894 +0300
+++ pc/IPTVPlayer/Web/webSite.py	2023-05-03 17:16:32.674022998 +0300
@@ -29,15 +29,15 @@
     #### Reload scripts if new version of source exists ####
     webPath = GetPluginDir(file='/Web/')
     if os.path.exists(os.path.join(webPath, "webParts.py")):
-        if os.path.exists(os.path.join(webPath, "webParts.pyo")):
-            if (int(os.path.getmtime(os.path.join(webPath, "webParts.pyo"))) <
+        if os.path.exists(os.path.join(webPath, "webParts.pyc")):
+            if (int(os.path.getmtime(os.path.join(webPath, "webParts.pyc"))) <
                 int(os.path.getmtime(os.path.join(webPath, "webParts.py")))):
                 reload(webParts)
         else:
             reload(webParts)
     if os.path.exists(os.path.join(webPath, "webThreads.py")):
-        if os.path.exists(os.path.join(webPath, "webThreads.pyo")):
-            if (int(os.path.getmtime(os.path.join(webPath, "webThreads.pyo"))) <
+        if os.path.exists(os.path.join(webPath, "webThreads.pyc")):
+            if (int(os.path.getmtime(os.path.join(webPath, "webThreads.pyc"))) <
                 int(os.path.getmtime(os.path.join(webPath, "webThreads.py")))):
                 reload(webThreads)
         else:
@@ -255,8 +255,8 @@
         MenuStatusMSG = ''
         extraMeta = ''
 
-        if os.path.exists('/hdd/iptv.dbg'):
-            DBGFileName = '/hdd/iptv.dbg'
+        if os.path.exists('/media/hdd/iptv.dbg'):
+            DBGFileName = '/media/hdd/iptv.dbg'
         elif os.path.exists('/tmp/iptv.dbg'):
             DBGFileName = '/tmp/iptv.dbg'
         else:
